/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class EAxissInfo : TBase
{

  public string Scheme_name { get; set; }

  public int Status { get; set; }

  public double Pos { get; set; }

  public EAxissInfo() {
  }

  public EAxissInfo(string scheme_name, int status, double pos) : this() {
    this.Scheme_name = scheme_name;
    this.Status = status;
    this.Pos = pos;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_scheme_name = false;
      bool isset_status = false;
      bool isset_pos = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Scheme_name = iprot.ReadString();
              isset_scheme_name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Status = iprot.ReadI32();
              isset_status = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Pos = iprot.ReadDouble();
              isset_pos = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_scheme_name)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Scheme_name not set");
      if (!isset_status)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Status not set");
      if (!isset_pos)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Pos not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("EAxissInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Scheme_name == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Scheme_name not set");
      field.Name = "scheme_name";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Scheme_name);
      oprot.WriteFieldEnd();
      field.Name = "status";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Status);
      oprot.WriteFieldEnd();
      field.Name = "pos";
      field.Type = TType.Double;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Pos);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("EAxissInfo(");
    __sb.Append(", Scheme_name: ");
    __sb.Append(Scheme_name);
    __sb.Append(", Status: ");
    __sb.Append(Status);
    __sb.Append(", Pos: ");
    __sb.Append(Pos);
    __sb.Append(")");
    return __sb.ToString();
  }

}

