/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class IOStatus : TBase
{

  public List<double> AnalogCurrentOutputs { get; set; }

  public List<double> AnalogVoltageOutputs { get; set; }

  public List<double> AnalogCurrentInputs { get; set; }

  public List<double> AnalogVoltageInputs { get; set; }

  public List<bool> DigitalInputs { get; set; }

  public List<bool> DigitalOutputs { get; set; }

  public List<bool> ToolIOIn { get; set; }

  public List<bool> ToolIOOut { get; set; }

  public List<bool> ToolButton { get; set; }

  public List<bool> FunRegisterInputs { get; set; }

  public List<bool> FunRegisterOutputs { get; set; }

  public List<bool> BoolRegisterInputs { get; set; }

  public List<bool> BoolRegisterOutputs { get; set; }

  public List<short> WordRegisterInputs { get; set; }

  public List<short> WordRegisterOutputs { get; set; }

  public List<double> FloatRegisterInputs { get; set; }

  public List<double> FloatRegisterOutputs { get; set; }

  public IOStatus() {
  }

  public IOStatus(List<double> analogCurrentOutputs, List<double> analogVoltageOutputs, List<double> analogCurrentInputs, List<double> analogVoltageInputs, List<bool> digitalInputs, List<bool> digitalOutputs, List<bool> toolIOIn, List<bool> toolIOOut, List<bool> toolButton, List<bool> funRegisterInputs, List<bool> funRegisterOutputs, List<bool> boolRegisterInputs, List<bool> boolRegisterOutputs, List<short> wordRegisterInputs, List<short> wordRegisterOutputs, List<double> floatRegisterInputs, List<double> floatRegisterOutputs) : this() {
    this.AnalogCurrentOutputs = analogCurrentOutputs;
    this.AnalogVoltageOutputs = analogVoltageOutputs;
    this.AnalogCurrentInputs = analogCurrentInputs;
    this.AnalogVoltageInputs = analogVoltageInputs;
    this.DigitalInputs = digitalInputs;
    this.DigitalOutputs = digitalOutputs;
    this.ToolIOIn = toolIOIn;
    this.ToolIOOut = toolIOOut;
    this.ToolButton = toolButton;
    this.FunRegisterInputs = funRegisterInputs;
    this.FunRegisterOutputs = funRegisterOutputs;
    this.BoolRegisterInputs = boolRegisterInputs;
    this.BoolRegisterOutputs = boolRegisterOutputs;
    this.WordRegisterInputs = wordRegisterInputs;
    this.WordRegisterOutputs = wordRegisterOutputs;
    this.FloatRegisterInputs = floatRegisterInputs;
    this.FloatRegisterOutputs = floatRegisterOutputs;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_analogCurrentOutputs = false;
      bool isset_analogVoltageOutputs = false;
      bool isset_analogCurrentInputs = false;
      bool isset_analogVoltageInputs = false;
      bool isset_digitalInputs = false;
      bool isset_digitalOutputs = false;
      bool isset_toolIOIn = false;
      bool isset_toolIOOut = false;
      bool isset_toolButton = false;
      bool isset_funRegisterInputs = false;
      bool isset_funRegisterOutputs = false;
      bool isset_boolRegisterInputs = false;
      bool isset_boolRegisterOutputs = false;
      bool isset_wordRegisterInputs = false;
      bool isset_wordRegisterOutputs = false;
      bool isset_floatRegisterInputs = false;
      bool isset_floatRegisterOutputs = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                AnalogCurrentOutputs = new List<double>();
                TList _list64 = iprot.ReadListBegin();
                for( int _i65 = 0; _i65 < _list64.Count; ++_i65)
                {
                  double _elem66;
                  _elem66 = iprot.ReadDouble();
                  AnalogCurrentOutputs.Add(_elem66);
                }
                iprot.ReadListEnd();
              }
              isset_analogCurrentOutputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                AnalogVoltageOutputs = new List<double>();
                TList _list67 = iprot.ReadListBegin();
                for( int _i68 = 0; _i68 < _list67.Count; ++_i68)
                {
                  double _elem69;
                  _elem69 = iprot.ReadDouble();
                  AnalogVoltageOutputs.Add(_elem69);
                }
                iprot.ReadListEnd();
              }
              isset_analogVoltageOutputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                AnalogCurrentInputs = new List<double>();
                TList _list70 = iprot.ReadListBegin();
                for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                {
                  double _elem72;
                  _elem72 = iprot.ReadDouble();
                  AnalogCurrentInputs.Add(_elem72);
                }
                iprot.ReadListEnd();
              }
              isset_analogCurrentInputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                AnalogVoltageInputs = new List<double>();
                TList _list73 = iprot.ReadListBegin();
                for( int _i74 = 0; _i74 < _list73.Count; ++_i74)
                {
                  double _elem75;
                  _elem75 = iprot.ReadDouble();
                  AnalogVoltageInputs.Add(_elem75);
                }
                iprot.ReadListEnd();
              }
              isset_analogVoltageInputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                DigitalInputs = new List<bool>();
                TList _list76 = iprot.ReadListBegin();
                for( int _i77 = 0; _i77 < _list76.Count; ++_i77)
                {
                  bool _elem78;
                  _elem78 = iprot.ReadBool();
                  DigitalInputs.Add(_elem78);
                }
                iprot.ReadListEnd();
              }
              isset_digitalInputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                DigitalOutputs = new List<bool>();
                TList _list79 = iprot.ReadListBegin();
                for( int _i80 = 0; _i80 < _list79.Count; ++_i80)
                {
                  bool _elem81;
                  _elem81 = iprot.ReadBool();
                  DigitalOutputs.Add(_elem81);
                }
                iprot.ReadListEnd();
              }
              isset_digitalOutputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                ToolIOIn = new List<bool>();
                TList _list82 = iprot.ReadListBegin();
                for( int _i83 = 0; _i83 < _list82.Count; ++_i83)
                {
                  bool _elem84;
                  _elem84 = iprot.ReadBool();
                  ToolIOIn.Add(_elem84);
                }
                iprot.ReadListEnd();
              }
              isset_toolIOIn = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                ToolIOOut = new List<bool>();
                TList _list85 = iprot.ReadListBegin();
                for( int _i86 = 0; _i86 < _list85.Count; ++_i86)
                {
                  bool _elem87;
                  _elem87 = iprot.ReadBool();
                  ToolIOOut.Add(_elem87);
                }
                iprot.ReadListEnd();
              }
              isset_toolIOOut = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                ToolButton = new List<bool>();
                TList _list88 = iprot.ReadListBegin();
                for( int _i89 = 0; _i89 < _list88.Count; ++_i89)
                {
                  bool _elem90;
                  _elem90 = iprot.ReadBool();
                  ToolButton.Add(_elem90);
                }
                iprot.ReadListEnd();
              }
              isset_toolButton = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                FunRegisterInputs = new List<bool>();
                TList _list91 = iprot.ReadListBegin();
                for( int _i92 = 0; _i92 < _list91.Count; ++_i92)
                {
                  bool _elem93;
                  _elem93 = iprot.ReadBool();
                  FunRegisterInputs.Add(_elem93);
                }
                iprot.ReadListEnd();
              }
              isset_funRegisterInputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                FunRegisterOutputs = new List<bool>();
                TList _list94 = iprot.ReadListBegin();
                for( int _i95 = 0; _i95 < _list94.Count; ++_i95)
                {
                  bool _elem96;
                  _elem96 = iprot.ReadBool();
                  FunRegisterOutputs.Add(_elem96);
                }
                iprot.ReadListEnd();
              }
              isset_funRegisterOutputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                BoolRegisterInputs = new List<bool>();
                TList _list97 = iprot.ReadListBegin();
                for( int _i98 = 0; _i98 < _list97.Count; ++_i98)
                {
                  bool _elem99;
                  _elem99 = iprot.ReadBool();
                  BoolRegisterInputs.Add(_elem99);
                }
                iprot.ReadListEnd();
              }
              isset_boolRegisterInputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                BoolRegisterOutputs = new List<bool>();
                TList _list100 = iprot.ReadListBegin();
                for( int _i101 = 0; _i101 < _list100.Count; ++_i101)
                {
                  bool _elem102;
                  _elem102 = iprot.ReadBool();
                  BoolRegisterOutputs.Add(_elem102);
                }
                iprot.ReadListEnd();
              }
              isset_boolRegisterOutputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.List) {
              {
                WordRegisterInputs = new List<short>();
                TList _list103 = iprot.ReadListBegin();
                for( int _i104 = 0; _i104 < _list103.Count; ++_i104)
                {
                  short _elem105;
                  _elem105 = iprot.ReadI16();
                  WordRegisterInputs.Add(_elem105);
                }
                iprot.ReadListEnd();
              }
              isset_wordRegisterInputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.List) {
              {
                WordRegisterOutputs = new List<short>();
                TList _list106 = iprot.ReadListBegin();
                for( int _i107 = 0; _i107 < _list106.Count; ++_i107)
                {
                  short _elem108;
                  _elem108 = iprot.ReadI16();
                  WordRegisterOutputs.Add(_elem108);
                }
                iprot.ReadListEnd();
              }
              isset_wordRegisterOutputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.List) {
              {
                FloatRegisterInputs = new List<double>();
                TList _list109 = iprot.ReadListBegin();
                for( int _i110 = 0; _i110 < _list109.Count; ++_i110)
                {
                  double _elem111;
                  _elem111 = iprot.ReadDouble();
                  FloatRegisterInputs.Add(_elem111);
                }
                iprot.ReadListEnd();
              }
              isset_floatRegisterInputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.List) {
              {
                FloatRegisterOutputs = new List<double>();
                TList _list112 = iprot.ReadListBegin();
                for( int _i113 = 0; _i113 < _list112.Count; ++_i113)
                {
                  double _elem114;
                  _elem114 = iprot.ReadDouble();
                  FloatRegisterOutputs.Add(_elem114);
                }
                iprot.ReadListEnd();
              }
              isset_floatRegisterOutputs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_analogCurrentOutputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AnalogCurrentOutputs not set");
      if (!isset_analogVoltageOutputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AnalogVoltageOutputs not set");
      if (!isset_analogCurrentInputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AnalogCurrentInputs not set");
      if (!isset_analogVoltageInputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AnalogVoltageInputs not set");
      if (!isset_digitalInputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DigitalInputs not set");
      if (!isset_digitalOutputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DigitalOutputs not set");
      if (!isset_toolIOIn)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ToolIOIn not set");
      if (!isset_toolIOOut)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ToolIOOut not set");
      if (!isset_toolButton)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ToolButton not set");
      if (!isset_funRegisterInputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FunRegisterInputs not set");
      if (!isset_funRegisterOutputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FunRegisterOutputs not set");
      if (!isset_boolRegisterInputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field BoolRegisterInputs not set");
      if (!isset_boolRegisterOutputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field BoolRegisterOutputs not set");
      if (!isset_wordRegisterInputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field WordRegisterInputs not set");
      if (!isset_wordRegisterOutputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field WordRegisterOutputs not set");
      if (!isset_floatRegisterInputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FloatRegisterInputs not set");
      if (!isset_floatRegisterOutputs)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FloatRegisterOutputs not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("IOStatus");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AnalogCurrentOutputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AnalogCurrentOutputs not set");
      field.Name = "analogCurrentOutputs";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, AnalogCurrentOutputs.Count));
        foreach (double _iter115 in AnalogCurrentOutputs)
        {
          oprot.WriteDouble(_iter115);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (AnalogVoltageOutputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AnalogVoltageOutputs not set");
      field.Name = "analogVoltageOutputs";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, AnalogVoltageOutputs.Count));
        foreach (double _iter116 in AnalogVoltageOutputs)
        {
          oprot.WriteDouble(_iter116);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (AnalogCurrentInputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AnalogCurrentInputs not set");
      field.Name = "analogCurrentInputs";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, AnalogCurrentInputs.Count));
        foreach (double _iter117 in AnalogCurrentInputs)
        {
          oprot.WriteDouble(_iter117);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (AnalogVoltageInputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AnalogVoltageInputs not set");
      field.Name = "analogVoltageInputs";
      field.Type = TType.List;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, AnalogVoltageInputs.Count));
        foreach (double _iter118 in AnalogVoltageInputs)
        {
          oprot.WriteDouble(_iter118);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (DigitalInputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DigitalInputs not set");
      field.Name = "digitalInputs";
      field.Type = TType.List;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Bool, DigitalInputs.Count));
        foreach (bool _iter119 in DigitalInputs)
        {
          oprot.WriteBool(_iter119);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (DigitalOutputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DigitalOutputs not set");
      field.Name = "digitalOutputs";
      field.Type = TType.List;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Bool, DigitalOutputs.Count));
        foreach (bool _iter120 in DigitalOutputs)
        {
          oprot.WriteBool(_iter120);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (ToolIOIn == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ToolIOIn not set");
      field.Name = "toolIOIn";
      field.Type = TType.List;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Bool, ToolIOIn.Count));
        foreach (bool _iter121 in ToolIOIn)
        {
          oprot.WriteBool(_iter121);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (ToolIOOut == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ToolIOOut not set");
      field.Name = "toolIOOut";
      field.Type = TType.List;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Bool, ToolIOOut.Count));
        foreach (bool _iter122 in ToolIOOut)
        {
          oprot.WriteBool(_iter122);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (ToolButton == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ToolButton not set");
      field.Name = "toolButton";
      field.Type = TType.List;
      field.ID = 9;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Bool, ToolButton.Count));
        foreach (bool _iter123 in ToolButton)
        {
          oprot.WriteBool(_iter123);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (FunRegisterInputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FunRegisterInputs not set");
      field.Name = "funRegisterInputs";
      field.Type = TType.List;
      field.ID = 10;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Bool, FunRegisterInputs.Count));
        foreach (bool _iter124 in FunRegisterInputs)
        {
          oprot.WriteBool(_iter124);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (FunRegisterOutputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FunRegisterOutputs not set");
      field.Name = "funRegisterOutputs";
      field.Type = TType.List;
      field.ID = 11;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Bool, FunRegisterOutputs.Count));
        foreach (bool _iter125 in FunRegisterOutputs)
        {
          oprot.WriteBool(_iter125);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (BoolRegisterInputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field BoolRegisterInputs not set");
      field.Name = "boolRegisterInputs";
      field.Type = TType.List;
      field.ID = 12;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Bool, BoolRegisterInputs.Count));
        foreach (bool _iter126 in BoolRegisterInputs)
        {
          oprot.WriteBool(_iter126);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (BoolRegisterOutputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field BoolRegisterOutputs not set");
      field.Name = "boolRegisterOutputs";
      field.Type = TType.List;
      field.ID = 13;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Bool, BoolRegisterOutputs.Count));
        foreach (bool _iter127 in BoolRegisterOutputs)
        {
          oprot.WriteBool(_iter127);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (WordRegisterInputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field WordRegisterInputs not set");
      field.Name = "wordRegisterInputs";
      field.Type = TType.List;
      field.ID = 14;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I16, WordRegisterInputs.Count));
        foreach (short _iter128 in WordRegisterInputs)
        {
          oprot.WriteI16(_iter128);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (WordRegisterOutputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field WordRegisterOutputs not set");
      field.Name = "wordRegisterOutputs";
      field.Type = TType.List;
      field.ID = 15;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I16, WordRegisterOutputs.Count));
        foreach (short _iter129 in WordRegisterOutputs)
        {
          oprot.WriteI16(_iter129);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (FloatRegisterInputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FloatRegisterInputs not set");
      field.Name = "floatRegisterInputs";
      field.Type = TType.List;
      field.ID = 16;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, FloatRegisterInputs.Count));
        foreach (double _iter130 in FloatRegisterInputs)
        {
          oprot.WriteDouble(_iter130);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (FloatRegisterOutputs == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FloatRegisterOutputs not set");
      field.Name = "floatRegisterOutputs";
      field.Type = TType.List;
      field.ID = 17;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, FloatRegisterOutputs.Count));
        foreach (double _iter131 in FloatRegisterOutputs)
        {
          oprot.WriteDouble(_iter131);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("IOStatus(");
    __sb.Append(", AnalogCurrentOutputs: ");
    __sb.Append(AnalogCurrentOutputs);
    __sb.Append(", AnalogVoltageOutputs: ");
    __sb.Append(AnalogVoltageOutputs);
    __sb.Append(", AnalogCurrentInputs: ");
    __sb.Append(AnalogCurrentInputs);
    __sb.Append(", AnalogVoltageInputs: ");
    __sb.Append(AnalogVoltageInputs);
    __sb.Append(", DigitalInputs: ");
    __sb.Append(DigitalInputs);
    __sb.Append(", DigitalOutputs: ");
    __sb.Append(DigitalOutputs);
    __sb.Append(", ToolIOIn: ");
    __sb.Append(ToolIOIn);
    __sb.Append(", ToolIOOut: ");
    __sb.Append(ToolIOOut);
    __sb.Append(", ToolButton: ");
    __sb.Append(ToolButton);
    __sb.Append(", FunRegisterInputs: ");
    __sb.Append(FunRegisterInputs);
    __sb.Append(", FunRegisterOutputs: ");
    __sb.Append(FunRegisterOutputs);
    __sb.Append(", BoolRegisterInputs: ");
    __sb.Append(BoolRegisterInputs);
    __sb.Append(", BoolRegisterOutputs: ");
    __sb.Append(BoolRegisterOutputs);
    __sb.Append(", WordRegisterInputs: ");
    __sb.Append(WordRegisterInputs);
    __sb.Append(", WordRegisterOutputs: ");
    __sb.Append(WordRegisterOutputs);
    __sb.Append(", FloatRegisterInputs: ");
    __sb.Append(FloatRegisterInputs);
    __sb.Append(", FloatRegisterOutputs: ");
    __sb.Append(FloatRegisterOutputs);
    __sb.Append(")");
    return __sb.ToString();
  }

}

