/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Op : TBase
{

  public sbyte Time_or_dist_1 { get; set; }

  public sbyte Trig_io_1 { get; set; }

  public bool Trig_value_1 { get; set; }

  public double Trig_time_1 { get; set; }

  public double Trig_dist_1 { get; set; }

  public string Trig_event_1 { get; set; }

  public sbyte Time_or_dist_2 { get; set; }

  public sbyte Trig_io_2 { get; set; }

  public bool Trig_value_2 { get; set; }

  public double Trig_time_2 { get; set; }

  public double Trig_dist_2 { get; set; }

  public string Trig_event_2 { get; set; }

  public Op() {
  }

  public Op(sbyte time_or_dist_1, sbyte trig_io_1, bool trig_value_1, double trig_time_1, double trig_dist_1, string trig_event_1, sbyte time_or_dist_2, sbyte trig_io_2, bool trig_value_2, double trig_time_2, double trig_dist_2, string trig_event_2) : this() {
    this.Time_or_dist_1 = time_or_dist_1;
    this.Trig_io_1 = trig_io_1;
    this.Trig_value_1 = trig_value_1;
    this.Trig_time_1 = trig_time_1;
    this.Trig_dist_1 = trig_dist_1;
    this.Trig_event_1 = trig_event_1;
    this.Time_or_dist_2 = time_or_dist_2;
    this.Trig_io_2 = trig_io_2;
    this.Trig_value_2 = trig_value_2;
    this.Trig_time_2 = trig_time_2;
    this.Trig_dist_2 = trig_dist_2;
    this.Trig_event_2 = trig_event_2;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_time_or_dist_1 = false;
      bool isset_trig_io_1 = false;
      bool isset_trig_value_1 = false;
      bool isset_trig_time_1 = false;
      bool isset_trig_dist_1 = false;
      bool isset_trig_event_1 = false;
      bool isset_time_or_dist_2 = false;
      bool isset_trig_io_2 = false;
      bool isset_trig_value_2 = false;
      bool isset_trig_time_2 = false;
      bool isset_trig_dist_2 = false;
      bool isset_trig_event_2 = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Time_or_dist_1 = iprot.ReadByte();
              isset_time_or_dist_1 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              Trig_io_1 = iprot.ReadByte();
              isset_trig_io_1 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Trig_value_1 = iprot.ReadBool();
              isset_trig_value_1 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Trig_time_1 = iprot.ReadDouble();
              isset_trig_time_1 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Trig_dist_1 = iprot.ReadDouble();
              isset_trig_dist_1 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Trig_event_1 = iprot.ReadString();
              isset_trig_event_1 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Byte) {
              Time_or_dist_2 = iprot.ReadByte();
              isset_time_or_dist_2 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Byte) {
              Trig_io_2 = iprot.ReadByte();
              isset_trig_io_2 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              Trig_value_2 = iprot.ReadBool();
              isset_trig_value_2 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Double) {
              Trig_time_2 = iprot.ReadDouble();
              isset_trig_time_2 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Double) {
              Trig_dist_2 = iprot.ReadDouble();
              isset_trig_dist_2 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Trig_event_2 = iprot.ReadString();
              isset_trig_event_2 = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_time_or_dist_1)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Time_or_dist_1 not set");
      if (!isset_trig_io_1)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_io_1 not set");
      if (!isset_trig_value_1)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_value_1 not set");
      if (!isset_trig_time_1)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_time_1 not set");
      if (!isset_trig_dist_1)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_dist_1 not set");
      if (!isset_trig_event_1)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_event_1 not set");
      if (!isset_time_or_dist_2)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Time_or_dist_2 not set");
      if (!isset_trig_io_2)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_io_2 not set");
      if (!isset_trig_value_2)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_value_2 not set");
      if (!isset_trig_time_2)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_time_2 not set");
      if (!isset_trig_dist_2)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_dist_2 not set");
      if (!isset_trig_event_2)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_event_2 not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Op");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "time_or_dist_1";
      field.Type = TType.Byte;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(Time_or_dist_1);
      oprot.WriteFieldEnd();
      field.Name = "trig_io_1";
      field.Type = TType.Byte;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(Trig_io_1);
      oprot.WriteFieldEnd();
      field.Name = "trig_value_1";
      field.Type = TType.Bool;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Trig_value_1);
      oprot.WriteFieldEnd();
      field.Name = "trig_time_1";
      field.Type = TType.Double;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Trig_time_1);
      oprot.WriteFieldEnd();
      field.Name = "trig_dist_1";
      field.Type = TType.Double;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Trig_dist_1);
      oprot.WriteFieldEnd();
      if (Trig_event_1 == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_event_1 not set");
      field.Name = "trig_event_1";
      field.Type = TType.String;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Trig_event_1);
      oprot.WriteFieldEnd();
      field.Name = "time_or_dist_2";
      field.Type = TType.Byte;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(Time_or_dist_2);
      oprot.WriteFieldEnd();
      field.Name = "trig_io_2";
      field.Type = TType.Byte;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(Trig_io_2);
      oprot.WriteFieldEnd();
      field.Name = "trig_value_2";
      field.Type = TType.Bool;
      field.ID = 9;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Trig_value_2);
      oprot.WriteFieldEnd();
      field.Name = "trig_time_2";
      field.Type = TType.Double;
      field.ID = 10;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Trig_time_2);
      oprot.WriteFieldEnd();
      field.Name = "trig_dist_2";
      field.Type = TType.Double;
      field.ID = 11;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Trig_dist_2);
      oprot.WriteFieldEnd();
      if (Trig_event_2 == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Trig_event_2 not set");
      field.Name = "trig_event_2";
      field.Type = TType.String;
      field.ID = 12;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Trig_event_2);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Op(");
    __sb.Append(", Time_or_dist_1: ");
    __sb.Append(Time_or_dist_1);
    __sb.Append(", Trig_io_1: ");
    __sb.Append(Trig_io_1);
    __sb.Append(", Trig_value_1: ");
    __sb.Append(Trig_value_1);
    __sb.Append(", Trig_time_1: ");
    __sb.Append(Trig_time_1);
    __sb.Append(", Trig_dist_1: ");
    __sb.Append(Trig_dist_1);
    __sb.Append(", Trig_event_1: ");
    __sb.Append(Trig_event_1);
    __sb.Append(", Time_or_dist_2: ");
    __sb.Append(Time_or_dist_2);
    __sb.Append(", Trig_io_2: ");
    __sb.Append(Trig_io_2);
    __sb.Append(", Trig_value_2: ");
    __sb.Append(Trig_value_2);
    __sb.Append(", Trig_time_2: ");
    __sb.Append(Trig_time_2);
    __sb.Append(", Trig_dist_2: ");
    __sb.Append(Trig_dist_2);
    __sb.Append(", Trig_event_2: ");
    __sb.Append(Trig_event_2);
    __sb.Append(")");
    return __sb.ToString();
  }

}

