/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class RPCRobot {
  public interface ISync {
    int power_on(bool block);
    int power_off(bool block);
    int enable(bool block);
    int disable(bool block);
    int shutdown(bool block);
    int stop(bool block);
    int pause(bool block);
    int resume(bool block);
    int run_program(string name, bool block);
    int set_tool_data(string name, List<double> tool_offset, List<double> payload, List<double> inertia_tensor);
    List<double> get_tool_load();
    List<double> get_tcp_offset();
    int set_wobj(string name, List<double> wobj);
    int set_wobj_offset(List<double> wobj, bool active);
    List<double> get_wobj();
    List<double> cal_fkine(List<double> joints_position, List<double> tool, List<double> wobj);
    List<double> cal_ikine(List<double> p, List<double> q_near, List<double> tool, List<double> wobj);
    int set_digital_output_mode(short num, short type, int freq, int duty_cycle);
    int set_standard_digital_out(short num, bool @value, bool block);
    int set_tool_digital_out(short num, bool @value, bool block);
    bool get_standard_digital_in(short num);
    bool get_standard_digital_out(short num);
    bool get_tool_digital_in(short num);
    bool get_tool_digital_out(short num);
    bool get_config_digital_in(short num);
    double get_standard_analog_voltage_in(short num);
    double get_tool_analog_voltage_in(short num);
    double get_standard_analog_current_in(short num);
    int set_standard_analog_voltage_out(short num, double @value, bool block);
    int set_standard_analog_current_out(short num, double @value, bool block);
    List<sbyte> read_data_485();
    List<sbyte> read_raw_data_485(int len);
    List<sbyte> read_raw_data_485_ht(List<sbyte> head, List<sbyte> tail);
    List<sbyte> read_raw_data_485_h(List<sbyte> head, int len);
    bool write_data_485(List<sbyte> data);
    bool write_raw_data_485(List<sbyte> data);
    bool write_raw_data_485_h(List<sbyte> data, List<sbyte> head);
    bool write_raw_data_485_ht(List<sbyte> data, List<sbyte> head, List<sbyte> tail);
    List<sbyte> tool_read_data_485();
    List<sbyte> tool_read_raw_data_485(int len);
    List<sbyte> tool_read_raw_data_485_h(List<sbyte> head, int len);
    List<sbyte> tool_read_raw_data_485_ht(List<sbyte> head, List<sbyte> tail);
    bool tool_write_data_485(List<sbyte> data);
    bool tool_write_raw_data_485(List<sbyte> data);
    bool tool_write_raw_data_485_h(List<sbyte> data, List<sbyte> head);
    bool tool_write_raw_data_485_ht(List<sbyte> data, List<sbyte> head, List<sbyte> tail);
    List<sbyte> read_data_can();
    List<sbyte> read_raw_data_can();
    bool write_data_can(int id, List<sbyte> data);
    bool write_raw_data_can(int id, List<sbyte> data);
    bool get_function_digital_in(short num);
    bool get_function_digital_out(short num);
    bool read_bool_reg(short num);
    int read_word_reg(short num);
    double read_float_reg(short num);
    int write_bool_reg(short num, bool @value);
    int write_word_reg(short num, int @value);
    int write_float_reg(short num, double @value);
    bool get_function_reg_in(short num);
    bool get_function_reg_out(short num);
    int movej(List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc);
    int movej_pose(List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int movej2(List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc);
    int movej_pose2(List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int movel(List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int movec(List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int move_circle(List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int tcp_move(List<double> pose_offset, double v, double a, double r, string tool, bool block, Op op, bool def_acc);
    int tcp_move_2p(List<double> p1, List<double> p2, double v, double a, double r, string tool, string wobj, bool block, Op op, bool def_acc);
    int spline(List<List<double>> pose_list, double v, double a, string tool, string wobj, bool block, Op op, double r, bool def_acc);
    int speedj(List<double> joints_list, double a, int time, bool block);
    int speedl(List<double> pose_list, double a, int time, bool block);
    int speed_stop(bool block);
    int servoj(List<double> joints_list, double v, double a, bool block, double kp, double kd);
    int servoj_pose(List<double> pose_list, double v, double a, List<double> q_near, string tool, string wobj, bool block, double kp, double kd);
    int servo_tcp(List<double> pose_offset, double v, double a, string tool, bool block, double kp, double kd);
    int teach_mode(bool block);
    int end_teach_mode(bool block);
    int modbus_add_signal(string ip, int slave_number, int signal_address, int signal_type, string signal_name);
    int modbus_delete_signal(string signal_name);
    int modbus_read(string signal_name);
    int modbus_write(string signal_name, int @value);
    void modbus_set_frequency(string signal_name, int frequence);
    List<string> get_last_error();
    int get_noneblock_taskstate(int id);
    void log_info(string message);
    void log_error(string message);
    int simulation(bool sim, bool block);
    int speed(double val);
    List<sbyte> get_robot_state();
    List<double> get_flange_pose();
    List<double> get_flange_speed();
    List<double> get_flange_acceleration();
    List<double> get_tcp_pose();
    List<double> get_tcp_speed();
    List<double> get_tcp_acceleration();
    List<double> get_tcp_force();
    List<double> get_actual_joints_position();
    List<double> get_target_joints_position();
    List<double> get_actual_joints_speed();
    List<double> get_target_joints_speed();
    List<double> get_actual_joints_acceleration();
    List<double> get_target_joints_acceleration();
    List<double> get_actual_joints_torque();
    List<double> get_target_joints_torque();
    int stop_record_track();
    int start_record_track(string name, int mode, string tool, string wobj, double interval);
    int collision_detect(int @value);
    int replay(string name, int @value, int mode);
    int set_load_data(List<double> @value);
    int fc_start();
    int fc_stop();
    int fc_config(List<bool> direction, List<double> ref_ft, List<double> damp, List<double> max_vel, List<double> number_list, string tool, string wobj, int @value);
    int fc_move();
    int fc_guard_act(List<bool> direction, List<double> ref_ft, string tool, string wobj, int type, int force_property);
    int fc_guard_deact();
    int fc_force_set_value(List<bool> direction, List<double> ref_ft);
    int fc_wait_pos(List<double> middle, List<double> range, bool absolute, int duration, int timeout);
    int fc_wait_vel(List<double> middle, List<double> range, bool absolute, int duration, int timeout);
    int fc_wait_ft(List<double> middle, List<double> range, bool absolute, int duration, int timeout);
    int fc_wait_logic(List<int> @value);
    List<double> fc_get_ft();
    bool fc_mode_is_active();
    int start_realtime_mode(int mode, double fileter_bandwidth, double com_lost_time);
    int end_realtime_mode();
    int realtime_data_enqueue(List<RealTimeControlData> realtime_data, bool block);
    int clear_realtime_data_queue();
    int get_realtime_data_queue_size();
    int enable_speed_optimization();
    int disable_speed_optimization();
    void change_recipe();
    int set_system_value_bool(string name, bool @value);
    int set_system_value_double(string name, double @value);
    int set_system_value_str(string name, string @value);
    int set_system_value_list(string name, List<double> @value);
    bool get_system_value_bool(string name);
    double get_system_value_double(string name);
    string get_system_value_str(string name);
    List<double> get_system_value_list(string name);
    int trackEnqueue(List<List<double>> track, bool block);
    int trackClearQueue();
    int getQueueSize();
    int trackJointMotion(double speed, double acc, bool block);
    int trackCartMotion(double speed, double acc, bool block, string tool, string wobj, double radius);
    void rpc_heartbeat(int time);
    int move_spiral(List<double> p1, List<double> p2, double rev, double len, double r, int mode, double v, double a, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int enable_acc_optimization();
    int disable_acc_optimization();
    int set_baudrate_485(int @value, bool block);
    int set_baudrate_can(int @value, bool block);
    int set_analog_output_mode(short num, int mode, bool block);
    bool robotmoving();
    int modbus_write_multiple_coils(int slave_num, string name, int len, List<sbyte> byte_list);
    int modbus_write_multiple_regs(int slave_num, string name, int len, List<short> word_list);
    string get_current_project();
    Dictionary<string, int> get_files_list(string path);
    RobotStatus getRobotStatus();
    IOStatus getRobotIOStatus();
    List<double> get_tcp_pose_coord(string tool, string wobj);
    List<double> get_tcp_force_tool(string tool);
    int restart(bool block);
    int set_servo_config(int axis_num, int id, int @value, int qfmt, bool block);
    int apply_servo_config(int axis_num, bool block);
    List<short> get_motor_pole_pair_number();
    List<short> get_motor_stator_slots();
    List<short> get_axis_ratio();
    int collision_detection_reset();
    int set_servo_file_params(int axis_num, int id, string name, double @value, double qfmt);
    int combine_motion_config(int type, int ref_plane, int fq, int amp, int el_offset, int az_offset, int up_height, List<int> time, List<Op> op_list);
    int set_eaxis_param(int num, EAxisParam param, bool block);
    int add_eaxis_scheme(int num, bool block);
    int delete_eaxis_scheme(int num, bool block);
    int enable_eaxis_scheme(string scheme_name);
    int disable_eaxis_scheme(string scheme_name);
    int set_eaxiss_scheme_param(int num, EAxisSchemeParam param, bool block);
    int move_jog(MoveJogTaskParam param, bool block);
    int stop_manual_move(bool block);
    string get_robot_version();
    int set_teach_pendant(bool enable);
    int get_teach_speed();
    int get_global_speed();
    int set_teach_speed(int v);
    int enable_combine_motion();
    int disable_combine_motion();
    int enable_singularity_control();
    int disable_singularity_control();
    int enable_vibration_control();
    int disable_vibration_control();
    int move_eaxis(string scheme_name, List<double> epose, double v, bool block, Op op);
    int movej2_eaxis(List<double> joints_list, double v, double a, double rad, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc);
    int movej2_pose_eaxis(List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc);
    int movel_eaxis(List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc);
    int movec_eaxis(List<double> p1, List<double> p2, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc);
    ReachabilityParam reach_check(List<double> @base, List<double> wobj, List<double> tool, List<double> ref_pos, List<List<double>> check_points);
    int move_jog_eaxis(string name, int direction, double vel, bool block);
    List<EAxissInfo> get_eaxis_info();
    int set_hand_teach_parameter(int space, int joint_scale, int cart_scale, int coord_type, List<bool> direction);
    int set_pendant_type(int type);
    int set_blend_ahead(int per);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_power_on(AsyncCallback callback, object state, bool block);
    int End_power_on(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_power_off(AsyncCallback callback, object state, bool block);
    int End_power_off(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_enable(AsyncCallback callback, object state, bool block);
    int End_enable(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_disable(AsyncCallback callback, object state, bool block);
    int End_disable(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_shutdown(AsyncCallback callback, object state, bool block);
    int End_shutdown(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_stop(AsyncCallback callback, object state, bool block);
    int End_stop(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_pause(AsyncCallback callback, object state, bool block);
    int End_pause(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_resume(AsyncCallback callback, object state, bool block);
    int End_resume(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_run_program(AsyncCallback callback, object state, string name, bool block);
    int End_run_program(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_tool_data(AsyncCallback callback, object state, string name, List<double> tool_offset, List<double> payload, List<double> inertia_tensor);
    int End_set_tool_data(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tool_load(AsyncCallback callback, object state);
    List<double> End_get_tool_load(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tcp_offset(AsyncCallback callback, object state);
    List<double> End_get_tcp_offset(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_wobj(AsyncCallback callback, object state, string name, List<double> wobj);
    int End_set_wobj(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_wobj_offset(AsyncCallback callback, object state, List<double> wobj, bool active);
    int End_set_wobj_offset(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_wobj(AsyncCallback callback, object state);
    List<double> End_get_wobj(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_cal_fkine(AsyncCallback callback, object state, List<double> joints_position, List<double> tool, List<double> wobj);
    List<double> End_cal_fkine(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_cal_ikine(AsyncCallback callback, object state, List<double> p, List<double> q_near, List<double> tool, List<double> wobj);
    List<double> End_cal_ikine(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_digital_output_mode(AsyncCallback callback, object state, short num, short type, int freq, int duty_cycle);
    int End_set_digital_output_mode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_standard_digital_out(AsyncCallback callback, object state, short num, bool @value, bool block);
    int End_set_standard_digital_out(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_tool_digital_out(AsyncCallback callback, object state, short num, bool @value, bool block);
    int End_set_tool_digital_out(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_standard_digital_in(AsyncCallback callback, object state, short num);
    bool End_get_standard_digital_in(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_standard_digital_out(AsyncCallback callback, object state, short num);
    bool End_get_standard_digital_out(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tool_digital_in(AsyncCallback callback, object state, short num);
    bool End_get_tool_digital_in(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tool_digital_out(AsyncCallback callback, object state, short num);
    bool End_get_tool_digital_out(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_config_digital_in(AsyncCallback callback, object state, short num);
    bool End_get_config_digital_in(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_standard_analog_voltage_in(AsyncCallback callback, object state, short num);
    double End_get_standard_analog_voltage_in(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tool_analog_voltage_in(AsyncCallback callback, object state, short num);
    double End_get_tool_analog_voltage_in(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_standard_analog_current_in(AsyncCallback callback, object state, short num);
    double End_get_standard_analog_current_in(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_standard_analog_voltage_out(AsyncCallback callback, object state, short num, double @value, bool block);
    int End_set_standard_analog_voltage_out(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_standard_analog_current_out(AsyncCallback callback, object state, short num, double @value, bool block);
    int End_set_standard_analog_current_out(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_read_data_485(AsyncCallback callback, object state);
    List<sbyte> End_read_data_485(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_read_raw_data_485(AsyncCallback callback, object state, int len);
    List<sbyte> End_read_raw_data_485(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_read_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> head, List<sbyte> tail);
    List<sbyte> End_read_raw_data_485_ht(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_read_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> head, int len);
    List<sbyte> End_read_raw_data_485_h(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_write_data_485(AsyncCallback callback, object state, List<sbyte> data);
    bool End_write_data_485(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_write_raw_data_485(AsyncCallback callback, object state, List<sbyte> data);
    bool End_write_raw_data_485(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_write_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head);
    bool End_write_raw_data_485_h(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_write_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head, List<sbyte> tail);
    bool End_write_raw_data_485_ht(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tool_read_data_485(AsyncCallback callback, object state);
    List<sbyte> End_tool_read_data_485(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tool_read_raw_data_485(AsyncCallback callback, object state, int len);
    List<sbyte> End_tool_read_raw_data_485(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tool_read_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> head, int len);
    List<sbyte> End_tool_read_raw_data_485_h(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tool_read_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> head, List<sbyte> tail);
    List<sbyte> End_tool_read_raw_data_485_ht(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tool_write_data_485(AsyncCallback callback, object state, List<sbyte> data);
    bool End_tool_write_data_485(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tool_write_raw_data_485(AsyncCallback callback, object state, List<sbyte> data);
    bool End_tool_write_raw_data_485(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tool_write_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head);
    bool End_tool_write_raw_data_485_h(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tool_write_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head, List<sbyte> tail);
    bool End_tool_write_raw_data_485_ht(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_read_data_can(AsyncCallback callback, object state);
    List<sbyte> End_read_data_can(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_read_raw_data_can(AsyncCallback callback, object state);
    List<sbyte> End_read_raw_data_can(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_write_data_can(AsyncCallback callback, object state, int id, List<sbyte> data);
    bool End_write_data_can(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_write_raw_data_can(AsyncCallback callback, object state, int id, List<sbyte> data);
    bool End_write_raw_data_can(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_function_digital_in(AsyncCallback callback, object state, short num);
    bool End_get_function_digital_in(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_function_digital_out(AsyncCallback callback, object state, short num);
    bool End_get_function_digital_out(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_read_bool_reg(AsyncCallback callback, object state, short num);
    bool End_read_bool_reg(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_read_word_reg(AsyncCallback callback, object state, short num);
    int End_read_word_reg(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_read_float_reg(AsyncCallback callback, object state, short num);
    double End_read_float_reg(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_write_bool_reg(AsyncCallback callback, object state, short num, bool @value);
    int End_write_bool_reg(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_write_word_reg(AsyncCallback callback, object state, short num, int @value);
    int End_write_word_reg(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_write_float_reg(AsyncCallback callback, object state, short num, double @value);
    int End_write_float_reg(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_function_reg_in(AsyncCallback callback, object state, short num);
    bool End_get_function_reg_in(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_function_reg_out(AsyncCallback callback, object state, short num);
    bool End_get_function_reg_out(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_movej(AsyncCallback callback, object state, List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc);
    int End_movej(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_movej_pose(AsyncCallback callback, object state, List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int End_movej_pose(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_movej2(AsyncCallback callback, object state, List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc);
    int End_movej2(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_movej_pose2(AsyncCallback callback, object state, List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int End_movej_pose2(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_movel(AsyncCallback callback, object state, List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int End_movel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_movec(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int End_movec(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_move_circle(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int End_move_circle(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tcp_move(AsyncCallback callback, object state, List<double> pose_offset, double v, double a, double r, string tool, bool block, Op op, bool def_acc);
    int End_tcp_move(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tcp_move_2p(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double r, string tool, string wobj, bool block, Op op, bool def_acc);
    int End_tcp_move_2p(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_spline(AsyncCallback callback, object state, List<List<double>> pose_list, double v, double a, string tool, string wobj, bool block, Op op, double r, bool def_acc);
    int End_spline(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_speedj(AsyncCallback callback, object state, List<double> joints_list, double a, int time, bool block);
    int End_speedj(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_speedl(AsyncCallback callback, object state, List<double> pose_list, double a, int time, bool block);
    int End_speedl(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_speed_stop(AsyncCallback callback, object state, bool block);
    int End_speed_stop(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_servoj(AsyncCallback callback, object state, List<double> joints_list, double v, double a, bool block, double kp, double kd);
    int End_servoj(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_servoj_pose(AsyncCallback callback, object state, List<double> pose_list, double v, double a, List<double> q_near, string tool, string wobj, bool block, double kp, double kd);
    int End_servoj_pose(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_servo_tcp(AsyncCallback callback, object state, List<double> pose_offset, double v, double a, string tool, bool block, double kp, double kd);
    int End_servo_tcp(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_teach_mode(AsyncCallback callback, object state, bool block);
    int End_teach_mode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_end_teach_mode(AsyncCallback callback, object state, bool block);
    int End_end_teach_mode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_modbus_add_signal(AsyncCallback callback, object state, string ip, int slave_number, int signal_address, int signal_type, string signal_name);
    int End_modbus_add_signal(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_modbus_delete_signal(AsyncCallback callback, object state, string signal_name);
    int End_modbus_delete_signal(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_modbus_read(AsyncCallback callback, object state, string signal_name);
    int End_modbus_read(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_modbus_write(AsyncCallback callback, object state, string signal_name, int @value);
    int End_modbus_write(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_modbus_set_frequency(AsyncCallback callback, object state, string signal_name, int frequence);
    void End_modbus_set_frequency(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_last_error(AsyncCallback callback, object state);
    List<string> End_get_last_error(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_noneblock_taskstate(AsyncCallback callback, object state, int id);
    int End_get_noneblock_taskstate(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_log_info(AsyncCallback callback, object state, string message);
    void End_log_info(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_log_error(AsyncCallback callback, object state, string message);
    void End_log_error(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_simulation(AsyncCallback callback, object state, bool sim, bool block);
    int End_simulation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_speed(AsyncCallback callback, object state, double val);
    int End_speed(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_robot_state(AsyncCallback callback, object state);
    List<sbyte> End_get_robot_state(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_flange_pose(AsyncCallback callback, object state);
    List<double> End_get_flange_pose(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_flange_speed(AsyncCallback callback, object state);
    List<double> End_get_flange_speed(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_flange_acceleration(AsyncCallback callback, object state);
    List<double> End_get_flange_acceleration(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tcp_pose(AsyncCallback callback, object state);
    List<double> End_get_tcp_pose(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tcp_speed(AsyncCallback callback, object state);
    List<double> End_get_tcp_speed(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tcp_acceleration(AsyncCallback callback, object state);
    List<double> End_get_tcp_acceleration(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tcp_force(AsyncCallback callback, object state);
    List<double> End_get_tcp_force(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_actual_joints_position(AsyncCallback callback, object state);
    List<double> End_get_actual_joints_position(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_target_joints_position(AsyncCallback callback, object state);
    List<double> End_get_target_joints_position(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_actual_joints_speed(AsyncCallback callback, object state);
    List<double> End_get_actual_joints_speed(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_target_joints_speed(AsyncCallback callback, object state);
    List<double> End_get_target_joints_speed(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_actual_joints_acceleration(AsyncCallback callback, object state);
    List<double> End_get_actual_joints_acceleration(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_target_joints_acceleration(AsyncCallback callback, object state);
    List<double> End_get_target_joints_acceleration(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_actual_joints_torque(AsyncCallback callback, object state);
    List<double> End_get_actual_joints_torque(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_target_joints_torque(AsyncCallback callback, object state);
    List<double> End_get_target_joints_torque(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_stop_record_track(AsyncCallback callback, object state);
    int End_stop_record_track(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_start_record_track(AsyncCallback callback, object state, string name, int mode, string tool, string wobj, double interval);
    int End_start_record_track(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_collision_detect(AsyncCallback callback, object state, int @value);
    int End_collision_detect(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_replay(AsyncCallback callback, object state, string name, int @value, int mode);
    int End_replay(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_load_data(AsyncCallback callback, object state, List<double> @value);
    int End_set_load_data(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_start(AsyncCallback callback, object state);
    int End_fc_start(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_stop(AsyncCallback callback, object state);
    int End_fc_stop(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_config(AsyncCallback callback, object state, List<bool> direction, List<double> ref_ft, List<double> damp, List<double> max_vel, List<double> number_list, string tool, string wobj, int @value);
    int End_fc_config(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_move(AsyncCallback callback, object state);
    int End_fc_move(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_guard_act(AsyncCallback callback, object state, List<bool> direction, List<double> ref_ft, string tool, string wobj, int type, int force_property);
    int End_fc_guard_act(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_guard_deact(AsyncCallback callback, object state);
    int End_fc_guard_deact(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_force_set_value(AsyncCallback callback, object state, List<bool> direction, List<double> ref_ft);
    int End_fc_force_set_value(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_wait_pos(AsyncCallback callback, object state, List<double> middle, List<double> range, bool absolute, int duration, int timeout);
    int End_fc_wait_pos(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_wait_vel(AsyncCallback callback, object state, List<double> middle, List<double> range, bool absolute, int duration, int timeout);
    int End_fc_wait_vel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_wait_ft(AsyncCallback callback, object state, List<double> middle, List<double> range, bool absolute, int duration, int timeout);
    int End_fc_wait_ft(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_wait_logic(AsyncCallback callback, object state, List<int> @value);
    int End_fc_wait_logic(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_get_ft(AsyncCallback callback, object state);
    List<double> End_fc_get_ft(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fc_mode_is_active(AsyncCallback callback, object state);
    bool End_fc_mode_is_active(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_start_realtime_mode(AsyncCallback callback, object state, int mode, double fileter_bandwidth, double com_lost_time);
    int End_start_realtime_mode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_end_realtime_mode(AsyncCallback callback, object state);
    int End_end_realtime_mode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_realtime_data_enqueue(AsyncCallback callback, object state, List<RealTimeControlData> realtime_data, bool block);
    int End_realtime_data_enqueue(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_clear_realtime_data_queue(AsyncCallback callback, object state);
    int End_clear_realtime_data_queue(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_realtime_data_queue_size(AsyncCallback callback, object state);
    int End_get_realtime_data_queue_size(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_enable_speed_optimization(AsyncCallback callback, object state);
    int End_enable_speed_optimization(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_disable_speed_optimization(AsyncCallback callback, object state);
    int End_disable_speed_optimization(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_change_recipe(AsyncCallback callback, object state);
    void End_change_recipe(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_system_value_bool(AsyncCallback callback, object state, string name, bool @value);
    int End_set_system_value_bool(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_system_value_double(AsyncCallback callback, object state, string name, double @value);
    int End_set_system_value_double(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_system_value_str(AsyncCallback callback, object state, string name, string @value);
    int End_set_system_value_str(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_system_value_list(AsyncCallback callback, object state, string name, List<double> @value);
    int End_set_system_value_list(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_system_value_bool(AsyncCallback callback, object state, string name);
    bool End_get_system_value_bool(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_system_value_double(AsyncCallback callback, object state, string name);
    double End_get_system_value_double(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_system_value_str(AsyncCallback callback, object state, string name);
    string End_get_system_value_str(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_system_value_list(AsyncCallback callback, object state, string name);
    List<double> End_get_system_value_list(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_trackEnqueue(AsyncCallback callback, object state, List<List<double>> track, bool block);
    int End_trackEnqueue(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_trackClearQueue(AsyncCallback callback, object state);
    int End_trackClearQueue(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getQueueSize(AsyncCallback callback, object state);
    int End_getQueueSize(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_trackJointMotion(AsyncCallback callback, object state, double speed, double acc, bool block);
    int End_trackJointMotion(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_trackCartMotion(AsyncCallback callback, object state, double speed, double acc, bool block, string tool, string wobj, double radius);
    int End_trackCartMotion(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_rpc_heartbeat(AsyncCallback callback, object state, int time);
    void End_rpc_heartbeat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_move_spiral(AsyncCallback callback, object state, List<double> p1, List<double> p2, double rev, double len, double r, int mode, double v, double a, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc);
    int End_move_spiral(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_enable_acc_optimization(AsyncCallback callback, object state);
    int End_enable_acc_optimization(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_disable_acc_optimization(AsyncCallback callback, object state);
    int End_disable_acc_optimization(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_baudrate_485(AsyncCallback callback, object state, int @value, bool block);
    int End_set_baudrate_485(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_baudrate_can(AsyncCallback callback, object state, int @value, bool block);
    int End_set_baudrate_can(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_analog_output_mode(AsyncCallback callback, object state, short num, int mode, bool block);
    int End_set_analog_output_mode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_robotmoving(AsyncCallback callback, object state);
    bool End_robotmoving(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_modbus_write_multiple_coils(AsyncCallback callback, object state, int slave_num, string name, int len, List<sbyte> byte_list);
    int End_modbus_write_multiple_coils(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_modbus_write_multiple_regs(AsyncCallback callback, object state, int slave_num, string name, int len, List<short> word_list);
    int End_modbus_write_multiple_regs(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_current_project(AsyncCallback callback, object state);
    string End_get_current_project(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_files_list(AsyncCallback callback, object state, string path);
    Dictionary<string, int> End_get_files_list(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getRobotStatus(AsyncCallback callback, object state);
    RobotStatus End_getRobotStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getRobotIOStatus(AsyncCallback callback, object state);
    IOStatus End_getRobotIOStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tcp_pose_coord(AsyncCallback callback, object state, string tool, string wobj);
    List<double> End_get_tcp_pose_coord(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_tcp_force_tool(AsyncCallback callback, object state, string tool);
    List<double> End_get_tcp_force_tool(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_restart(AsyncCallback callback, object state, bool block);
    int End_restart(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_servo_config(AsyncCallback callback, object state, int axis_num, int id, int @value, int qfmt, bool block);
    int End_set_servo_config(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_apply_servo_config(AsyncCallback callback, object state, int axis_num, bool block);
    int End_apply_servo_config(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_motor_pole_pair_number(AsyncCallback callback, object state);
    List<short> End_get_motor_pole_pair_number(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_motor_stator_slots(AsyncCallback callback, object state);
    List<short> End_get_motor_stator_slots(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_axis_ratio(AsyncCallback callback, object state);
    List<short> End_get_axis_ratio(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_collision_detection_reset(AsyncCallback callback, object state);
    int End_collision_detection_reset(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_servo_file_params(AsyncCallback callback, object state, int axis_num, int id, string name, double @value, double qfmt);
    int End_set_servo_file_params(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_combine_motion_config(AsyncCallback callback, object state, int type, int ref_plane, int fq, int amp, int el_offset, int az_offset, int up_height, List<int> time, List<Op> op_list);
    int End_combine_motion_config(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_eaxis_param(AsyncCallback callback, object state, int num, EAxisParam param, bool block);
    int End_set_eaxis_param(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_add_eaxis_scheme(AsyncCallback callback, object state, int num, bool block);
    int End_add_eaxis_scheme(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_delete_eaxis_scheme(AsyncCallback callback, object state, int num, bool block);
    int End_delete_eaxis_scheme(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_enable_eaxis_scheme(AsyncCallback callback, object state, string scheme_name);
    int End_enable_eaxis_scheme(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_disable_eaxis_scheme(AsyncCallback callback, object state, string scheme_name);
    int End_disable_eaxis_scheme(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_eaxiss_scheme_param(AsyncCallback callback, object state, int num, EAxisSchemeParam param, bool block);
    int End_set_eaxiss_scheme_param(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_move_jog(AsyncCallback callback, object state, MoveJogTaskParam param, bool block);
    int End_move_jog(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_stop_manual_move(AsyncCallback callback, object state, bool block);
    int End_stop_manual_move(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_robot_version(AsyncCallback callback, object state);
    string End_get_robot_version(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_teach_pendant(AsyncCallback callback, object state, bool enable);
    int End_set_teach_pendant(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_teach_speed(AsyncCallback callback, object state);
    int End_get_teach_speed(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_global_speed(AsyncCallback callback, object state);
    int End_get_global_speed(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_teach_speed(AsyncCallback callback, object state, int v);
    int End_set_teach_speed(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_enable_combine_motion(AsyncCallback callback, object state);
    int End_enable_combine_motion(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_disable_combine_motion(AsyncCallback callback, object state);
    int End_disable_combine_motion(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_enable_singularity_control(AsyncCallback callback, object state);
    int End_enable_singularity_control(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_disable_singularity_control(AsyncCallback callback, object state);
    int End_disable_singularity_control(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_enable_vibration_control(AsyncCallback callback, object state);
    int End_enable_vibration_control(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_disable_vibration_control(AsyncCallback callback, object state);
    int End_disable_vibration_control(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_move_eaxis(AsyncCallback callback, object state, string scheme_name, List<double> epose, double v, bool block, Op op);
    int End_move_eaxis(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_movej2_eaxis(AsyncCallback callback, object state, List<double> joints_list, double v, double a, double rad, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc);
    int End_movej2_eaxis(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_movej2_pose_eaxis(AsyncCallback callback, object state, List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc);
    int End_movej2_pose_eaxis(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_movel_eaxis(AsyncCallback callback, object state, List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc);
    int End_movel_eaxis(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_movec_eaxis(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc);
    int End_movec_eaxis(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reach_check(AsyncCallback callback, object state, List<double> @base, List<double> wobj, List<double> tool, List<double> ref_pos, List<List<double>> check_points);
    ReachabilityParam End_reach_check(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_move_jog_eaxis(AsyncCallback callback, object state, string name, int direction, double vel, bool block);
    int End_move_jog_eaxis(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_get_eaxis_info(AsyncCallback callback, object state);
    List<EAxissInfo> End_get_eaxis_info(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_hand_teach_parameter(AsyncCallback callback, object state, int space, int joint_scale, int cart_scale, int coord_type, List<bool> direction);
    int End_set_hand_teach_parameter(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_pendant_type(AsyncCallback callback, object state, int type);
    int End_set_pendant_type(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_set_blend_ahead(AsyncCallback callback, object state, int per);
    int End_set_blend_ahead(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_power_on(AsyncCallback callback, object state, bool block)
    {
      return send_power_on(callback, state, block);
    }

    public int End_power_on(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_power_on();
    }

    #endif

    public int power_on(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_power_on(null, null, block);
      return End_power_on(asyncResult);

      #else
      send_power_on(block);
      return recv_power_on();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_power_on(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("power_on", TMessageType.Call, seqid_));
      power_on_args args = new power_on_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_power_on(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("power_on", TMessageType.Call, seqid_));
      power_on_args args = new power_on_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_power_on()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      power_on_result result = new power_on_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "power_on failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_power_off(AsyncCallback callback, object state, bool block)
    {
      return send_power_off(callback, state, block);
    }

    public int End_power_off(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_power_off();
    }

    #endif

    public int power_off(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_power_off(null, null, block);
      return End_power_off(asyncResult);

      #else
      send_power_off(block);
      return recv_power_off();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_power_off(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("power_off", TMessageType.Call, seqid_));
      power_off_args args = new power_off_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_power_off(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("power_off", TMessageType.Call, seqid_));
      power_off_args args = new power_off_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_power_off()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      power_off_result result = new power_off_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "power_off failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_enable(AsyncCallback callback, object state, bool block)
    {
      return send_enable(callback, state, block);
    }

    public int End_enable(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_enable();
    }

    #endif

    public int enable(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_enable(null, null, block);
      return End_enable(asyncResult);

      #else
      send_enable(block);
      return recv_enable();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_enable(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("enable", TMessageType.Call, seqid_));
      enable_args args = new enable_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_enable(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("enable", TMessageType.Call, seqid_));
      enable_args args = new enable_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_enable()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      enable_result result = new enable_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "enable failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_disable(AsyncCallback callback, object state, bool block)
    {
      return send_disable(callback, state, block);
    }

    public int End_disable(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_disable();
    }

    #endif

    public int disable(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_disable(null, null, block);
      return End_disable(asyncResult);

      #else
      send_disable(block);
      return recv_disable();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_disable(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("disable", TMessageType.Call, seqid_));
      disable_args args = new disable_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_disable(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("disable", TMessageType.Call, seqid_));
      disable_args args = new disable_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_disable()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disable_result result = new disable_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "disable failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_shutdown(AsyncCallback callback, object state, bool block)
    {
      return send_shutdown(callback, state, block);
    }

    public int End_shutdown(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_shutdown();
    }

    #endif

    public int shutdown(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_shutdown(null, null, block);
      return End_shutdown(asyncResult);

      #else
      send_shutdown(block);
      return recv_shutdown();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_shutdown(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("shutdown", TMessageType.Call, seqid_));
      shutdown_args args = new shutdown_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_shutdown(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("shutdown", TMessageType.Call, seqid_));
      shutdown_args args = new shutdown_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_shutdown()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      shutdown_result result = new shutdown_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shutdown failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_stop(AsyncCallback callback, object state, bool block)
    {
      return send_stop(callback, state, block);
    }

    public int End_stop(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_stop();
    }

    #endif

    public int stop(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_stop(null, null, block);
      return End_stop(asyncResult);

      #else
      send_stop(block);
      return recv_stop();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_stop(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("stop", TMessageType.Call, seqid_));
      stop_args args = new stop_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_stop(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("stop", TMessageType.Call, seqid_));
      stop_args args = new stop_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_stop()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      stop_result result = new stop_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "stop failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_pause(AsyncCallback callback, object state, bool block)
    {
      return send_pause(callback, state, block);
    }

    public int End_pause(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_pause();
    }

    #endif

    public int pause(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_pause(null, null, block);
      return End_pause(asyncResult);

      #else
      send_pause(block);
      return recv_pause();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_pause(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("pause", TMessageType.Call, seqid_));
      pause_args args = new pause_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_pause(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("pause", TMessageType.Call, seqid_));
      pause_args args = new pause_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_pause()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      pause_result result = new pause_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "pause failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_resume(AsyncCallback callback, object state, bool block)
    {
      return send_resume(callback, state, block);
    }

    public int End_resume(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_resume();
    }

    #endif

    public int resume(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_resume(null, null, block);
      return End_resume(asyncResult);

      #else
      send_resume(block);
      return recv_resume();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_resume(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("resume", TMessageType.Call, seqid_));
      resume_args args = new resume_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_resume(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("resume", TMessageType.Call, seqid_));
      resume_args args = new resume_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_resume()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      resume_result result = new resume_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resume failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_run_program(AsyncCallback callback, object state, string name, bool block)
    {
      return send_run_program(callback, state, name, block);
    }

    public int End_run_program(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_run_program();
    }

    #endif

    public int run_program(string name, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_run_program(null, null, name, block);
      return End_run_program(asyncResult);

      #else
      send_run_program(name, block);
      return recv_run_program();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_run_program(AsyncCallback callback, object state, string name, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("run_program", TMessageType.Call, seqid_));
      run_program_args args = new run_program_args();
      args.Name = name;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_run_program(string name, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("run_program", TMessageType.Call, seqid_));
      run_program_args args = new run_program_args();
      args.Name = name;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_run_program()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      run_program_result result = new run_program_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "run_program failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_tool_data(AsyncCallback callback, object state, string name, List<double> tool_offset, List<double> payload, List<double> inertia_tensor)
    {
      return send_set_tool_data(callback, state, name, tool_offset, payload, inertia_tensor);
    }

    public int End_set_tool_data(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_tool_data();
    }

    #endif

    public int set_tool_data(string name, List<double> tool_offset, List<double> payload, List<double> inertia_tensor)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_tool_data(null, null, name, tool_offset, payload, inertia_tensor);
      return End_set_tool_data(asyncResult);

      #else
      send_set_tool_data(name, tool_offset, payload, inertia_tensor);
      return recv_set_tool_data();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_tool_data(AsyncCallback callback, object state, string name, List<double> tool_offset, List<double> payload, List<double> inertia_tensor)
    {
      oprot_.WriteMessageBegin(new TMessage("set_tool_data", TMessageType.Call, seqid_));
      set_tool_data_args args = new set_tool_data_args();
      args.Name = name;
      args.Tool_offset = tool_offset;
      args.Payload = payload;
      args.Inertia_tensor = inertia_tensor;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_tool_data(string name, List<double> tool_offset, List<double> payload, List<double> inertia_tensor)
    {
      oprot_.WriteMessageBegin(new TMessage("set_tool_data", TMessageType.Call, seqid_));
      set_tool_data_args args = new set_tool_data_args();
      args.Name = name;
      args.Tool_offset = tool_offset;
      args.Payload = payload;
      args.Inertia_tensor = inertia_tensor;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_tool_data()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_tool_data_result result = new set_tool_data_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_tool_data failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tool_load(AsyncCallback callback, object state)
    {
      return send_get_tool_load(callback, state);
    }

    public List<double> End_get_tool_load(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tool_load();
    }

    #endif

    public List<double> get_tool_load()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tool_load(null, null);
      return End_get_tool_load(asyncResult);

      #else
      send_get_tool_load();
      return recv_get_tool_load();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tool_load(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tool_load", TMessageType.Call, seqid_));
      get_tool_load_args args = new get_tool_load_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tool_load()
    {
      oprot_.WriteMessageBegin(new TMessage("get_tool_load", TMessageType.Call, seqid_));
      get_tool_load_args args = new get_tool_load_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_tool_load()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tool_load_result result = new get_tool_load_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tool_load failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tcp_offset(AsyncCallback callback, object state)
    {
      return send_get_tcp_offset(callback, state);
    }

    public List<double> End_get_tcp_offset(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tcp_offset();
    }

    #endif

    public List<double> get_tcp_offset()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tcp_offset(null, null);
      return End_get_tcp_offset(asyncResult);

      #else
      send_get_tcp_offset();
      return recv_get_tcp_offset();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tcp_offset(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_offset", TMessageType.Call, seqid_));
      get_tcp_offset_args args = new get_tcp_offset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tcp_offset()
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_offset", TMessageType.Call, seqid_));
      get_tcp_offset_args args = new get_tcp_offset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_tcp_offset()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tcp_offset_result result = new get_tcp_offset_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tcp_offset failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_wobj(AsyncCallback callback, object state, string name, List<double> wobj)
    {
      return send_set_wobj(callback, state, name, wobj);
    }

    public int End_set_wobj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_wobj();
    }

    #endif

    public int set_wobj(string name, List<double> wobj)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_wobj(null, null, name, wobj);
      return End_set_wobj(asyncResult);

      #else
      send_set_wobj(name, wobj);
      return recv_set_wobj();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_wobj(AsyncCallback callback, object state, string name, List<double> wobj)
    {
      oprot_.WriteMessageBegin(new TMessage("set_wobj", TMessageType.Call, seqid_));
      set_wobj_args args = new set_wobj_args();
      args.Name = name;
      args.Wobj = wobj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_wobj(string name, List<double> wobj)
    {
      oprot_.WriteMessageBegin(new TMessage("set_wobj", TMessageType.Call, seqid_));
      set_wobj_args args = new set_wobj_args();
      args.Name = name;
      args.Wobj = wobj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_wobj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_wobj_result result = new set_wobj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_wobj failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_wobj_offset(AsyncCallback callback, object state, List<double> wobj, bool active)
    {
      return send_set_wobj_offset(callback, state, wobj, active);
    }

    public int End_set_wobj_offset(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_wobj_offset();
    }

    #endif

    public int set_wobj_offset(List<double> wobj, bool active)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_wobj_offset(null, null, wobj, active);
      return End_set_wobj_offset(asyncResult);

      #else
      send_set_wobj_offset(wobj, active);
      return recv_set_wobj_offset();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_wobj_offset(AsyncCallback callback, object state, List<double> wobj, bool active)
    {
      oprot_.WriteMessageBegin(new TMessage("set_wobj_offset", TMessageType.Call, seqid_));
      set_wobj_offset_args args = new set_wobj_offset_args();
      args.Wobj = wobj;
      args.Active = active;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_wobj_offset(List<double> wobj, bool active)
    {
      oprot_.WriteMessageBegin(new TMessage("set_wobj_offset", TMessageType.Call, seqid_));
      set_wobj_offset_args args = new set_wobj_offset_args();
      args.Wobj = wobj;
      args.Active = active;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_wobj_offset()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_wobj_offset_result result = new set_wobj_offset_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_wobj_offset failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_wobj(AsyncCallback callback, object state)
    {
      return send_get_wobj(callback, state);
    }

    public List<double> End_get_wobj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_wobj();
    }

    #endif

    public List<double> get_wobj()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_wobj(null, null);
      return End_get_wobj(asyncResult);

      #else
      send_get_wobj();
      return recv_get_wobj();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_wobj(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_wobj", TMessageType.Call, seqid_));
      get_wobj_args args = new get_wobj_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_wobj()
    {
      oprot_.WriteMessageBegin(new TMessage("get_wobj", TMessageType.Call, seqid_));
      get_wobj_args args = new get_wobj_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_wobj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_wobj_result result = new get_wobj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_wobj failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_cal_fkine(AsyncCallback callback, object state, List<double> joints_position, List<double> tool, List<double> wobj)
    {
      return send_cal_fkine(callback, state, joints_position, tool, wobj);
    }

    public List<double> End_cal_fkine(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_cal_fkine();
    }

    #endif

    public List<double> cal_fkine(List<double> joints_position, List<double> tool, List<double> wobj)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_cal_fkine(null, null, joints_position, tool, wobj);
      return End_cal_fkine(asyncResult);

      #else
      send_cal_fkine(joints_position, tool, wobj);
      return recv_cal_fkine();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_cal_fkine(AsyncCallback callback, object state, List<double> joints_position, List<double> tool, List<double> wobj)
    {
      oprot_.WriteMessageBegin(new TMessage("cal_fkine", TMessageType.Call, seqid_));
      cal_fkine_args args = new cal_fkine_args();
      args.Joints_position = joints_position;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_cal_fkine(List<double> joints_position, List<double> tool, List<double> wobj)
    {
      oprot_.WriteMessageBegin(new TMessage("cal_fkine", TMessageType.Call, seqid_));
      cal_fkine_args args = new cal_fkine_args();
      args.Joints_position = joints_position;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_cal_fkine()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      cal_fkine_result result = new cal_fkine_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cal_fkine failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_cal_ikine(AsyncCallback callback, object state, List<double> p, List<double> q_near, List<double> tool, List<double> wobj)
    {
      return send_cal_ikine(callback, state, p, q_near, tool, wobj);
    }

    public List<double> End_cal_ikine(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_cal_ikine();
    }

    #endif

    public List<double> cal_ikine(List<double> p, List<double> q_near, List<double> tool, List<double> wobj)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_cal_ikine(null, null, p, q_near, tool, wobj);
      return End_cal_ikine(asyncResult);

      #else
      send_cal_ikine(p, q_near, tool, wobj);
      return recv_cal_ikine();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_cal_ikine(AsyncCallback callback, object state, List<double> p, List<double> q_near, List<double> tool, List<double> wobj)
    {
      oprot_.WriteMessageBegin(new TMessage("cal_ikine", TMessageType.Call, seqid_));
      cal_ikine_args args = new cal_ikine_args();
      args.P = p;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_cal_ikine(List<double> p, List<double> q_near, List<double> tool, List<double> wobj)
    {
      oprot_.WriteMessageBegin(new TMessage("cal_ikine", TMessageType.Call, seqid_));
      cal_ikine_args args = new cal_ikine_args();
      args.P = p;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_cal_ikine()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      cal_ikine_result result = new cal_ikine_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cal_ikine failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_digital_output_mode(AsyncCallback callback, object state, short num, short type, int freq, int duty_cycle)
    {
      return send_set_digital_output_mode(callback, state, num, type, freq, duty_cycle);
    }

    public int End_set_digital_output_mode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_digital_output_mode();
    }

    #endif

    public int set_digital_output_mode(short num, short type, int freq, int duty_cycle)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_digital_output_mode(null, null, num, type, freq, duty_cycle);
      return End_set_digital_output_mode(asyncResult);

      #else
      send_set_digital_output_mode(num, type, freq, duty_cycle);
      return recv_set_digital_output_mode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_digital_output_mode(AsyncCallback callback, object state, short num, short type, int freq, int duty_cycle)
    {
      oprot_.WriteMessageBegin(new TMessage("set_digital_output_mode", TMessageType.Call, seqid_));
      set_digital_output_mode_args args = new set_digital_output_mode_args();
      args.Num = num;
      args.Type = type;
      args.Freq = freq;
      args.Duty_cycle = duty_cycle;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_digital_output_mode(short num, short type, int freq, int duty_cycle)
    {
      oprot_.WriteMessageBegin(new TMessage("set_digital_output_mode", TMessageType.Call, seqid_));
      set_digital_output_mode_args args = new set_digital_output_mode_args();
      args.Num = num;
      args.Type = type;
      args.Freq = freq;
      args.Duty_cycle = duty_cycle;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_digital_output_mode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_digital_output_mode_result result = new set_digital_output_mode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_digital_output_mode failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_standard_digital_out(AsyncCallback callback, object state, short num, bool @value, bool block)
    {
      return send_set_standard_digital_out(callback, state, num, @value, block);
    }

    public int End_set_standard_digital_out(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_standard_digital_out();
    }

    #endif

    public int set_standard_digital_out(short num, bool @value, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_standard_digital_out(null, null, num, @value, block);
      return End_set_standard_digital_out(asyncResult);

      #else
      send_set_standard_digital_out(num, @value, block);
      return recv_set_standard_digital_out();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_standard_digital_out(AsyncCallback callback, object state, short num, bool @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_standard_digital_out", TMessageType.Call, seqid_));
      set_standard_digital_out_args args = new set_standard_digital_out_args();
      args.Num = num;
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_standard_digital_out(short num, bool @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_standard_digital_out", TMessageType.Call, seqid_));
      set_standard_digital_out_args args = new set_standard_digital_out_args();
      args.Num = num;
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_standard_digital_out()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_standard_digital_out_result result = new set_standard_digital_out_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_standard_digital_out failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_tool_digital_out(AsyncCallback callback, object state, short num, bool @value, bool block)
    {
      return send_set_tool_digital_out(callback, state, num, @value, block);
    }

    public int End_set_tool_digital_out(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_tool_digital_out();
    }

    #endif

    public int set_tool_digital_out(short num, bool @value, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_tool_digital_out(null, null, num, @value, block);
      return End_set_tool_digital_out(asyncResult);

      #else
      send_set_tool_digital_out(num, @value, block);
      return recv_set_tool_digital_out();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_tool_digital_out(AsyncCallback callback, object state, short num, bool @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_tool_digital_out", TMessageType.Call, seqid_));
      set_tool_digital_out_args args = new set_tool_digital_out_args();
      args.Num = num;
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_tool_digital_out(short num, bool @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_tool_digital_out", TMessageType.Call, seqid_));
      set_tool_digital_out_args args = new set_tool_digital_out_args();
      args.Num = num;
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_tool_digital_out()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_tool_digital_out_result result = new set_tool_digital_out_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_tool_digital_out failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_standard_digital_in(AsyncCallback callback, object state, short num)
    {
      return send_get_standard_digital_in(callback, state, num);
    }

    public bool End_get_standard_digital_in(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_standard_digital_in();
    }

    #endif

    public bool get_standard_digital_in(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_standard_digital_in(null, null, num);
      return End_get_standard_digital_in(asyncResult);

      #else
      send_get_standard_digital_in(num);
      return recv_get_standard_digital_in();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_standard_digital_in(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_standard_digital_in", TMessageType.Call, seqid_));
      get_standard_digital_in_args args = new get_standard_digital_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_standard_digital_in(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_standard_digital_in", TMessageType.Call, seqid_));
      get_standard_digital_in_args args = new get_standard_digital_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_get_standard_digital_in()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_standard_digital_in_result result = new get_standard_digital_in_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_standard_digital_in failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_standard_digital_out(AsyncCallback callback, object state, short num)
    {
      return send_get_standard_digital_out(callback, state, num);
    }

    public bool End_get_standard_digital_out(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_standard_digital_out();
    }

    #endif

    public bool get_standard_digital_out(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_standard_digital_out(null, null, num);
      return End_get_standard_digital_out(asyncResult);

      #else
      send_get_standard_digital_out(num);
      return recv_get_standard_digital_out();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_standard_digital_out(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_standard_digital_out", TMessageType.Call, seqid_));
      get_standard_digital_out_args args = new get_standard_digital_out_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_standard_digital_out(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_standard_digital_out", TMessageType.Call, seqid_));
      get_standard_digital_out_args args = new get_standard_digital_out_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_get_standard_digital_out()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_standard_digital_out_result result = new get_standard_digital_out_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_standard_digital_out failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tool_digital_in(AsyncCallback callback, object state, short num)
    {
      return send_get_tool_digital_in(callback, state, num);
    }

    public bool End_get_tool_digital_in(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tool_digital_in();
    }

    #endif

    public bool get_tool_digital_in(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tool_digital_in(null, null, num);
      return End_get_tool_digital_in(asyncResult);

      #else
      send_get_tool_digital_in(num);
      return recv_get_tool_digital_in();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tool_digital_in(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tool_digital_in", TMessageType.Call, seqid_));
      get_tool_digital_in_args args = new get_tool_digital_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tool_digital_in(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tool_digital_in", TMessageType.Call, seqid_));
      get_tool_digital_in_args args = new get_tool_digital_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_get_tool_digital_in()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tool_digital_in_result result = new get_tool_digital_in_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tool_digital_in failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tool_digital_out(AsyncCallback callback, object state, short num)
    {
      return send_get_tool_digital_out(callback, state, num);
    }

    public bool End_get_tool_digital_out(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tool_digital_out();
    }

    #endif

    public bool get_tool_digital_out(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tool_digital_out(null, null, num);
      return End_get_tool_digital_out(asyncResult);

      #else
      send_get_tool_digital_out(num);
      return recv_get_tool_digital_out();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tool_digital_out(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tool_digital_out", TMessageType.Call, seqid_));
      get_tool_digital_out_args args = new get_tool_digital_out_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tool_digital_out(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tool_digital_out", TMessageType.Call, seqid_));
      get_tool_digital_out_args args = new get_tool_digital_out_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_get_tool_digital_out()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tool_digital_out_result result = new get_tool_digital_out_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tool_digital_out failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_config_digital_in(AsyncCallback callback, object state, short num)
    {
      return send_get_config_digital_in(callback, state, num);
    }

    public bool End_get_config_digital_in(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_config_digital_in();
    }

    #endif

    public bool get_config_digital_in(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_config_digital_in(null, null, num);
      return End_get_config_digital_in(asyncResult);

      #else
      send_get_config_digital_in(num);
      return recv_get_config_digital_in();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_config_digital_in(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_config_digital_in", TMessageType.Call, seqid_));
      get_config_digital_in_args args = new get_config_digital_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_config_digital_in(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_config_digital_in", TMessageType.Call, seqid_));
      get_config_digital_in_args args = new get_config_digital_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_get_config_digital_in()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_config_digital_in_result result = new get_config_digital_in_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_config_digital_in failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_standard_analog_voltage_in(AsyncCallback callback, object state, short num)
    {
      return send_get_standard_analog_voltage_in(callback, state, num);
    }

    public double End_get_standard_analog_voltage_in(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_standard_analog_voltage_in();
    }

    #endif

    public double get_standard_analog_voltage_in(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_standard_analog_voltage_in(null, null, num);
      return End_get_standard_analog_voltage_in(asyncResult);

      #else
      send_get_standard_analog_voltage_in(num);
      return recv_get_standard_analog_voltage_in();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_standard_analog_voltage_in(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_standard_analog_voltage_in", TMessageType.Call, seqid_));
      get_standard_analog_voltage_in_args args = new get_standard_analog_voltage_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_standard_analog_voltage_in(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_standard_analog_voltage_in", TMessageType.Call, seqid_));
      get_standard_analog_voltage_in_args args = new get_standard_analog_voltage_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public double recv_get_standard_analog_voltage_in()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_standard_analog_voltage_in_result result = new get_standard_analog_voltage_in_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_standard_analog_voltage_in failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tool_analog_voltage_in(AsyncCallback callback, object state, short num)
    {
      return send_get_tool_analog_voltage_in(callback, state, num);
    }

    public double End_get_tool_analog_voltage_in(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tool_analog_voltage_in();
    }

    #endif

    public double get_tool_analog_voltage_in(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tool_analog_voltage_in(null, null, num);
      return End_get_tool_analog_voltage_in(asyncResult);

      #else
      send_get_tool_analog_voltage_in(num);
      return recv_get_tool_analog_voltage_in();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tool_analog_voltage_in(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tool_analog_voltage_in", TMessageType.Call, seqid_));
      get_tool_analog_voltage_in_args args = new get_tool_analog_voltage_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tool_analog_voltage_in(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tool_analog_voltage_in", TMessageType.Call, seqid_));
      get_tool_analog_voltage_in_args args = new get_tool_analog_voltage_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public double recv_get_tool_analog_voltage_in()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tool_analog_voltage_in_result result = new get_tool_analog_voltage_in_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tool_analog_voltage_in failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_standard_analog_current_in(AsyncCallback callback, object state, short num)
    {
      return send_get_standard_analog_current_in(callback, state, num);
    }

    public double End_get_standard_analog_current_in(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_standard_analog_current_in();
    }

    #endif

    public double get_standard_analog_current_in(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_standard_analog_current_in(null, null, num);
      return End_get_standard_analog_current_in(asyncResult);

      #else
      send_get_standard_analog_current_in(num);
      return recv_get_standard_analog_current_in();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_standard_analog_current_in(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_standard_analog_current_in", TMessageType.Call, seqid_));
      get_standard_analog_current_in_args args = new get_standard_analog_current_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_standard_analog_current_in(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_standard_analog_current_in", TMessageType.Call, seqid_));
      get_standard_analog_current_in_args args = new get_standard_analog_current_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public double recv_get_standard_analog_current_in()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_standard_analog_current_in_result result = new get_standard_analog_current_in_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_standard_analog_current_in failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_standard_analog_voltage_out(AsyncCallback callback, object state, short num, double @value, bool block)
    {
      return send_set_standard_analog_voltage_out(callback, state, num, @value, block);
    }

    public int End_set_standard_analog_voltage_out(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_standard_analog_voltage_out();
    }

    #endif

    public int set_standard_analog_voltage_out(short num, double @value, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_standard_analog_voltage_out(null, null, num, @value, block);
      return End_set_standard_analog_voltage_out(asyncResult);

      #else
      send_set_standard_analog_voltage_out(num, @value, block);
      return recv_set_standard_analog_voltage_out();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_standard_analog_voltage_out(AsyncCallback callback, object state, short num, double @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_standard_analog_voltage_out", TMessageType.Call, seqid_));
      set_standard_analog_voltage_out_args args = new set_standard_analog_voltage_out_args();
      args.Num = num;
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_standard_analog_voltage_out(short num, double @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_standard_analog_voltage_out", TMessageType.Call, seqid_));
      set_standard_analog_voltage_out_args args = new set_standard_analog_voltage_out_args();
      args.Num = num;
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_standard_analog_voltage_out()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_standard_analog_voltage_out_result result = new set_standard_analog_voltage_out_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_standard_analog_voltage_out failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_standard_analog_current_out(AsyncCallback callback, object state, short num, double @value, bool block)
    {
      return send_set_standard_analog_current_out(callback, state, num, @value, block);
    }

    public int End_set_standard_analog_current_out(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_standard_analog_current_out();
    }

    #endif

    public int set_standard_analog_current_out(short num, double @value, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_standard_analog_current_out(null, null, num, @value, block);
      return End_set_standard_analog_current_out(asyncResult);

      #else
      send_set_standard_analog_current_out(num, @value, block);
      return recv_set_standard_analog_current_out();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_standard_analog_current_out(AsyncCallback callback, object state, short num, double @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_standard_analog_current_out", TMessageType.Call, seqid_));
      set_standard_analog_current_out_args args = new set_standard_analog_current_out_args();
      args.Num = num;
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_standard_analog_current_out(short num, double @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_standard_analog_current_out", TMessageType.Call, seqid_));
      set_standard_analog_current_out_args args = new set_standard_analog_current_out_args();
      args.Num = num;
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_standard_analog_current_out()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_standard_analog_current_out_result result = new set_standard_analog_current_out_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_standard_analog_current_out failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_read_data_485(AsyncCallback callback, object state)
    {
      return send_read_data_485(callback, state);
    }

    public List<sbyte> End_read_data_485(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_read_data_485();
    }

    #endif

    public List<sbyte> read_data_485()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_read_data_485(null, null);
      return End_read_data_485(asyncResult);

      #else
      send_read_data_485();
      return recv_read_data_485();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_read_data_485(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("read_data_485", TMessageType.Call, seqid_));
      read_data_485_args args = new read_data_485_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_read_data_485()
    {
      oprot_.WriteMessageBegin(new TMessage("read_data_485", TMessageType.Call, seqid_));
      read_data_485_args args = new read_data_485_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_read_data_485()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      read_data_485_result result = new read_data_485_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read_data_485 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_read_raw_data_485(AsyncCallback callback, object state, int len)
    {
      return send_read_raw_data_485(callback, state, len);
    }

    public List<sbyte> End_read_raw_data_485(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_read_raw_data_485();
    }

    #endif

    public List<sbyte> read_raw_data_485(int len)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_read_raw_data_485(null, null, len);
      return End_read_raw_data_485(asyncResult);

      #else
      send_read_raw_data_485(len);
      return recv_read_raw_data_485();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_read_raw_data_485(AsyncCallback callback, object state, int len)
    {
      oprot_.WriteMessageBegin(new TMessage("read_raw_data_485", TMessageType.Call, seqid_));
      read_raw_data_485_args args = new read_raw_data_485_args();
      args.Len = len;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_read_raw_data_485(int len)
    {
      oprot_.WriteMessageBegin(new TMessage("read_raw_data_485", TMessageType.Call, seqid_));
      read_raw_data_485_args args = new read_raw_data_485_args();
      args.Len = len;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_read_raw_data_485()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      read_raw_data_485_result result = new read_raw_data_485_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read_raw_data_485 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_read_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> head, List<sbyte> tail)
    {
      return send_read_raw_data_485_ht(callback, state, head, tail);
    }

    public List<sbyte> End_read_raw_data_485_ht(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_read_raw_data_485_ht();
    }

    #endif

    public List<sbyte> read_raw_data_485_ht(List<sbyte> head, List<sbyte> tail)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_read_raw_data_485_ht(null, null, head, tail);
      return End_read_raw_data_485_ht(asyncResult);

      #else
      send_read_raw_data_485_ht(head, tail);
      return recv_read_raw_data_485_ht();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_read_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> head, List<sbyte> tail)
    {
      oprot_.WriteMessageBegin(new TMessage("read_raw_data_485_ht", TMessageType.Call, seqid_));
      read_raw_data_485_ht_args args = new read_raw_data_485_ht_args();
      args.Head = head;
      args.Tail = tail;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_read_raw_data_485_ht(List<sbyte> head, List<sbyte> tail)
    {
      oprot_.WriteMessageBegin(new TMessage("read_raw_data_485_ht", TMessageType.Call, seqid_));
      read_raw_data_485_ht_args args = new read_raw_data_485_ht_args();
      args.Head = head;
      args.Tail = tail;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_read_raw_data_485_ht()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      read_raw_data_485_ht_result result = new read_raw_data_485_ht_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read_raw_data_485_ht failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_read_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> head, int len)
    {
      return send_read_raw_data_485_h(callback, state, head, len);
    }

    public List<sbyte> End_read_raw_data_485_h(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_read_raw_data_485_h();
    }

    #endif

    public List<sbyte> read_raw_data_485_h(List<sbyte> head, int len)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_read_raw_data_485_h(null, null, head, len);
      return End_read_raw_data_485_h(asyncResult);

      #else
      send_read_raw_data_485_h(head, len);
      return recv_read_raw_data_485_h();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_read_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> head, int len)
    {
      oprot_.WriteMessageBegin(new TMessage("read_raw_data_485_h", TMessageType.Call, seqid_));
      read_raw_data_485_h_args args = new read_raw_data_485_h_args();
      args.Head = head;
      args.Len = len;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_read_raw_data_485_h(List<sbyte> head, int len)
    {
      oprot_.WriteMessageBegin(new TMessage("read_raw_data_485_h", TMessageType.Call, seqid_));
      read_raw_data_485_h_args args = new read_raw_data_485_h_args();
      args.Head = head;
      args.Len = len;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_read_raw_data_485_h()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      read_raw_data_485_h_result result = new read_raw_data_485_h_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read_raw_data_485_h failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_write_data_485(AsyncCallback callback, object state, List<sbyte> data)
    {
      return send_write_data_485(callback, state, data);
    }

    public bool End_write_data_485(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_write_data_485();
    }

    #endif

    public bool write_data_485(List<sbyte> data)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_write_data_485(null, null, data);
      return End_write_data_485(asyncResult);

      #else
      send_write_data_485(data);
      return recv_write_data_485();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_write_data_485(AsyncCallback callback, object state, List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("write_data_485", TMessageType.Call, seqid_));
      write_data_485_args args = new write_data_485_args();
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_write_data_485(List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("write_data_485", TMessageType.Call, seqid_));
      write_data_485_args args = new write_data_485_args();
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_write_data_485()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      write_data_485_result result = new write_data_485_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "write_data_485 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_write_raw_data_485(AsyncCallback callback, object state, List<sbyte> data)
    {
      return send_write_raw_data_485(callback, state, data);
    }

    public bool End_write_raw_data_485(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_write_raw_data_485();
    }

    #endif

    public bool write_raw_data_485(List<sbyte> data)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_write_raw_data_485(null, null, data);
      return End_write_raw_data_485(asyncResult);

      #else
      send_write_raw_data_485(data);
      return recv_write_raw_data_485();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_write_raw_data_485(AsyncCallback callback, object state, List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("write_raw_data_485", TMessageType.Call, seqid_));
      write_raw_data_485_args args = new write_raw_data_485_args();
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_write_raw_data_485(List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("write_raw_data_485", TMessageType.Call, seqid_));
      write_raw_data_485_args args = new write_raw_data_485_args();
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_write_raw_data_485()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      write_raw_data_485_result result = new write_raw_data_485_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "write_raw_data_485 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_write_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head)
    {
      return send_write_raw_data_485_h(callback, state, data, head);
    }

    public bool End_write_raw_data_485_h(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_write_raw_data_485_h();
    }

    #endif

    public bool write_raw_data_485_h(List<sbyte> data, List<sbyte> head)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_write_raw_data_485_h(null, null, data, head);
      return End_write_raw_data_485_h(asyncResult);

      #else
      send_write_raw_data_485_h(data, head);
      return recv_write_raw_data_485_h();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_write_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head)
    {
      oprot_.WriteMessageBegin(new TMessage("write_raw_data_485_h", TMessageType.Call, seqid_));
      write_raw_data_485_h_args args = new write_raw_data_485_h_args();
      args.Data = data;
      args.Head = head;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_write_raw_data_485_h(List<sbyte> data, List<sbyte> head)
    {
      oprot_.WriteMessageBegin(new TMessage("write_raw_data_485_h", TMessageType.Call, seqid_));
      write_raw_data_485_h_args args = new write_raw_data_485_h_args();
      args.Data = data;
      args.Head = head;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_write_raw_data_485_h()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      write_raw_data_485_h_result result = new write_raw_data_485_h_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "write_raw_data_485_h failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_write_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head, List<sbyte> tail)
    {
      return send_write_raw_data_485_ht(callback, state, data, head, tail);
    }

    public bool End_write_raw_data_485_ht(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_write_raw_data_485_ht();
    }

    #endif

    public bool write_raw_data_485_ht(List<sbyte> data, List<sbyte> head, List<sbyte> tail)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_write_raw_data_485_ht(null, null, data, head, tail);
      return End_write_raw_data_485_ht(asyncResult);

      #else
      send_write_raw_data_485_ht(data, head, tail);
      return recv_write_raw_data_485_ht();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_write_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head, List<sbyte> tail)
    {
      oprot_.WriteMessageBegin(new TMessage("write_raw_data_485_ht", TMessageType.Call, seqid_));
      write_raw_data_485_ht_args args = new write_raw_data_485_ht_args();
      args.Data = data;
      args.Head = head;
      args.Tail = tail;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_write_raw_data_485_ht(List<sbyte> data, List<sbyte> head, List<sbyte> tail)
    {
      oprot_.WriteMessageBegin(new TMessage("write_raw_data_485_ht", TMessageType.Call, seqid_));
      write_raw_data_485_ht_args args = new write_raw_data_485_ht_args();
      args.Data = data;
      args.Head = head;
      args.Tail = tail;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_write_raw_data_485_ht()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      write_raw_data_485_ht_result result = new write_raw_data_485_ht_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "write_raw_data_485_ht failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tool_read_data_485(AsyncCallback callback, object state)
    {
      return send_tool_read_data_485(callback, state);
    }

    public List<sbyte> End_tool_read_data_485(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tool_read_data_485();
    }

    #endif

    public List<sbyte> tool_read_data_485()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tool_read_data_485(null, null);
      return End_tool_read_data_485(asyncResult);

      #else
      send_tool_read_data_485();
      return recv_tool_read_data_485();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tool_read_data_485(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_read_data_485", TMessageType.Call, seqid_));
      tool_read_data_485_args args = new tool_read_data_485_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tool_read_data_485()
    {
      oprot_.WriteMessageBegin(new TMessage("tool_read_data_485", TMessageType.Call, seqid_));
      tool_read_data_485_args args = new tool_read_data_485_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_tool_read_data_485()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tool_read_data_485_result result = new tool_read_data_485_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool_read_data_485 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tool_read_raw_data_485(AsyncCallback callback, object state, int len)
    {
      return send_tool_read_raw_data_485(callback, state, len);
    }

    public List<sbyte> End_tool_read_raw_data_485(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tool_read_raw_data_485();
    }

    #endif

    public List<sbyte> tool_read_raw_data_485(int len)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tool_read_raw_data_485(null, null, len);
      return End_tool_read_raw_data_485(asyncResult);

      #else
      send_tool_read_raw_data_485(len);
      return recv_tool_read_raw_data_485();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tool_read_raw_data_485(AsyncCallback callback, object state, int len)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_read_raw_data_485", TMessageType.Call, seqid_));
      tool_read_raw_data_485_args args = new tool_read_raw_data_485_args();
      args.Len = len;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tool_read_raw_data_485(int len)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_read_raw_data_485", TMessageType.Call, seqid_));
      tool_read_raw_data_485_args args = new tool_read_raw_data_485_args();
      args.Len = len;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_tool_read_raw_data_485()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tool_read_raw_data_485_result result = new tool_read_raw_data_485_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool_read_raw_data_485 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tool_read_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> head, int len)
    {
      return send_tool_read_raw_data_485_h(callback, state, head, len);
    }

    public List<sbyte> End_tool_read_raw_data_485_h(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tool_read_raw_data_485_h();
    }

    #endif

    public List<sbyte> tool_read_raw_data_485_h(List<sbyte> head, int len)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tool_read_raw_data_485_h(null, null, head, len);
      return End_tool_read_raw_data_485_h(asyncResult);

      #else
      send_tool_read_raw_data_485_h(head, len);
      return recv_tool_read_raw_data_485_h();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tool_read_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> head, int len)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_read_raw_data_485_h", TMessageType.Call, seqid_));
      tool_read_raw_data_485_h_args args = new tool_read_raw_data_485_h_args();
      args.Head = head;
      args.Len = len;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tool_read_raw_data_485_h(List<sbyte> head, int len)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_read_raw_data_485_h", TMessageType.Call, seqid_));
      tool_read_raw_data_485_h_args args = new tool_read_raw_data_485_h_args();
      args.Head = head;
      args.Len = len;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_tool_read_raw_data_485_h()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tool_read_raw_data_485_h_result result = new tool_read_raw_data_485_h_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool_read_raw_data_485_h failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tool_read_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> head, List<sbyte> tail)
    {
      return send_tool_read_raw_data_485_ht(callback, state, head, tail);
    }

    public List<sbyte> End_tool_read_raw_data_485_ht(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tool_read_raw_data_485_ht();
    }

    #endif

    public List<sbyte> tool_read_raw_data_485_ht(List<sbyte> head, List<sbyte> tail)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tool_read_raw_data_485_ht(null, null, head, tail);
      return End_tool_read_raw_data_485_ht(asyncResult);

      #else
      send_tool_read_raw_data_485_ht(head, tail);
      return recv_tool_read_raw_data_485_ht();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tool_read_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> head, List<sbyte> tail)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_read_raw_data_485_ht", TMessageType.Call, seqid_));
      tool_read_raw_data_485_ht_args args = new tool_read_raw_data_485_ht_args();
      args.Head = head;
      args.Tail = tail;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tool_read_raw_data_485_ht(List<sbyte> head, List<sbyte> tail)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_read_raw_data_485_ht", TMessageType.Call, seqid_));
      tool_read_raw_data_485_ht_args args = new tool_read_raw_data_485_ht_args();
      args.Head = head;
      args.Tail = tail;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_tool_read_raw_data_485_ht()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tool_read_raw_data_485_ht_result result = new tool_read_raw_data_485_ht_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool_read_raw_data_485_ht failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tool_write_data_485(AsyncCallback callback, object state, List<sbyte> data)
    {
      return send_tool_write_data_485(callback, state, data);
    }

    public bool End_tool_write_data_485(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tool_write_data_485();
    }

    #endif

    public bool tool_write_data_485(List<sbyte> data)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tool_write_data_485(null, null, data);
      return End_tool_write_data_485(asyncResult);

      #else
      send_tool_write_data_485(data);
      return recv_tool_write_data_485();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tool_write_data_485(AsyncCallback callback, object state, List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_write_data_485", TMessageType.Call, seqid_));
      tool_write_data_485_args args = new tool_write_data_485_args();
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tool_write_data_485(List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_write_data_485", TMessageType.Call, seqid_));
      tool_write_data_485_args args = new tool_write_data_485_args();
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_tool_write_data_485()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tool_write_data_485_result result = new tool_write_data_485_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool_write_data_485 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tool_write_raw_data_485(AsyncCallback callback, object state, List<sbyte> data)
    {
      return send_tool_write_raw_data_485(callback, state, data);
    }

    public bool End_tool_write_raw_data_485(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tool_write_raw_data_485();
    }

    #endif

    public bool tool_write_raw_data_485(List<sbyte> data)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tool_write_raw_data_485(null, null, data);
      return End_tool_write_raw_data_485(asyncResult);

      #else
      send_tool_write_raw_data_485(data);
      return recv_tool_write_raw_data_485();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tool_write_raw_data_485(AsyncCallback callback, object state, List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_write_raw_data_485", TMessageType.Call, seqid_));
      tool_write_raw_data_485_args args = new tool_write_raw_data_485_args();
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tool_write_raw_data_485(List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_write_raw_data_485", TMessageType.Call, seqid_));
      tool_write_raw_data_485_args args = new tool_write_raw_data_485_args();
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_tool_write_raw_data_485()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tool_write_raw_data_485_result result = new tool_write_raw_data_485_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool_write_raw_data_485 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tool_write_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head)
    {
      return send_tool_write_raw_data_485_h(callback, state, data, head);
    }

    public bool End_tool_write_raw_data_485_h(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tool_write_raw_data_485_h();
    }

    #endif

    public bool tool_write_raw_data_485_h(List<sbyte> data, List<sbyte> head)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tool_write_raw_data_485_h(null, null, data, head);
      return End_tool_write_raw_data_485_h(asyncResult);

      #else
      send_tool_write_raw_data_485_h(data, head);
      return recv_tool_write_raw_data_485_h();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tool_write_raw_data_485_h(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_write_raw_data_485_h", TMessageType.Call, seqid_));
      tool_write_raw_data_485_h_args args = new tool_write_raw_data_485_h_args();
      args.Data = data;
      args.Head = head;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tool_write_raw_data_485_h(List<sbyte> data, List<sbyte> head)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_write_raw_data_485_h", TMessageType.Call, seqid_));
      tool_write_raw_data_485_h_args args = new tool_write_raw_data_485_h_args();
      args.Data = data;
      args.Head = head;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_tool_write_raw_data_485_h()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tool_write_raw_data_485_h_result result = new tool_write_raw_data_485_h_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool_write_raw_data_485_h failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tool_write_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head, List<sbyte> tail)
    {
      return send_tool_write_raw_data_485_ht(callback, state, data, head, tail);
    }

    public bool End_tool_write_raw_data_485_ht(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tool_write_raw_data_485_ht();
    }

    #endif

    public bool tool_write_raw_data_485_ht(List<sbyte> data, List<sbyte> head, List<sbyte> tail)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tool_write_raw_data_485_ht(null, null, data, head, tail);
      return End_tool_write_raw_data_485_ht(asyncResult);

      #else
      send_tool_write_raw_data_485_ht(data, head, tail);
      return recv_tool_write_raw_data_485_ht();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tool_write_raw_data_485_ht(AsyncCallback callback, object state, List<sbyte> data, List<sbyte> head, List<sbyte> tail)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_write_raw_data_485_ht", TMessageType.Call, seqid_));
      tool_write_raw_data_485_ht_args args = new tool_write_raw_data_485_ht_args();
      args.Data = data;
      args.Head = head;
      args.Tail = tail;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tool_write_raw_data_485_ht(List<sbyte> data, List<sbyte> head, List<sbyte> tail)
    {
      oprot_.WriteMessageBegin(new TMessage("tool_write_raw_data_485_ht", TMessageType.Call, seqid_));
      tool_write_raw_data_485_ht_args args = new tool_write_raw_data_485_ht_args();
      args.Data = data;
      args.Head = head;
      args.Tail = tail;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_tool_write_raw_data_485_ht()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tool_write_raw_data_485_ht_result result = new tool_write_raw_data_485_ht_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tool_write_raw_data_485_ht failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_read_data_can(AsyncCallback callback, object state)
    {
      return send_read_data_can(callback, state);
    }

    public List<sbyte> End_read_data_can(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_read_data_can();
    }

    #endif

    public List<sbyte> read_data_can()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_read_data_can(null, null);
      return End_read_data_can(asyncResult);

      #else
      send_read_data_can();
      return recv_read_data_can();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_read_data_can(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("read_data_can", TMessageType.Call, seqid_));
      read_data_can_args args = new read_data_can_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_read_data_can()
    {
      oprot_.WriteMessageBegin(new TMessage("read_data_can", TMessageType.Call, seqid_));
      read_data_can_args args = new read_data_can_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_read_data_can()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      read_data_can_result result = new read_data_can_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read_data_can failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_read_raw_data_can(AsyncCallback callback, object state)
    {
      return send_read_raw_data_can(callback, state);
    }

    public List<sbyte> End_read_raw_data_can(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_read_raw_data_can();
    }

    #endif

    public List<sbyte> read_raw_data_can()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_read_raw_data_can(null, null);
      return End_read_raw_data_can(asyncResult);

      #else
      send_read_raw_data_can();
      return recv_read_raw_data_can();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_read_raw_data_can(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("read_raw_data_can", TMessageType.Call, seqid_));
      read_raw_data_can_args args = new read_raw_data_can_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_read_raw_data_can()
    {
      oprot_.WriteMessageBegin(new TMessage("read_raw_data_can", TMessageType.Call, seqid_));
      read_raw_data_can_args args = new read_raw_data_can_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_read_raw_data_can()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      read_raw_data_can_result result = new read_raw_data_can_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read_raw_data_can failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_write_data_can(AsyncCallback callback, object state, int id, List<sbyte> data)
    {
      return send_write_data_can(callback, state, id, data);
    }

    public bool End_write_data_can(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_write_data_can();
    }

    #endif

    public bool write_data_can(int id, List<sbyte> data)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_write_data_can(null, null, id, data);
      return End_write_data_can(asyncResult);

      #else
      send_write_data_can(id, data);
      return recv_write_data_can();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_write_data_can(AsyncCallback callback, object state, int id, List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("write_data_can", TMessageType.Call, seqid_));
      write_data_can_args args = new write_data_can_args();
      args.Id = id;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_write_data_can(int id, List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("write_data_can", TMessageType.Call, seqid_));
      write_data_can_args args = new write_data_can_args();
      args.Id = id;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_write_data_can()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      write_data_can_result result = new write_data_can_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "write_data_can failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_write_raw_data_can(AsyncCallback callback, object state, int id, List<sbyte> data)
    {
      return send_write_raw_data_can(callback, state, id, data);
    }

    public bool End_write_raw_data_can(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_write_raw_data_can();
    }

    #endif

    public bool write_raw_data_can(int id, List<sbyte> data)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_write_raw_data_can(null, null, id, data);
      return End_write_raw_data_can(asyncResult);

      #else
      send_write_raw_data_can(id, data);
      return recv_write_raw_data_can();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_write_raw_data_can(AsyncCallback callback, object state, int id, List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("write_raw_data_can", TMessageType.Call, seqid_));
      write_raw_data_can_args args = new write_raw_data_can_args();
      args.Id = id;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_write_raw_data_can(int id, List<sbyte> data)
    {
      oprot_.WriteMessageBegin(new TMessage("write_raw_data_can", TMessageType.Call, seqid_));
      write_raw_data_can_args args = new write_raw_data_can_args();
      args.Id = id;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_write_raw_data_can()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      write_raw_data_can_result result = new write_raw_data_can_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "write_raw_data_can failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_function_digital_in(AsyncCallback callback, object state, short num)
    {
      return send_get_function_digital_in(callback, state, num);
    }

    public bool End_get_function_digital_in(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_function_digital_in();
    }

    #endif

    public bool get_function_digital_in(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_function_digital_in(null, null, num);
      return End_get_function_digital_in(asyncResult);

      #else
      send_get_function_digital_in(num);
      return recv_get_function_digital_in();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_function_digital_in(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_function_digital_in", TMessageType.Call, seqid_));
      get_function_digital_in_args args = new get_function_digital_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_function_digital_in(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_function_digital_in", TMessageType.Call, seqid_));
      get_function_digital_in_args args = new get_function_digital_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_get_function_digital_in()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_function_digital_in_result result = new get_function_digital_in_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_function_digital_in failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_function_digital_out(AsyncCallback callback, object state, short num)
    {
      return send_get_function_digital_out(callback, state, num);
    }

    public bool End_get_function_digital_out(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_function_digital_out();
    }

    #endif

    public bool get_function_digital_out(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_function_digital_out(null, null, num);
      return End_get_function_digital_out(asyncResult);

      #else
      send_get_function_digital_out(num);
      return recv_get_function_digital_out();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_function_digital_out(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_function_digital_out", TMessageType.Call, seqid_));
      get_function_digital_out_args args = new get_function_digital_out_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_function_digital_out(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_function_digital_out", TMessageType.Call, seqid_));
      get_function_digital_out_args args = new get_function_digital_out_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_get_function_digital_out()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_function_digital_out_result result = new get_function_digital_out_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_function_digital_out failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_read_bool_reg(AsyncCallback callback, object state, short num)
    {
      return send_read_bool_reg(callback, state, num);
    }

    public bool End_read_bool_reg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_read_bool_reg();
    }

    #endif

    public bool read_bool_reg(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_read_bool_reg(null, null, num);
      return End_read_bool_reg(asyncResult);

      #else
      send_read_bool_reg(num);
      return recv_read_bool_reg();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_read_bool_reg(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("read_bool_reg", TMessageType.Call, seqid_));
      read_bool_reg_args args = new read_bool_reg_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_read_bool_reg(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("read_bool_reg", TMessageType.Call, seqid_));
      read_bool_reg_args args = new read_bool_reg_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_read_bool_reg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      read_bool_reg_result result = new read_bool_reg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read_bool_reg failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_read_word_reg(AsyncCallback callback, object state, short num)
    {
      return send_read_word_reg(callback, state, num);
    }

    public int End_read_word_reg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_read_word_reg();
    }

    #endif

    public int read_word_reg(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_read_word_reg(null, null, num);
      return End_read_word_reg(asyncResult);

      #else
      send_read_word_reg(num);
      return recv_read_word_reg();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_read_word_reg(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("read_word_reg", TMessageType.Call, seqid_));
      read_word_reg_args args = new read_word_reg_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_read_word_reg(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("read_word_reg", TMessageType.Call, seqid_));
      read_word_reg_args args = new read_word_reg_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_read_word_reg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      read_word_reg_result result = new read_word_reg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read_word_reg failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_read_float_reg(AsyncCallback callback, object state, short num)
    {
      return send_read_float_reg(callback, state, num);
    }

    public double End_read_float_reg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_read_float_reg();
    }

    #endif

    public double read_float_reg(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_read_float_reg(null, null, num);
      return End_read_float_reg(asyncResult);

      #else
      send_read_float_reg(num);
      return recv_read_float_reg();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_read_float_reg(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("read_float_reg", TMessageType.Call, seqid_));
      read_float_reg_args args = new read_float_reg_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_read_float_reg(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("read_float_reg", TMessageType.Call, seqid_));
      read_float_reg_args args = new read_float_reg_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public double recv_read_float_reg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      read_float_reg_result result = new read_float_reg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "read_float_reg failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_write_bool_reg(AsyncCallback callback, object state, short num, bool @value)
    {
      return send_write_bool_reg(callback, state, num, @value);
    }

    public int End_write_bool_reg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_write_bool_reg();
    }

    #endif

    public int write_bool_reg(short num, bool @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_write_bool_reg(null, null, num, @value);
      return End_write_bool_reg(asyncResult);

      #else
      send_write_bool_reg(num, @value);
      return recv_write_bool_reg();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_write_bool_reg(AsyncCallback callback, object state, short num, bool @value)
    {
      oprot_.WriteMessageBegin(new TMessage("write_bool_reg", TMessageType.Call, seqid_));
      write_bool_reg_args args = new write_bool_reg_args();
      args.Num = num;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_write_bool_reg(short num, bool @value)
    {
      oprot_.WriteMessageBegin(new TMessage("write_bool_reg", TMessageType.Call, seqid_));
      write_bool_reg_args args = new write_bool_reg_args();
      args.Num = num;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_write_bool_reg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      write_bool_reg_result result = new write_bool_reg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "write_bool_reg failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_write_word_reg(AsyncCallback callback, object state, short num, int @value)
    {
      return send_write_word_reg(callback, state, num, @value);
    }

    public int End_write_word_reg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_write_word_reg();
    }

    #endif

    public int write_word_reg(short num, int @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_write_word_reg(null, null, num, @value);
      return End_write_word_reg(asyncResult);

      #else
      send_write_word_reg(num, @value);
      return recv_write_word_reg();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_write_word_reg(AsyncCallback callback, object state, short num, int @value)
    {
      oprot_.WriteMessageBegin(new TMessage("write_word_reg", TMessageType.Call, seqid_));
      write_word_reg_args args = new write_word_reg_args();
      args.Num = num;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_write_word_reg(short num, int @value)
    {
      oprot_.WriteMessageBegin(new TMessage("write_word_reg", TMessageType.Call, seqid_));
      write_word_reg_args args = new write_word_reg_args();
      args.Num = num;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_write_word_reg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      write_word_reg_result result = new write_word_reg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "write_word_reg failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_write_float_reg(AsyncCallback callback, object state, short num, double @value)
    {
      return send_write_float_reg(callback, state, num, @value);
    }

    public int End_write_float_reg(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_write_float_reg();
    }

    #endif

    public int write_float_reg(short num, double @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_write_float_reg(null, null, num, @value);
      return End_write_float_reg(asyncResult);

      #else
      send_write_float_reg(num, @value);
      return recv_write_float_reg();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_write_float_reg(AsyncCallback callback, object state, short num, double @value)
    {
      oprot_.WriteMessageBegin(new TMessage("write_float_reg", TMessageType.Call, seqid_));
      write_float_reg_args args = new write_float_reg_args();
      args.Num = num;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_write_float_reg(short num, double @value)
    {
      oprot_.WriteMessageBegin(new TMessage("write_float_reg", TMessageType.Call, seqid_));
      write_float_reg_args args = new write_float_reg_args();
      args.Num = num;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_write_float_reg()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      write_float_reg_result result = new write_float_reg_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "write_float_reg failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_function_reg_in(AsyncCallback callback, object state, short num)
    {
      return send_get_function_reg_in(callback, state, num);
    }

    public bool End_get_function_reg_in(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_function_reg_in();
    }

    #endif

    public bool get_function_reg_in(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_function_reg_in(null, null, num);
      return End_get_function_reg_in(asyncResult);

      #else
      send_get_function_reg_in(num);
      return recv_get_function_reg_in();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_function_reg_in(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_function_reg_in", TMessageType.Call, seqid_));
      get_function_reg_in_args args = new get_function_reg_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_function_reg_in(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_function_reg_in", TMessageType.Call, seqid_));
      get_function_reg_in_args args = new get_function_reg_in_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_get_function_reg_in()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_function_reg_in_result result = new get_function_reg_in_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_function_reg_in failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_function_reg_out(AsyncCallback callback, object state, short num)
    {
      return send_get_function_reg_out(callback, state, num);
    }

    public bool End_get_function_reg_out(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_function_reg_out();
    }

    #endif

    public bool get_function_reg_out(short num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_function_reg_out(null, null, num);
      return End_get_function_reg_out(asyncResult);

      #else
      send_get_function_reg_out(num);
      return recv_get_function_reg_out();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_function_reg_out(AsyncCallback callback, object state, short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_function_reg_out", TMessageType.Call, seqid_));
      get_function_reg_out_args args = new get_function_reg_out_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_function_reg_out(short num)
    {
      oprot_.WriteMessageBegin(new TMessage("get_function_reg_out", TMessageType.Call, seqid_));
      get_function_reg_out_args args = new get_function_reg_out_args();
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_get_function_reg_out()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_function_reg_out_result result = new get_function_reg_out_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_function_reg_out failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_movej(AsyncCallback callback, object state, List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc)
    {
      return send_movej(callback, state, joints_list, v, a, r, block, op, def_acc);
    }

    public int End_movej(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_movej();
    }

    #endif

    public int movej(List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_movej(null, null, joints_list, v, a, r, block, op, def_acc);
      return End_movej(asyncResult);

      #else
      send_movej(joints_list, v, a, r, block, op, def_acc);
      return recv_movej();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_movej(AsyncCallback callback, object state, List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej", TMessageType.Call, seqid_));
      movej_args args = new movej_args();
      args.Joints_list = joints_list;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_movej(List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej", TMessageType.Call, seqid_));
      movej_args args = new movej_args();
      args.Joints_list = joints_list;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_movej()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      movej_result result = new movej_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "movej failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_movej_pose(AsyncCallback callback, object state, List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      return send_movej_pose(callback, state, p, v, a, r, q_near, tool, wobj, block, op, def_acc);
    }

    public int End_movej_pose(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_movej_pose();
    }

    #endif

    public int movej_pose(List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_movej_pose(null, null, p, v, a, r, q_near, tool, wobj, block, op, def_acc);
      return End_movej_pose(asyncResult);

      #else
      send_movej_pose(p, v, a, r, q_near, tool, wobj, block, op, def_acc);
      return recv_movej_pose();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_movej_pose(AsyncCallback callback, object state, List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej_pose", TMessageType.Call, seqid_));
      movej_pose_args args = new movej_pose_args();
      args.P = p;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_movej_pose(List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej_pose", TMessageType.Call, seqid_));
      movej_pose_args args = new movej_pose_args();
      args.P = p;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_movej_pose()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      movej_pose_result result = new movej_pose_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "movej_pose failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_movej2(AsyncCallback callback, object state, List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc)
    {
      return send_movej2(callback, state, joints_list, v, a, r, block, op, def_acc);
    }

    public int End_movej2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_movej2();
    }

    #endif

    public int movej2(List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_movej2(null, null, joints_list, v, a, r, block, op, def_acc);
      return End_movej2(asyncResult);

      #else
      send_movej2(joints_list, v, a, r, block, op, def_acc);
      return recv_movej2();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_movej2(AsyncCallback callback, object state, List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej2", TMessageType.Call, seqid_));
      movej2_args args = new movej2_args();
      args.Joints_list = joints_list;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_movej2(List<double> joints_list, double v, double a, double r, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej2", TMessageType.Call, seqid_));
      movej2_args args = new movej2_args();
      args.Joints_list = joints_list;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_movej2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      movej2_result result = new movej2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "movej2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_movej_pose2(AsyncCallback callback, object state, List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      return send_movej_pose2(callback, state, p, v, a, r, q_near, tool, wobj, block, op, def_acc);
    }

    public int End_movej_pose2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_movej_pose2();
    }

    #endif

    public int movej_pose2(List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_movej_pose2(null, null, p, v, a, r, q_near, tool, wobj, block, op, def_acc);
      return End_movej_pose2(asyncResult);

      #else
      send_movej_pose2(p, v, a, r, q_near, tool, wobj, block, op, def_acc);
      return recv_movej_pose2();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_movej_pose2(AsyncCallback callback, object state, List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej_pose2", TMessageType.Call, seqid_));
      movej_pose2_args args = new movej_pose2_args();
      args.P = p;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_movej_pose2(List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej_pose2", TMessageType.Call, seqid_));
      movej_pose2_args args = new movej_pose2_args();
      args.P = p;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_movej_pose2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      movej_pose2_result result = new movej_pose2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "movej_pose2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_movel(AsyncCallback callback, object state, List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      return send_movel(callback, state, p, v, a, r, q_near, tool, wobj, block, op, def_acc);
    }

    public int End_movel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_movel();
    }

    #endif

    public int movel(List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_movel(null, null, p, v, a, r, q_near, tool, wobj, block, op, def_acc);
      return End_movel(asyncResult);

      #else
      send_movel(p, v, a, r, q_near, tool, wobj, block, op, def_acc);
      return recv_movel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_movel(AsyncCallback callback, object state, List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movel", TMessageType.Call, seqid_));
      movel_args args = new movel_args();
      args.P = p;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_movel(List<double> p, double v, double a, double r, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movel", TMessageType.Call, seqid_));
      movel_args args = new movel_args();
      args.P = p;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_movel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      movel_result result = new movel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "movel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_movec(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      return send_movec(callback, state, p1, p2, v, a, r, mode, q_near, tool, wobj, block, op, def_acc);
    }

    public int End_movec(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_movec();
    }

    #endif

    public int movec(List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_movec(null, null, p1, p2, v, a, r, mode, q_near, tool, wobj, block, op, def_acc);
      return End_movec(asyncResult);

      #else
      send_movec(p1, p2, v, a, r, mode, q_near, tool, wobj, block, op, def_acc);
      return recv_movec();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_movec(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movec", TMessageType.Call, seqid_));
      movec_args args = new movec_args();
      args.P1 = p1;
      args.P2 = p2;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Mode = mode;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_movec(List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movec", TMessageType.Call, seqid_));
      movec_args args = new movec_args();
      args.P1 = p1;
      args.P2 = p2;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Mode = mode;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_movec()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      movec_result result = new movec_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "movec failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_move_circle(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      return send_move_circle(callback, state, p1, p2, v, a, r, mode, q_near, tool, wobj, block, op, def_acc);
    }

    public int End_move_circle(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_move_circle();
    }

    #endif

    public int move_circle(List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_move_circle(null, null, p1, p2, v, a, r, mode, q_near, tool, wobj, block, op, def_acc);
      return End_move_circle(asyncResult);

      #else
      send_move_circle(p1, p2, v, a, r, mode, q_near, tool, wobj, block, op, def_acc);
      return recv_move_circle();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_move_circle(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("move_circle", TMessageType.Call, seqid_));
      move_circle_args args = new move_circle_args();
      args.P1 = p1;
      args.P2 = p2;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Mode = mode;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_move_circle(List<double> p1, List<double> p2, double v, double a, double r, int mode, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("move_circle", TMessageType.Call, seqid_));
      move_circle_args args = new move_circle_args();
      args.P1 = p1;
      args.P2 = p2;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Mode = mode;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_move_circle()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      move_circle_result result = new move_circle_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "move_circle failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tcp_move(AsyncCallback callback, object state, List<double> pose_offset, double v, double a, double r, string tool, bool block, Op op, bool def_acc)
    {
      return send_tcp_move(callback, state, pose_offset, v, a, r, tool, block, op, def_acc);
    }

    public int End_tcp_move(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tcp_move();
    }

    #endif

    public int tcp_move(List<double> pose_offset, double v, double a, double r, string tool, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tcp_move(null, null, pose_offset, v, a, r, tool, block, op, def_acc);
      return End_tcp_move(asyncResult);

      #else
      send_tcp_move(pose_offset, v, a, r, tool, block, op, def_acc);
      return recv_tcp_move();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tcp_move(AsyncCallback callback, object state, List<double> pose_offset, double v, double a, double r, string tool, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("tcp_move", TMessageType.Call, seqid_));
      tcp_move_args args = new tcp_move_args();
      args.Pose_offset = pose_offset;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Tool = tool;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tcp_move(List<double> pose_offset, double v, double a, double r, string tool, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("tcp_move", TMessageType.Call, seqid_));
      tcp_move_args args = new tcp_move_args();
      args.Pose_offset = pose_offset;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Tool = tool;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_tcp_move()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tcp_move_result result = new tcp_move_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tcp_move failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tcp_move_2p(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double r, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      return send_tcp_move_2p(callback, state, p1, p2, v, a, r, tool, wobj, block, op, def_acc);
    }

    public int End_tcp_move_2p(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tcp_move_2p();
    }

    #endif

    public int tcp_move_2p(List<double> p1, List<double> p2, double v, double a, double r, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tcp_move_2p(null, null, p1, p2, v, a, r, tool, wobj, block, op, def_acc);
      return End_tcp_move_2p(asyncResult);

      #else
      send_tcp_move_2p(p1, p2, v, a, r, tool, wobj, block, op, def_acc);
      return recv_tcp_move_2p();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tcp_move_2p(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double r, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("tcp_move_2p", TMessageType.Call, seqid_));
      tcp_move_2p_args args = new tcp_move_2p_args();
      args.P1 = p1;
      args.P2 = p2;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tcp_move_2p(List<double> p1, List<double> p2, double v, double a, double r, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("tcp_move_2p", TMessageType.Call, seqid_));
      tcp_move_2p_args args = new tcp_move_2p_args();
      args.P1 = p1;
      args.P2 = p2;
      args.V = v;
      args.A = a;
      args.R = r;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_tcp_move_2p()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tcp_move_2p_result result = new tcp_move_2p_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tcp_move_2p failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_spline(AsyncCallback callback, object state, List<List<double>> pose_list, double v, double a, string tool, string wobj, bool block, Op op, double r, bool def_acc)
    {
      return send_spline(callback, state, pose_list, v, a, tool, wobj, block, op, r, def_acc);
    }

    public int End_spline(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_spline();
    }

    #endif

    public int spline(List<List<double>> pose_list, double v, double a, string tool, string wobj, bool block, Op op, double r, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_spline(null, null, pose_list, v, a, tool, wobj, block, op, r, def_acc);
      return End_spline(asyncResult);

      #else
      send_spline(pose_list, v, a, tool, wobj, block, op, r, def_acc);
      return recv_spline();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_spline(AsyncCallback callback, object state, List<List<double>> pose_list, double v, double a, string tool, string wobj, bool block, Op op, double r, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("spline", TMessageType.Call, seqid_));
      spline_args args = new spline_args();
      args.Pose_list = pose_list;
      args.V = v;
      args.A = a;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.R = r;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_spline(List<List<double>> pose_list, double v, double a, string tool, string wobj, bool block, Op op, double r, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("spline", TMessageType.Call, seqid_));
      spline_args args = new spline_args();
      args.Pose_list = pose_list;
      args.V = v;
      args.A = a;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.R = r;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_spline()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      spline_result result = new spline_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "spline failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_speedj(AsyncCallback callback, object state, List<double> joints_list, double a, int time, bool block)
    {
      return send_speedj(callback, state, joints_list, a, time, block);
    }

    public int End_speedj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_speedj();
    }

    #endif

    public int speedj(List<double> joints_list, double a, int time, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_speedj(null, null, joints_list, a, time, block);
      return End_speedj(asyncResult);

      #else
      send_speedj(joints_list, a, time, block);
      return recv_speedj();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_speedj(AsyncCallback callback, object state, List<double> joints_list, double a, int time, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("speedj", TMessageType.Call, seqid_));
      speedj_args args = new speedj_args();
      args.Joints_list = joints_list;
      args.A = a;
      args.Time = time;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_speedj(List<double> joints_list, double a, int time, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("speedj", TMessageType.Call, seqid_));
      speedj_args args = new speedj_args();
      args.Joints_list = joints_list;
      args.A = a;
      args.Time = time;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_speedj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      speedj_result result = new speedj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "speedj failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_speedl(AsyncCallback callback, object state, List<double> pose_list, double a, int time, bool block)
    {
      return send_speedl(callback, state, pose_list, a, time, block);
    }

    public int End_speedl(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_speedl();
    }

    #endif

    public int speedl(List<double> pose_list, double a, int time, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_speedl(null, null, pose_list, a, time, block);
      return End_speedl(asyncResult);

      #else
      send_speedl(pose_list, a, time, block);
      return recv_speedl();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_speedl(AsyncCallback callback, object state, List<double> pose_list, double a, int time, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("speedl", TMessageType.Call, seqid_));
      speedl_args args = new speedl_args();
      args.Pose_list = pose_list;
      args.A = a;
      args.Time = time;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_speedl(List<double> pose_list, double a, int time, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("speedl", TMessageType.Call, seqid_));
      speedl_args args = new speedl_args();
      args.Pose_list = pose_list;
      args.A = a;
      args.Time = time;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_speedl()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      speedl_result result = new speedl_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "speedl failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_speed_stop(AsyncCallback callback, object state, bool block)
    {
      return send_speed_stop(callback, state, block);
    }

    public int End_speed_stop(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_speed_stop();
    }

    #endif

    public int speed_stop(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_speed_stop(null, null, block);
      return End_speed_stop(asyncResult);

      #else
      send_speed_stop(block);
      return recv_speed_stop();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_speed_stop(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("speed_stop", TMessageType.Call, seqid_));
      speed_stop_args args = new speed_stop_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_speed_stop(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("speed_stop", TMessageType.Call, seqid_));
      speed_stop_args args = new speed_stop_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_speed_stop()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      speed_stop_result result = new speed_stop_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "speed_stop failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_servoj(AsyncCallback callback, object state, List<double> joints_list, double v, double a, bool block, double kp, double kd)
    {
      return send_servoj(callback, state, joints_list, v, a, block, kp, kd);
    }

    public int End_servoj(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_servoj();
    }

    #endif

    public int servoj(List<double> joints_list, double v, double a, bool block, double kp, double kd)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_servoj(null, null, joints_list, v, a, block, kp, kd);
      return End_servoj(asyncResult);

      #else
      send_servoj(joints_list, v, a, block, kp, kd);
      return recv_servoj();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_servoj(AsyncCallback callback, object state, List<double> joints_list, double v, double a, bool block, double kp, double kd)
    {
      oprot_.WriteMessageBegin(new TMessage("servoj", TMessageType.Call, seqid_));
      servoj_args args = new servoj_args();
      args.Joints_list = joints_list;
      args.V = v;
      args.A = a;
      args.Block = block;
      args.Kp = kp;
      args.Kd = kd;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_servoj(List<double> joints_list, double v, double a, bool block, double kp, double kd)
    {
      oprot_.WriteMessageBegin(new TMessage("servoj", TMessageType.Call, seqid_));
      servoj_args args = new servoj_args();
      args.Joints_list = joints_list;
      args.V = v;
      args.A = a;
      args.Block = block;
      args.Kp = kp;
      args.Kd = kd;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_servoj()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      servoj_result result = new servoj_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "servoj failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_servoj_pose(AsyncCallback callback, object state, List<double> pose_list, double v, double a, List<double> q_near, string tool, string wobj, bool block, double kp, double kd)
    {
      return send_servoj_pose(callback, state, pose_list, v, a, q_near, tool, wobj, block, kp, kd);
    }

    public int End_servoj_pose(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_servoj_pose();
    }

    #endif

    public int servoj_pose(List<double> pose_list, double v, double a, List<double> q_near, string tool, string wobj, bool block, double kp, double kd)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_servoj_pose(null, null, pose_list, v, a, q_near, tool, wobj, block, kp, kd);
      return End_servoj_pose(asyncResult);

      #else
      send_servoj_pose(pose_list, v, a, q_near, tool, wobj, block, kp, kd);
      return recv_servoj_pose();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_servoj_pose(AsyncCallback callback, object state, List<double> pose_list, double v, double a, List<double> q_near, string tool, string wobj, bool block, double kp, double kd)
    {
      oprot_.WriteMessageBegin(new TMessage("servoj_pose", TMessageType.Call, seqid_));
      servoj_pose_args args = new servoj_pose_args();
      args.Pose_list = pose_list;
      args.V = v;
      args.A = a;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Kp = kp;
      args.Kd = kd;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_servoj_pose(List<double> pose_list, double v, double a, List<double> q_near, string tool, string wobj, bool block, double kp, double kd)
    {
      oprot_.WriteMessageBegin(new TMessage("servoj_pose", TMessageType.Call, seqid_));
      servoj_pose_args args = new servoj_pose_args();
      args.Pose_list = pose_list;
      args.V = v;
      args.A = a;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Kp = kp;
      args.Kd = kd;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_servoj_pose()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      servoj_pose_result result = new servoj_pose_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "servoj_pose failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_servo_tcp(AsyncCallback callback, object state, List<double> pose_offset, double v, double a, string tool, bool block, double kp, double kd)
    {
      return send_servo_tcp(callback, state, pose_offset, v, a, tool, block, kp, kd);
    }

    public int End_servo_tcp(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_servo_tcp();
    }

    #endif

    public int servo_tcp(List<double> pose_offset, double v, double a, string tool, bool block, double kp, double kd)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_servo_tcp(null, null, pose_offset, v, a, tool, block, kp, kd);
      return End_servo_tcp(asyncResult);

      #else
      send_servo_tcp(pose_offset, v, a, tool, block, kp, kd);
      return recv_servo_tcp();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_servo_tcp(AsyncCallback callback, object state, List<double> pose_offset, double v, double a, string tool, bool block, double kp, double kd)
    {
      oprot_.WriteMessageBegin(new TMessage("servo_tcp", TMessageType.Call, seqid_));
      servo_tcp_args args = new servo_tcp_args();
      args.Pose_offset = pose_offset;
      args.V = v;
      args.A = a;
      args.Tool = tool;
      args.Block = block;
      args.Kp = kp;
      args.Kd = kd;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_servo_tcp(List<double> pose_offset, double v, double a, string tool, bool block, double kp, double kd)
    {
      oprot_.WriteMessageBegin(new TMessage("servo_tcp", TMessageType.Call, seqid_));
      servo_tcp_args args = new servo_tcp_args();
      args.Pose_offset = pose_offset;
      args.V = v;
      args.A = a;
      args.Tool = tool;
      args.Block = block;
      args.Kp = kp;
      args.Kd = kd;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_servo_tcp()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      servo_tcp_result result = new servo_tcp_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "servo_tcp failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_teach_mode(AsyncCallback callback, object state, bool block)
    {
      return send_teach_mode(callback, state, block);
    }

    public int End_teach_mode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_teach_mode();
    }

    #endif

    public int teach_mode(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_teach_mode(null, null, block);
      return End_teach_mode(asyncResult);

      #else
      send_teach_mode(block);
      return recv_teach_mode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_teach_mode(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("teach_mode", TMessageType.Call, seqid_));
      teach_mode_args args = new teach_mode_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_teach_mode(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("teach_mode", TMessageType.Call, seqid_));
      teach_mode_args args = new teach_mode_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_teach_mode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      teach_mode_result result = new teach_mode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "teach_mode failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_end_teach_mode(AsyncCallback callback, object state, bool block)
    {
      return send_end_teach_mode(callback, state, block);
    }

    public int End_end_teach_mode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_end_teach_mode();
    }

    #endif

    public int end_teach_mode(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_end_teach_mode(null, null, block);
      return End_end_teach_mode(asyncResult);

      #else
      send_end_teach_mode(block);
      return recv_end_teach_mode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_end_teach_mode(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("end_teach_mode", TMessageType.Call, seqid_));
      end_teach_mode_args args = new end_teach_mode_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_end_teach_mode(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("end_teach_mode", TMessageType.Call, seqid_));
      end_teach_mode_args args = new end_teach_mode_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_end_teach_mode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      end_teach_mode_result result = new end_teach_mode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "end_teach_mode failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_modbus_add_signal(AsyncCallback callback, object state, string ip, int slave_number, int signal_address, int signal_type, string signal_name)
    {
      return send_modbus_add_signal(callback, state, ip, slave_number, signal_address, signal_type, signal_name);
    }

    public int End_modbus_add_signal(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_modbus_add_signal();
    }

    #endif

    public int modbus_add_signal(string ip, int slave_number, int signal_address, int signal_type, string signal_name)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_modbus_add_signal(null, null, ip, slave_number, signal_address, signal_type, signal_name);
      return End_modbus_add_signal(asyncResult);

      #else
      send_modbus_add_signal(ip, slave_number, signal_address, signal_type, signal_name);
      return recv_modbus_add_signal();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_modbus_add_signal(AsyncCallback callback, object state, string ip, int slave_number, int signal_address, int signal_type, string signal_name)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_add_signal", TMessageType.Call, seqid_));
      modbus_add_signal_args args = new modbus_add_signal_args();
      args.Ip = ip;
      args.Slave_number = slave_number;
      args.Signal_address = signal_address;
      args.Signal_type = signal_type;
      args.Signal_name = signal_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_modbus_add_signal(string ip, int slave_number, int signal_address, int signal_type, string signal_name)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_add_signal", TMessageType.Call, seqid_));
      modbus_add_signal_args args = new modbus_add_signal_args();
      args.Ip = ip;
      args.Slave_number = slave_number;
      args.Signal_address = signal_address;
      args.Signal_type = signal_type;
      args.Signal_name = signal_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_modbus_add_signal()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      modbus_add_signal_result result = new modbus_add_signal_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "modbus_add_signal failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_modbus_delete_signal(AsyncCallback callback, object state, string signal_name)
    {
      return send_modbus_delete_signal(callback, state, signal_name);
    }

    public int End_modbus_delete_signal(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_modbus_delete_signal();
    }

    #endif

    public int modbus_delete_signal(string signal_name)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_modbus_delete_signal(null, null, signal_name);
      return End_modbus_delete_signal(asyncResult);

      #else
      send_modbus_delete_signal(signal_name);
      return recv_modbus_delete_signal();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_modbus_delete_signal(AsyncCallback callback, object state, string signal_name)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_delete_signal", TMessageType.Call, seqid_));
      modbus_delete_signal_args args = new modbus_delete_signal_args();
      args.Signal_name = signal_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_modbus_delete_signal(string signal_name)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_delete_signal", TMessageType.Call, seqid_));
      modbus_delete_signal_args args = new modbus_delete_signal_args();
      args.Signal_name = signal_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_modbus_delete_signal()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      modbus_delete_signal_result result = new modbus_delete_signal_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "modbus_delete_signal failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_modbus_read(AsyncCallback callback, object state, string signal_name)
    {
      return send_modbus_read(callback, state, signal_name);
    }

    public int End_modbus_read(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_modbus_read();
    }

    #endif

    public int modbus_read(string signal_name)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_modbus_read(null, null, signal_name);
      return End_modbus_read(asyncResult);

      #else
      send_modbus_read(signal_name);
      return recv_modbus_read();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_modbus_read(AsyncCallback callback, object state, string signal_name)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_read", TMessageType.Call, seqid_));
      modbus_read_args args = new modbus_read_args();
      args.Signal_name = signal_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_modbus_read(string signal_name)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_read", TMessageType.Call, seqid_));
      modbus_read_args args = new modbus_read_args();
      args.Signal_name = signal_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_modbus_read()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      modbus_read_result result = new modbus_read_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "modbus_read failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_modbus_write(AsyncCallback callback, object state, string signal_name, int @value)
    {
      return send_modbus_write(callback, state, signal_name, @value);
    }

    public int End_modbus_write(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_modbus_write();
    }

    #endif

    public int modbus_write(string signal_name, int @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_modbus_write(null, null, signal_name, @value);
      return End_modbus_write(asyncResult);

      #else
      send_modbus_write(signal_name, @value);
      return recv_modbus_write();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_modbus_write(AsyncCallback callback, object state, string signal_name, int @value)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_write", TMessageType.Call, seqid_));
      modbus_write_args args = new modbus_write_args();
      args.Signal_name = signal_name;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_modbus_write(string signal_name, int @value)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_write", TMessageType.Call, seqid_));
      modbus_write_args args = new modbus_write_args();
      args.Signal_name = signal_name;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_modbus_write()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      modbus_write_result result = new modbus_write_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "modbus_write failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_modbus_set_frequency(AsyncCallback callback, object state, string signal_name, int frequence)
    {
      return send_modbus_set_frequency(callback, state, signal_name, frequence);
    }

    public void End_modbus_set_frequency(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_modbus_set_frequency();
    }

    #endif

    public void modbus_set_frequency(string signal_name, int frequence)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_modbus_set_frequency(null, null, signal_name, frequence);
      End_modbus_set_frequency(asyncResult);

      #else
      send_modbus_set_frequency(signal_name, frequence);
      recv_modbus_set_frequency();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_modbus_set_frequency(AsyncCallback callback, object state, string signal_name, int frequence)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_set_frequency", TMessageType.Call, seqid_));
      modbus_set_frequency_args args = new modbus_set_frequency_args();
      args.Signal_name = signal_name;
      args.Frequence = frequence;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_modbus_set_frequency(string signal_name, int frequence)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_set_frequency", TMessageType.Call, seqid_));
      modbus_set_frequency_args args = new modbus_set_frequency_args();
      args.Signal_name = signal_name;
      args.Frequence = frequence;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_modbus_set_frequency()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      modbus_set_frequency_result result = new modbus_set_frequency_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_last_error(AsyncCallback callback, object state)
    {
      return send_get_last_error(callback, state);
    }

    public List<string> End_get_last_error(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_last_error();
    }

    #endif

    public List<string> get_last_error()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_last_error(null, null);
      return End_get_last_error(asyncResult);

      #else
      send_get_last_error();
      return recv_get_last_error();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_last_error(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_last_error", TMessageType.Call, seqid_));
      get_last_error_args args = new get_last_error_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_last_error()
    {
      oprot_.WriteMessageBegin(new TMessage("get_last_error", TMessageType.Call, seqid_));
      get_last_error_args args = new get_last_error_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_get_last_error()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_last_error_result result = new get_last_error_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_last_error failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_noneblock_taskstate(AsyncCallback callback, object state, int id)
    {
      return send_get_noneblock_taskstate(callback, state, id);
    }

    public int End_get_noneblock_taskstate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_noneblock_taskstate();
    }

    #endif

    public int get_noneblock_taskstate(int id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_noneblock_taskstate(null, null, id);
      return End_get_noneblock_taskstate(asyncResult);

      #else
      send_get_noneblock_taskstate(id);
      return recv_get_noneblock_taskstate();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_noneblock_taskstate(AsyncCallback callback, object state, int id)
    {
      oprot_.WriteMessageBegin(new TMessage("get_noneblock_taskstate", TMessageType.Call, seqid_));
      get_noneblock_taskstate_args args = new get_noneblock_taskstate_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_noneblock_taskstate(int id)
    {
      oprot_.WriteMessageBegin(new TMessage("get_noneblock_taskstate", TMessageType.Call, seqid_));
      get_noneblock_taskstate_args args = new get_noneblock_taskstate_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_get_noneblock_taskstate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_noneblock_taskstate_result result = new get_noneblock_taskstate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_noneblock_taskstate failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_log_info(AsyncCallback callback, object state, string message)
    {
      return send_log_info(callback, state, message);
    }

    public void End_log_info(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_log_info();
    }

    #endif

    public void log_info(string message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_log_info(null, null, message);
      End_log_info(asyncResult);

      #else
      send_log_info(message);
      recv_log_info();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_log_info(AsyncCallback callback, object state, string message)
    {
      oprot_.WriteMessageBegin(new TMessage("log_info", TMessageType.Call, seqid_));
      log_info_args args = new log_info_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_log_info(string message)
    {
      oprot_.WriteMessageBegin(new TMessage("log_info", TMessageType.Call, seqid_));
      log_info_args args = new log_info_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_log_info()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      log_info_result result = new log_info_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_log_error(AsyncCallback callback, object state, string message)
    {
      return send_log_error(callback, state, message);
    }

    public void End_log_error(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_log_error();
    }

    #endif

    public void log_error(string message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_log_error(null, null, message);
      End_log_error(asyncResult);

      #else
      send_log_error(message);
      recv_log_error();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_log_error(AsyncCallback callback, object state, string message)
    {
      oprot_.WriteMessageBegin(new TMessage("log_error", TMessageType.Call, seqid_));
      log_error_args args = new log_error_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_log_error(string message)
    {
      oprot_.WriteMessageBegin(new TMessage("log_error", TMessageType.Call, seqid_));
      log_error_args args = new log_error_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_log_error()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      log_error_result result = new log_error_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_simulation(AsyncCallback callback, object state, bool sim, bool block)
    {
      return send_simulation(callback, state, sim, block);
    }

    public int End_simulation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_simulation();
    }

    #endif

    public int simulation(bool sim, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_simulation(null, null, sim, block);
      return End_simulation(asyncResult);

      #else
      send_simulation(sim, block);
      return recv_simulation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_simulation(AsyncCallback callback, object state, bool sim, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("simulation", TMessageType.Call, seqid_));
      simulation_args args = new simulation_args();
      args.Sim = sim;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_simulation(bool sim, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("simulation", TMessageType.Call, seqid_));
      simulation_args args = new simulation_args();
      args.Sim = sim;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_simulation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      simulation_result result = new simulation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "simulation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_speed(AsyncCallback callback, object state, double val)
    {
      return send_speed(callback, state, val);
    }

    public int End_speed(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_speed();
    }

    #endif

    public int speed(double val)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_speed(null, null, val);
      return End_speed(asyncResult);

      #else
      send_speed(val);
      return recv_speed();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_speed(AsyncCallback callback, object state, double val)
    {
      oprot_.WriteMessageBegin(new TMessage("speed", TMessageType.Call, seqid_));
      speed_args args = new speed_args();
      args.Val = val;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_speed(double val)
    {
      oprot_.WriteMessageBegin(new TMessage("speed", TMessageType.Call, seqid_));
      speed_args args = new speed_args();
      args.Val = val;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_speed()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      speed_result result = new speed_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "speed failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_robot_state(AsyncCallback callback, object state)
    {
      return send_get_robot_state(callback, state);
    }

    public List<sbyte> End_get_robot_state(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_robot_state();
    }

    #endif

    public List<sbyte> get_robot_state()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_robot_state(null, null);
      return End_get_robot_state(asyncResult);

      #else
      send_get_robot_state();
      return recv_get_robot_state();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_robot_state(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_robot_state", TMessageType.Call, seqid_));
      get_robot_state_args args = new get_robot_state_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_robot_state()
    {
      oprot_.WriteMessageBegin(new TMessage("get_robot_state", TMessageType.Call, seqid_));
      get_robot_state_args args = new get_robot_state_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<sbyte> recv_get_robot_state()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_robot_state_result result = new get_robot_state_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_robot_state failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_flange_pose(AsyncCallback callback, object state)
    {
      return send_get_flange_pose(callback, state);
    }

    public List<double> End_get_flange_pose(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_flange_pose();
    }

    #endif

    public List<double> get_flange_pose()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_flange_pose(null, null);
      return End_get_flange_pose(asyncResult);

      #else
      send_get_flange_pose();
      return recv_get_flange_pose();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_flange_pose(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_flange_pose", TMessageType.Call, seqid_));
      get_flange_pose_args args = new get_flange_pose_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_flange_pose()
    {
      oprot_.WriteMessageBegin(new TMessage("get_flange_pose", TMessageType.Call, seqid_));
      get_flange_pose_args args = new get_flange_pose_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_flange_pose()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_flange_pose_result result = new get_flange_pose_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_flange_pose failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_flange_speed(AsyncCallback callback, object state)
    {
      return send_get_flange_speed(callback, state);
    }

    public List<double> End_get_flange_speed(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_flange_speed();
    }

    #endif

    public List<double> get_flange_speed()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_flange_speed(null, null);
      return End_get_flange_speed(asyncResult);

      #else
      send_get_flange_speed();
      return recv_get_flange_speed();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_flange_speed(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_flange_speed", TMessageType.Call, seqid_));
      get_flange_speed_args args = new get_flange_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_flange_speed()
    {
      oprot_.WriteMessageBegin(new TMessage("get_flange_speed", TMessageType.Call, seqid_));
      get_flange_speed_args args = new get_flange_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_flange_speed()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_flange_speed_result result = new get_flange_speed_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_flange_speed failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_flange_acceleration(AsyncCallback callback, object state)
    {
      return send_get_flange_acceleration(callback, state);
    }

    public List<double> End_get_flange_acceleration(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_flange_acceleration();
    }

    #endif

    public List<double> get_flange_acceleration()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_flange_acceleration(null, null);
      return End_get_flange_acceleration(asyncResult);

      #else
      send_get_flange_acceleration();
      return recv_get_flange_acceleration();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_flange_acceleration(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_flange_acceleration", TMessageType.Call, seqid_));
      get_flange_acceleration_args args = new get_flange_acceleration_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_flange_acceleration()
    {
      oprot_.WriteMessageBegin(new TMessage("get_flange_acceleration", TMessageType.Call, seqid_));
      get_flange_acceleration_args args = new get_flange_acceleration_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_flange_acceleration()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_flange_acceleration_result result = new get_flange_acceleration_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_flange_acceleration failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tcp_pose(AsyncCallback callback, object state)
    {
      return send_get_tcp_pose(callback, state);
    }

    public List<double> End_get_tcp_pose(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tcp_pose();
    }

    #endif

    public List<double> get_tcp_pose()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tcp_pose(null, null);
      return End_get_tcp_pose(asyncResult);

      #else
      send_get_tcp_pose();
      return recv_get_tcp_pose();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tcp_pose(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_pose", TMessageType.Call, seqid_));
      get_tcp_pose_args args = new get_tcp_pose_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tcp_pose()
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_pose", TMessageType.Call, seqid_));
      get_tcp_pose_args args = new get_tcp_pose_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_tcp_pose()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tcp_pose_result result = new get_tcp_pose_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tcp_pose failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tcp_speed(AsyncCallback callback, object state)
    {
      return send_get_tcp_speed(callback, state);
    }

    public List<double> End_get_tcp_speed(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tcp_speed();
    }

    #endif

    public List<double> get_tcp_speed()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tcp_speed(null, null);
      return End_get_tcp_speed(asyncResult);

      #else
      send_get_tcp_speed();
      return recv_get_tcp_speed();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tcp_speed(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_speed", TMessageType.Call, seqid_));
      get_tcp_speed_args args = new get_tcp_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tcp_speed()
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_speed", TMessageType.Call, seqid_));
      get_tcp_speed_args args = new get_tcp_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_tcp_speed()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tcp_speed_result result = new get_tcp_speed_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tcp_speed failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tcp_acceleration(AsyncCallback callback, object state)
    {
      return send_get_tcp_acceleration(callback, state);
    }

    public List<double> End_get_tcp_acceleration(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tcp_acceleration();
    }

    #endif

    public List<double> get_tcp_acceleration()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tcp_acceleration(null, null);
      return End_get_tcp_acceleration(asyncResult);

      #else
      send_get_tcp_acceleration();
      return recv_get_tcp_acceleration();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tcp_acceleration(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_acceleration", TMessageType.Call, seqid_));
      get_tcp_acceleration_args args = new get_tcp_acceleration_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tcp_acceleration()
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_acceleration", TMessageType.Call, seqid_));
      get_tcp_acceleration_args args = new get_tcp_acceleration_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_tcp_acceleration()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tcp_acceleration_result result = new get_tcp_acceleration_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tcp_acceleration failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tcp_force(AsyncCallback callback, object state)
    {
      return send_get_tcp_force(callback, state);
    }

    public List<double> End_get_tcp_force(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tcp_force();
    }

    #endif

    public List<double> get_tcp_force()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tcp_force(null, null);
      return End_get_tcp_force(asyncResult);

      #else
      send_get_tcp_force();
      return recv_get_tcp_force();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tcp_force(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_force", TMessageType.Call, seqid_));
      get_tcp_force_args args = new get_tcp_force_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tcp_force()
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_force", TMessageType.Call, seqid_));
      get_tcp_force_args args = new get_tcp_force_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_tcp_force()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tcp_force_result result = new get_tcp_force_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tcp_force failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_actual_joints_position(AsyncCallback callback, object state)
    {
      return send_get_actual_joints_position(callback, state);
    }

    public List<double> End_get_actual_joints_position(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_actual_joints_position();
    }

    #endif

    public List<double> get_actual_joints_position()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_actual_joints_position(null, null);
      return End_get_actual_joints_position(asyncResult);

      #else
      send_get_actual_joints_position();
      return recv_get_actual_joints_position();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_actual_joints_position(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_actual_joints_position", TMessageType.Call, seqid_));
      get_actual_joints_position_args args = new get_actual_joints_position_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_actual_joints_position()
    {
      oprot_.WriteMessageBegin(new TMessage("get_actual_joints_position", TMessageType.Call, seqid_));
      get_actual_joints_position_args args = new get_actual_joints_position_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_actual_joints_position()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_actual_joints_position_result result = new get_actual_joints_position_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_actual_joints_position failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_target_joints_position(AsyncCallback callback, object state)
    {
      return send_get_target_joints_position(callback, state);
    }

    public List<double> End_get_target_joints_position(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_target_joints_position();
    }

    #endif

    public List<double> get_target_joints_position()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_target_joints_position(null, null);
      return End_get_target_joints_position(asyncResult);

      #else
      send_get_target_joints_position();
      return recv_get_target_joints_position();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_target_joints_position(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_target_joints_position", TMessageType.Call, seqid_));
      get_target_joints_position_args args = new get_target_joints_position_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_target_joints_position()
    {
      oprot_.WriteMessageBegin(new TMessage("get_target_joints_position", TMessageType.Call, seqid_));
      get_target_joints_position_args args = new get_target_joints_position_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_target_joints_position()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_target_joints_position_result result = new get_target_joints_position_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_target_joints_position failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_actual_joints_speed(AsyncCallback callback, object state)
    {
      return send_get_actual_joints_speed(callback, state);
    }

    public List<double> End_get_actual_joints_speed(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_actual_joints_speed();
    }

    #endif

    public List<double> get_actual_joints_speed()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_actual_joints_speed(null, null);
      return End_get_actual_joints_speed(asyncResult);

      #else
      send_get_actual_joints_speed();
      return recv_get_actual_joints_speed();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_actual_joints_speed(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_actual_joints_speed", TMessageType.Call, seqid_));
      get_actual_joints_speed_args args = new get_actual_joints_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_actual_joints_speed()
    {
      oprot_.WriteMessageBegin(new TMessage("get_actual_joints_speed", TMessageType.Call, seqid_));
      get_actual_joints_speed_args args = new get_actual_joints_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_actual_joints_speed()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_actual_joints_speed_result result = new get_actual_joints_speed_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_actual_joints_speed failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_target_joints_speed(AsyncCallback callback, object state)
    {
      return send_get_target_joints_speed(callback, state);
    }

    public List<double> End_get_target_joints_speed(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_target_joints_speed();
    }

    #endif

    public List<double> get_target_joints_speed()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_target_joints_speed(null, null);
      return End_get_target_joints_speed(asyncResult);

      #else
      send_get_target_joints_speed();
      return recv_get_target_joints_speed();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_target_joints_speed(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_target_joints_speed", TMessageType.Call, seqid_));
      get_target_joints_speed_args args = new get_target_joints_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_target_joints_speed()
    {
      oprot_.WriteMessageBegin(new TMessage("get_target_joints_speed", TMessageType.Call, seqid_));
      get_target_joints_speed_args args = new get_target_joints_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_target_joints_speed()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_target_joints_speed_result result = new get_target_joints_speed_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_target_joints_speed failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_actual_joints_acceleration(AsyncCallback callback, object state)
    {
      return send_get_actual_joints_acceleration(callback, state);
    }

    public List<double> End_get_actual_joints_acceleration(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_actual_joints_acceleration();
    }

    #endif

    public List<double> get_actual_joints_acceleration()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_actual_joints_acceleration(null, null);
      return End_get_actual_joints_acceleration(asyncResult);

      #else
      send_get_actual_joints_acceleration();
      return recv_get_actual_joints_acceleration();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_actual_joints_acceleration(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_actual_joints_acceleration", TMessageType.Call, seqid_));
      get_actual_joints_acceleration_args args = new get_actual_joints_acceleration_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_actual_joints_acceleration()
    {
      oprot_.WriteMessageBegin(new TMessage("get_actual_joints_acceleration", TMessageType.Call, seqid_));
      get_actual_joints_acceleration_args args = new get_actual_joints_acceleration_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_actual_joints_acceleration()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_actual_joints_acceleration_result result = new get_actual_joints_acceleration_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_actual_joints_acceleration failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_target_joints_acceleration(AsyncCallback callback, object state)
    {
      return send_get_target_joints_acceleration(callback, state);
    }

    public List<double> End_get_target_joints_acceleration(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_target_joints_acceleration();
    }

    #endif

    public List<double> get_target_joints_acceleration()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_target_joints_acceleration(null, null);
      return End_get_target_joints_acceleration(asyncResult);

      #else
      send_get_target_joints_acceleration();
      return recv_get_target_joints_acceleration();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_target_joints_acceleration(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_target_joints_acceleration", TMessageType.Call, seqid_));
      get_target_joints_acceleration_args args = new get_target_joints_acceleration_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_target_joints_acceleration()
    {
      oprot_.WriteMessageBegin(new TMessage("get_target_joints_acceleration", TMessageType.Call, seqid_));
      get_target_joints_acceleration_args args = new get_target_joints_acceleration_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_target_joints_acceleration()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_target_joints_acceleration_result result = new get_target_joints_acceleration_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_target_joints_acceleration failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_actual_joints_torque(AsyncCallback callback, object state)
    {
      return send_get_actual_joints_torque(callback, state);
    }

    public List<double> End_get_actual_joints_torque(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_actual_joints_torque();
    }

    #endif

    public List<double> get_actual_joints_torque()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_actual_joints_torque(null, null);
      return End_get_actual_joints_torque(asyncResult);

      #else
      send_get_actual_joints_torque();
      return recv_get_actual_joints_torque();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_actual_joints_torque(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_actual_joints_torque", TMessageType.Call, seqid_));
      get_actual_joints_torque_args args = new get_actual_joints_torque_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_actual_joints_torque()
    {
      oprot_.WriteMessageBegin(new TMessage("get_actual_joints_torque", TMessageType.Call, seqid_));
      get_actual_joints_torque_args args = new get_actual_joints_torque_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_actual_joints_torque()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_actual_joints_torque_result result = new get_actual_joints_torque_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_actual_joints_torque failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_target_joints_torque(AsyncCallback callback, object state)
    {
      return send_get_target_joints_torque(callback, state);
    }

    public List<double> End_get_target_joints_torque(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_target_joints_torque();
    }

    #endif

    public List<double> get_target_joints_torque()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_target_joints_torque(null, null);
      return End_get_target_joints_torque(asyncResult);

      #else
      send_get_target_joints_torque();
      return recv_get_target_joints_torque();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_target_joints_torque(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_target_joints_torque", TMessageType.Call, seqid_));
      get_target_joints_torque_args args = new get_target_joints_torque_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_target_joints_torque()
    {
      oprot_.WriteMessageBegin(new TMessage("get_target_joints_torque", TMessageType.Call, seqid_));
      get_target_joints_torque_args args = new get_target_joints_torque_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_target_joints_torque()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_target_joints_torque_result result = new get_target_joints_torque_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_target_joints_torque failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_stop_record_track(AsyncCallback callback, object state)
    {
      return send_stop_record_track(callback, state);
    }

    public int End_stop_record_track(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_stop_record_track();
    }

    #endif

    public int stop_record_track()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_stop_record_track(null, null);
      return End_stop_record_track(asyncResult);

      #else
      send_stop_record_track();
      return recv_stop_record_track();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_stop_record_track(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("stop_record_track", TMessageType.Call, seqid_));
      stop_record_track_args args = new stop_record_track_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_stop_record_track()
    {
      oprot_.WriteMessageBegin(new TMessage("stop_record_track", TMessageType.Call, seqid_));
      stop_record_track_args args = new stop_record_track_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_stop_record_track()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      stop_record_track_result result = new stop_record_track_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "stop_record_track failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_start_record_track(AsyncCallback callback, object state, string name, int mode, string tool, string wobj, double interval)
    {
      return send_start_record_track(callback, state, name, mode, tool, wobj, interval);
    }

    public int End_start_record_track(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_start_record_track();
    }

    #endif

    public int start_record_track(string name, int mode, string tool, string wobj, double interval)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_start_record_track(null, null, name, mode, tool, wobj, interval);
      return End_start_record_track(asyncResult);

      #else
      send_start_record_track(name, mode, tool, wobj, interval);
      return recv_start_record_track();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_start_record_track(AsyncCallback callback, object state, string name, int mode, string tool, string wobj, double interval)
    {
      oprot_.WriteMessageBegin(new TMessage("start_record_track", TMessageType.Call, seqid_));
      start_record_track_args args = new start_record_track_args();
      args.Name = name;
      args.Mode = mode;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Interval = interval;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_start_record_track(string name, int mode, string tool, string wobj, double interval)
    {
      oprot_.WriteMessageBegin(new TMessage("start_record_track", TMessageType.Call, seqid_));
      start_record_track_args args = new start_record_track_args();
      args.Name = name;
      args.Mode = mode;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Interval = interval;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_start_record_track()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      start_record_track_result result = new start_record_track_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "start_record_track failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_collision_detect(AsyncCallback callback, object state, int @value)
    {
      return send_collision_detect(callback, state, @value);
    }

    public int End_collision_detect(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_collision_detect();
    }

    #endif

    public int collision_detect(int @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_collision_detect(null, null, @value);
      return End_collision_detect(asyncResult);

      #else
      send_collision_detect(@value);
      return recv_collision_detect();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_collision_detect(AsyncCallback callback, object state, int @value)
    {
      oprot_.WriteMessageBegin(new TMessage("collision_detect", TMessageType.Call, seqid_));
      collision_detect_args args = new collision_detect_args();
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_collision_detect(int @value)
    {
      oprot_.WriteMessageBegin(new TMessage("collision_detect", TMessageType.Call, seqid_));
      collision_detect_args args = new collision_detect_args();
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_collision_detect()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      collision_detect_result result = new collision_detect_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "collision_detect failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_replay(AsyncCallback callback, object state, string name, int @value, int mode)
    {
      return send_replay(callback, state, name, @value, mode);
    }

    public int End_replay(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_replay();
    }

    #endif

    public int replay(string name, int @value, int mode)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_replay(null, null, name, @value, mode);
      return End_replay(asyncResult);

      #else
      send_replay(name, @value, mode);
      return recv_replay();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_replay(AsyncCallback callback, object state, string name, int @value, int mode)
    {
      oprot_.WriteMessageBegin(new TMessage("replay", TMessageType.Call, seqid_));
      replay_args args = new replay_args();
      args.Name = name;
      args.Value = @value;
      args.Mode = mode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_replay(string name, int @value, int mode)
    {
      oprot_.WriteMessageBegin(new TMessage("replay", TMessageType.Call, seqid_));
      replay_args args = new replay_args();
      args.Name = name;
      args.Value = @value;
      args.Mode = mode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_replay()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      replay_result result = new replay_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "replay failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_load_data(AsyncCallback callback, object state, List<double> @value)
    {
      return send_set_load_data(callback, state, @value);
    }

    public int End_set_load_data(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_load_data();
    }

    #endif

    public int set_load_data(List<double> @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_load_data(null, null, @value);
      return End_set_load_data(asyncResult);

      #else
      send_set_load_data(@value);
      return recv_set_load_data();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_load_data(AsyncCallback callback, object state, List<double> @value)
    {
      oprot_.WriteMessageBegin(new TMessage("set_load_data", TMessageType.Call, seqid_));
      set_load_data_args args = new set_load_data_args();
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_load_data(List<double> @value)
    {
      oprot_.WriteMessageBegin(new TMessage("set_load_data", TMessageType.Call, seqid_));
      set_load_data_args args = new set_load_data_args();
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_load_data()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_load_data_result result = new set_load_data_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_load_data failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_start(AsyncCallback callback, object state)
    {
      return send_fc_start(callback, state);
    }

    public int End_fc_start(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_start();
    }

    #endif

    public int fc_start()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_start(null, null);
      return End_fc_start(asyncResult);

      #else
      send_fc_start();
      return recv_fc_start();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_start(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_start", TMessageType.Call, seqid_));
      fc_start_args args = new fc_start_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_start()
    {
      oprot_.WriteMessageBegin(new TMessage("fc_start", TMessageType.Call, seqid_));
      fc_start_args args = new fc_start_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_start()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_start_result result = new fc_start_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_start failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_stop(AsyncCallback callback, object state)
    {
      return send_fc_stop(callback, state);
    }

    public int End_fc_stop(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_stop();
    }

    #endif

    public int fc_stop()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_stop(null, null);
      return End_fc_stop(asyncResult);

      #else
      send_fc_stop();
      return recv_fc_stop();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_stop(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_stop", TMessageType.Call, seqid_));
      fc_stop_args args = new fc_stop_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_stop()
    {
      oprot_.WriteMessageBegin(new TMessage("fc_stop", TMessageType.Call, seqid_));
      fc_stop_args args = new fc_stop_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_stop()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_stop_result result = new fc_stop_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_stop failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_config(AsyncCallback callback, object state, List<bool> direction, List<double> ref_ft, List<double> damp, List<double> max_vel, List<double> number_list, string tool, string wobj, int @value)
    {
      return send_fc_config(callback, state, direction, ref_ft, damp, max_vel, number_list, tool, wobj, @value);
    }

    public int End_fc_config(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_config();
    }

    #endif

    public int fc_config(List<bool> direction, List<double> ref_ft, List<double> damp, List<double> max_vel, List<double> number_list, string tool, string wobj, int @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_config(null, null, direction, ref_ft, damp, max_vel, number_list, tool, wobj, @value);
      return End_fc_config(asyncResult);

      #else
      send_fc_config(direction, ref_ft, damp, max_vel, number_list, tool, wobj, @value);
      return recv_fc_config();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_config(AsyncCallback callback, object state, List<bool> direction, List<double> ref_ft, List<double> damp, List<double> max_vel, List<double> number_list, string tool, string wobj, int @value)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_config", TMessageType.Call, seqid_));
      fc_config_args args = new fc_config_args();
      args.Direction = direction;
      args.Ref_ft = ref_ft;
      args.Damp = damp;
      args.Max_vel = max_vel;
      args.Number_list = number_list;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_config(List<bool> direction, List<double> ref_ft, List<double> damp, List<double> max_vel, List<double> number_list, string tool, string wobj, int @value)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_config", TMessageType.Call, seqid_));
      fc_config_args args = new fc_config_args();
      args.Direction = direction;
      args.Ref_ft = ref_ft;
      args.Damp = damp;
      args.Max_vel = max_vel;
      args.Number_list = number_list;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_config()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_config_result result = new fc_config_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_config failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_move(AsyncCallback callback, object state)
    {
      return send_fc_move(callback, state);
    }

    public int End_fc_move(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_move();
    }

    #endif

    public int fc_move()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_move(null, null);
      return End_fc_move(asyncResult);

      #else
      send_fc_move();
      return recv_fc_move();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_move(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_move", TMessageType.Call, seqid_));
      fc_move_args args = new fc_move_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_move()
    {
      oprot_.WriteMessageBegin(new TMessage("fc_move", TMessageType.Call, seqid_));
      fc_move_args args = new fc_move_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_move()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_move_result result = new fc_move_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_move failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_guard_act(AsyncCallback callback, object state, List<bool> direction, List<double> ref_ft, string tool, string wobj, int type, int force_property)
    {
      return send_fc_guard_act(callback, state, direction, ref_ft, tool, wobj, type, force_property);
    }

    public int End_fc_guard_act(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_guard_act();
    }

    #endif

    public int fc_guard_act(List<bool> direction, List<double> ref_ft, string tool, string wobj, int type, int force_property)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_guard_act(null, null, direction, ref_ft, tool, wobj, type, force_property);
      return End_fc_guard_act(asyncResult);

      #else
      send_fc_guard_act(direction, ref_ft, tool, wobj, type, force_property);
      return recv_fc_guard_act();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_guard_act(AsyncCallback callback, object state, List<bool> direction, List<double> ref_ft, string tool, string wobj, int type, int force_property)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_guard_act", TMessageType.Call, seqid_));
      fc_guard_act_args args = new fc_guard_act_args();
      args.Direction = direction;
      args.Ref_ft = ref_ft;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Type = type;
      args.Force_property = force_property;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_guard_act(List<bool> direction, List<double> ref_ft, string tool, string wobj, int type, int force_property)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_guard_act", TMessageType.Call, seqid_));
      fc_guard_act_args args = new fc_guard_act_args();
      args.Direction = direction;
      args.Ref_ft = ref_ft;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Type = type;
      args.Force_property = force_property;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_guard_act()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_guard_act_result result = new fc_guard_act_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_guard_act failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_guard_deact(AsyncCallback callback, object state)
    {
      return send_fc_guard_deact(callback, state);
    }

    public int End_fc_guard_deact(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_guard_deact();
    }

    #endif

    public int fc_guard_deact()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_guard_deact(null, null);
      return End_fc_guard_deact(asyncResult);

      #else
      send_fc_guard_deact();
      return recv_fc_guard_deact();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_guard_deact(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_guard_deact", TMessageType.Call, seqid_));
      fc_guard_deact_args args = new fc_guard_deact_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_guard_deact()
    {
      oprot_.WriteMessageBegin(new TMessage("fc_guard_deact", TMessageType.Call, seqid_));
      fc_guard_deact_args args = new fc_guard_deact_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_guard_deact()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_guard_deact_result result = new fc_guard_deact_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_guard_deact failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_force_set_value(AsyncCallback callback, object state, List<bool> direction, List<double> ref_ft)
    {
      return send_fc_force_set_value(callback, state, direction, ref_ft);
    }

    public int End_fc_force_set_value(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_force_set_value();
    }

    #endif

    public int fc_force_set_value(List<bool> direction, List<double> ref_ft)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_force_set_value(null, null, direction, ref_ft);
      return End_fc_force_set_value(asyncResult);

      #else
      send_fc_force_set_value(direction, ref_ft);
      return recv_fc_force_set_value();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_force_set_value(AsyncCallback callback, object state, List<bool> direction, List<double> ref_ft)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_force_set_value", TMessageType.Call, seqid_));
      fc_force_set_value_args args = new fc_force_set_value_args();
      args.Direction = direction;
      args.Ref_ft = ref_ft;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_force_set_value(List<bool> direction, List<double> ref_ft)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_force_set_value", TMessageType.Call, seqid_));
      fc_force_set_value_args args = new fc_force_set_value_args();
      args.Direction = direction;
      args.Ref_ft = ref_ft;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_force_set_value()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_force_set_value_result result = new fc_force_set_value_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_force_set_value failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_wait_pos(AsyncCallback callback, object state, List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      return send_fc_wait_pos(callback, state, middle, range, absolute, duration, timeout);
    }

    public int End_fc_wait_pos(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_wait_pos();
    }

    #endif

    public int fc_wait_pos(List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_wait_pos(null, null, middle, range, absolute, duration, timeout);
      return End_fc_wait_pos(asyncResult);

      #else
      send_fc_wait_pos(middle, range, absolute, duration, timeout);
      return recv_fc_wait_pos();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_wait_pos(AsyncCallback callback, object state, List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_wait_pos", TMessageType.Call, seqid_));
      fc_wait_pos_args args = new fc_wait_pos_args();
      args.Middle = middle;
      args.Range = range;
      args.Absolute = absolute;
      args.Duration = duration;
      args.Timeout = timeout;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_wait_pos(List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_wait_pos", TMessageType.Call, seqid_));
      fc_wait_pos_args args = new fc_wait_pos_args();
      args.Middle = middle;
      args.Range = range;
      args.Absolute = absolute;
      args.Duration = duration;
      args.Timeout = timeout;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_wait_pos()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_wait_pos_result result = new fc_wait_pos_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_wait_pos failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_wait_vel(AsyncCallback callback, object state, List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      return send_fc_wait_vel(callback, state, middle, range, absolute, duration, timeout);
    }

    public int End_fc_wait_vel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_wait_vel();
    }

    #endif

    public int fc_wait_vel(List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_wait_vel(null, null, middle, range, absolute, duration, timeout);
      return End_fc_wait_vel(asyncResult);

      #else
      send_fc_wait_vel(middle, range, absolute, duration, timeout);
      return recv_fc_wait_vel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_wait_vel(AsyncCallback callback, object state, List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_wait_vel", TMessageType.Call, seqid_));
      fc_wait_vel_args args = new fc_wait_vel_args();
      args.Middle = middle;
      args.Range = range;
      args.Absolute = absolute;
      args.Duration = duration;
      args.Timeout = timeout;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_wait_vel(List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_wait_vel", TMessageType.Call, seqid_));
      fc_wait_vel_args args = new fc_wait_vel_args();
      args.Middle = middle;
      args.Range = range;
      args.Absolute = absolute;
      args.Duration = duration;
      args.Timeout = timeout;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_wait_vel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_wait_vel_result result = new fc_wait_vel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_wait_vel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_wait_ft(AsyncCallback callback, object state, List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      return send_fc_wait_ft(callback, state, middle, range, absolute, duration, timeout);
    }

    public int End_fc_wait_ft(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_wait_ft();
    }

    #endif

    public int fc_wait_ft(List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_wait_ft(null, null, middle, range, absolute, duration, timeout);
      return End_fc_wait_ft(asyncResult);

      #else
      send_fc_wait_ft(middle, range, absolute, duration, timeout);
      return recv_fc_wait_ft();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_wait_ft(AsyncCallback callback, object state, List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_wait_ft", TMessageType.Call, seqid_));
      fc_wait_ft_args args = new fc_wait_ft_args();
      args.Middle = middle;
      args.Range = range;
      args.Absolute = absolute;
      args.Duration = duration;
      args.Timeout = timeout;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_wait_ft(List<double> middle, List<double> range, bool absolute, int duration, int timeout)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_wait_ft", TMessageType.Call, seqid_));
      fc_wait_ft_args args = new fc_wait_ft_args();
      args.Middle = middle;
      args.Range = range;
      args.Absolute = absolute;
      args.Duration = duration;
      args.Timeout = timeout;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_wait_ft()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_wait_ft_result result = new fc_wait_ft_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_wait_ft failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_wait_logic(AsyncCallback callback, object state, List<int> @value)
    {
      return send_fc_wait_logic(callback, state, @value);
    }

    public int End_fc_wait_logic(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_wait_logic();
    }

    #endif

    public int fc_wait_logic(List<int> @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_wait_logic(null, null, @value);
      return End_fc_wait_logic(asyncResult);

      #else
      send_fc_wait_logic(@value);
      return recv_fc_wait_logic();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_wait_logic(AsyncCallback callback, object state, List<int> @value)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_wait_logic", TMessageType.Call, seqid_));
      fc_wait_logic_args args = new fc_wait_logic_args();
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_wait_logic(List<int> @value)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_wait_logic", TMessageType.Call, seqid_));
      fc_wait_logic_args args = new fc_wait_logic_args();
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_fc_wait_logic()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_wait_logic_result result = new fc_wait_logic_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_wait_logic failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_get_ft(AsyncCallback callback, object state)
    {
      return send_fc_get_ft(callback, state);
    }

    public List<double> End_fc_get_ft(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_get_ft();
    }

    #endif

    public List<double> fc_get_ft()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_get_ft(null, null);
      return End_fc_get_ft(asyncResult);

      #else
      send_fc_get_ft();
      return recv_fc_get_ft();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_get_ft(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_get_ft", TMessageType.Call, seqid_));
      fc_get_ft_args args = new fc_get_ft_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_get_ft()
    {
      oprot_.WriteMessageBegin(new TMessage("fc_get_ft", TMessageType.Call, seqid_));
      fc_get_ft_args args = new fc_get_ft_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_fc_get_ft()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_get_ft_result result = new fc_get_ft_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_get_ft failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fc_mode_is_active(AsyncCallback callback, object state)
    {
      return send_fc_mode_is_active(callback, state);
    }

    public bool End_fc_mode_is_active(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fc_mode_is_active();
    }

    #endif

    public bool fc_mode_is_active()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fc_mode_is_active(null, null);
      return End_fc_mode_is_active(asyncResult);

      #else
      send_fc_mode_is_active();
      return recv_fc_mode_is_active();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fc_mode_is_active(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("fc_mode_is_active", TMessageType.Call, seqid_));
      fc_mode_is_active_args args = new fc_mode_is_active_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fc_mode_is_active()
    {
      oprot_.WriteMessageBegin(new TMessage("fc_mode_is_active", TMessageType.Call, seqid_));
      fc_mode_is_active_args args = new fc_mode_is_active_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_fc_mode_is_active()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fc_mode_is_active_result result = new fc_mode_is_active_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fc_mode_is_active failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_start_realtime_mode(AsyncCallback callback, object state, int mode, double fileter_bandwidth, double com_lost_time)
    {
      return send_start_realtime_mode(callback, state, mode, fileter_bandwidth, com_lost_time);
    }

    public int End_start_realtime_mode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_start_realtime_mode();
    }

    #endif

    public int start_realtime_mode(int mode, double fileter_bandwidth, double com_lost_time)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_start_realtime_mode(null, null, mode, fileter_bandwidth, com_lost_time);
      return End_start_realtime_mode(asyncResult);

      #else
      send_start_realtime_mode(mode, fileter_bandwidth, com_lost_time);
      return recv_start_realtime_mode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_start_realtime_mode(AsyncCallback callback, object state, int mode, double fileter_bandwidth, double com_lost_time)
    {
      oprot_.WriteMessageBegin(new TMessage("start_realtime_mode", TMessageType.Call, seqid_));
      start_realtime_mode_args args = new start_realtime_mode_args();
      args.Mode = mode;
      args.Fileter_bandwidth = fileter_bandwidth;
      args.Com_lost_time = com_lost_time;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_start_realtime_mode(int mode, double fileter_bandwidth, double com_lost_time)
    {
      oprot_.WriteMessageBegin(new TMessage("start_realtime_mode", TMessageType.Call, seqid_));
      start_realtime_mode_args args = new start_realtime_mode_args();
      args.Mode = mode;
      args.Fileter_bandwidth = fileter_bandwidth;
      args.Com_lost_time = com_lost_time;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_start_realtime_mode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      start_realtime_mode_result result = new start_realtime_mode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "start_realtime_mode failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_end_realtime_mode(AsyncCallback callback, object state)
    {
      return send_end_realtime_mode(callback, state);
    }

    public int End_end_realtime_mode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_end_realtime_mode();
    }

    #endif

    public int end_realtime_mode()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_end_realtime_mode(null, null);
      return End_end_realtime_mode(asyncResult);

      #else
      send_end_realtime_mode();
      return recv_end_realtime_mode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_end_realtime_mode(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("end_realtime_mode", TMessageType.Call, seqid_));
      end_realtime_mode_args args = new end_realtime_mode_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_end_realtime_mode()
    {
      oprot_.WriteMessageBegin(new TMessage("end_realtime_mode", TMessageType.Call, seqid_));
      end_realtime_mode_args args = new end_realtime_mode_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_end_realtime_mode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      end_realtime_mode_result result = new end_realtime_mode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "end_realtime_mode failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_realtime_data_enqueue(AsyncCallback callback, object state, List<RealTimeControlData> realtime_data, bool block)
    {
      return send_realtime_data_enqueue(callback, state, realtime_data, block);
    }

    public int End_realtime_data_enqueue(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_realtime_data_enqueue();
    }

    #endif

    public int realtime_data_enqueue(List<RealTimeControlData> realtime_data, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_realtime_data_enqueue(null, null, realtime_data, block);
      return End_realtime_data_enqueue(asyncResult);

      #else
      send_realtime_data_enqueue(realtime_data, block);
      return recv_realtime_data_enqueue();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_realtime_data_enqueue(AsyncCallback callback, object state, List<RealTimeControlData> realtime_data, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("realtime_data_enqueue", TMessageType.Call, seqid_));
      realtime_data_enqueue_args args = new realtime_data_enqueue_args();
      args.Realtime_data = realtime_data;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_realtime_data_enqueue(List<RealTimeControlData> realtime_data, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("realtime_data_enqueue", TMessageType.Call, seqid_));
      realtime_data_enqueue_args args = new realtime_data_enqueue_args();
      args.Realtime_data = realtime_data;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_realtime_data_enqueue()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      realtime_data_enqueue_result result = new realtime_data_enqueue_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "realtime_data_enqueue failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_clear_realtime_data_queue(AsyncCallback callback, object state)
    {
      return send_clear_realtime_data_queue(callback, state);
    }

    public int End_clear_realtime_data_queue(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_clear_realtime_data_queue();
    }

    #endif

    public int clear_realtime_data_queue()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_clear_realtime_data_queue(null, null);
      return End_clear_realtime_data_queue(asyncResult);

      #else
      send_clear_realtime_data_queue();
      return recv_clear_realtime_data_queue();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_clear_realtime_data_queue(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("clear_realtime_data_queue", TMessageType.Call, seqid_));
      clear_realtime_data_queue_args args = new clear_realtime_data_queue_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_clear_realtime_data_queue()
    {
      oprot_.WriteMessageBegin(new TMessage("clear_realtime_data_queue", TMessageType.Call, seqid_));
      clear_realtime_data_queue_args args = new clear_realtime_data_queue_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_clear_realtime_data_queue()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      clear_realtime_data_queue_result result = new clear_realtime_data_queue_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "clear_realtime_data_queue failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_realtime_data_queue_size(AsyncCallback callback, object state)
    {
      return send_get_realtime_data_queue_size(callback, state);
    }

    public int End_get_realtime_data_queue_size(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_realtime_data_queue_size();
    }

    #endif

    public int get_realtime_data_queue_size()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_realtime_data_queue_size(null, null);
      return End_get_realtime_data_queue_size(asyncResult);

      #else
      send_get_realtime_data_queue_size();
      return recv_get_realtime_data_queue_size();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_realtime_data_queue_size(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_realtime_data_queue_size", TMessageType.Call, seqid_));
      get_realtime_data_queue_size_args args = new get_realtime_data_queue_size_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_realtime_data_queue_size()
    {
      oprot_.WriteMessageBegin(new TMessage("get_realtime_data_queue_size", TMessageType.Call, seqid_));
      get_realtime_data_queue_size_args args = new get_realtime_data_queue_size_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_get_realtime_data_queue_size()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_realtime_data_queue_size_result result = new get_realtime_data_queue_size_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_realtime_data_queue_size failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_enable_speed_optimization(AsyncCallback callback, object state)
    {
      return send_enable_speed_optimization(callback, state);
    }

    public int End_enable_speed_optimization(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_enable_speed_optimization();
    }

    #endif

    public int enable_speed_optimization()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_enable_speed_optimization(null, null);
      return End_enable_speed_optimization(asyncResult);

      #else
      send_enable_speed_optimization();
      return recv_enable_speed_optimization();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_enable_speed_optimization(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("enable_speed_optimization", TMessageType.Call, seqid_));
      enable_speed_optimization_args args = new enable_speed_optimization_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_enable_speed_optimization()
    {
      oprot_.WriteMessageBegin(new TMessage("enable_speed_optimization", TMessageType.Call, seqid_));
      enable_speed_optimization_args args = new enable_speed_optimization_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_enable_speed_optimization()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      enable_speed_optimization_result result = new enable_speed_optimization_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "enable_speed_optimization failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_disable_speed_optimization(AsyncCallback callback, object state)
    {
      return send_disable_speed_optimization(callback, state);
    }

    public int End_disable_speed_optimization(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_disable_speed_optimization();
    }

    #endif

    public int disable_speed_optimization()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_disable_speed_optimization(null, null);
      return End_disable_speed_optimization(asyncResult);

      #else
      send_disable_speed_optimization();
      return recv_disable_speed_optimization();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_disable_speed_optimization(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("disable_speed_optimization", TMessageType.Call, seqid_));
      disable_speed_optimization_args args = new disable_speed_optimization_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_disable_speed_optimization()
    {
      oprot_.WriteMessageBegin(new TMessage("disable_speed_optimization", TMessageType.Call, seqid_));
      disable_speed_optimization_args args = new disable_speed_optimization_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_disable_speed_optimization()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disable_speed_optimization_result result = new disable_speed_optimization_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "disable_speed_optimization failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_change_recipe(AsyncCallback callback, object state)
    {
      return send_change_recipe(callback, state);
    }

    public void End_change_recipe(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_change_recipe();
    }

    #endif

    public void change_recipe()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_change_recipe(null, null);
      End_change_recipe(asyncResult);

      #else
      send_change_recipe();
      recv_change_recipe();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_change_recipe(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("change_recipe", TMessageType.Call, seqid_));
      change_recipe_args args = new change_recipe_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_change_recipe()
    {
      oprot_.WriteMessageBegin(new TMessage("change_recipe", TMessageType.Call, seqid_));
      change_recipe_args args = new change_recipe_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_change_recipe()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      change_recipe_result result = new change_recipe_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_system_value_bool(AsyncCallback callback, object state, string name, bool @value)
    {
      return send_set_system_value_bool(callback, state, name, @value);
    }

    public int End_set_system_value_bool(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_system_value_bool();
    }

    #endif

    public int set_system_value_bool(string name, bool @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_system_value_bool(null, null, name, @value);
      return End_set_system_value_bool(asyncResult);

      #else
      send_set_system_value_bool(name, @value);
      return recv_set_system_value_bool();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_system_value_bool(AsyncCallback callback, object state, string name, bool @value)
    {
      oprot_.WriteMessageBegin(new TMessage("set_system_value_bool", TMessageType.Call, seqid_));
      set_system_value_bool_args args = new set_system_value_bool_args();
      args.Name = name;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_system_value_bool(string name, bool @value)
    {
      oprot_.WriteMessageBegin(new TMessage("set_system_value_bool", TMessageType.Call, seqid_));
      set_system_value_bool_args args = new set_system_value_bool_args();
      args.Name = name;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_system_value_bool()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_system_value_bool_result result = new set_system_value_bool_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_system_value_bool failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_system_value_double(AsyncCallback callback, object state, string name, double @value)
    {
      return send_set_system_value_double(callback, state, name, @value);
    }

    public int End_set_system_value_double(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_system_value_double();
    }

    #endif

    public int set_system_value_double(string name, double @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_system_value_double(null, null, name, @value);
      return End_set_system_value_double(asyncResult);

      #else
      send_set_system_value_double(name, @value);
      return recv_set_system_value_double();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_system_value_double(AsyncCallback callback, object state, string name, double @value)
    {
      oprot_.WriteMessageBegin(new TMessage("set_system_value_double", TMessageType.Call, seqid_));
      set_system_value_double_args args = new set_system_value_double_args();
      args.Name = name;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_system_value_double(string name, double @value)
    {
      oprot_.WriteMessageBegin(new TMessage("set_system_value_double", TMessageType.Call, seqid_));
      set_system_value_double_args args = new set_system_value_double_args();
      args.Name = name;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_system_value_double()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_system_value_double_result result = new set_system_value_double_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_system_value_double failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_system_value_str(AsyncCallback callback, object state, string name, string @value)
    {
      return send_set_system_value_str(callback, state, name, @value);
    }

    public int End_set_system_value_str(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_system_value_str();
    }

    #endif

    public int set_system_value_str(string name, string @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_system_value_str(null, null, name, @value);
      return End_set_system_value_str(asyncResult);

      #else
      send_set_system_value_str(name, @value);
      return recv_set_system_value_str();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_system_value_str(AsyncCallback callback, object state, string name, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("set_system_value_str", TMessageType.Call, seqid_));
      set_system_value_str_args args = new set_system_value_str_args();
      args.Name = name;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_system_value_str(string name, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("set_system_value_str", TMessageType.Call, seqid_));
      set_system_value_str_args args = new set_system_value_str_args();
      args.Name = name;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_system_value_str()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_system_value_str_result result = new set_system_value_str_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_system_value_str failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_system_value_list(AsyncCallback callback, object state, string name, List<double> @value)
    {
      return send_set_system_value_list(callback, state, name, @value);
    }

    public int End_set_system_value_list(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_system_value_list();
    }

    #endif

    public int set_system_value_list(string name, List<double> @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_system_value_list(null, null, name, @value);
      return End_set_system_value_list(asyncResult);

      #else
      send_set_system_value_list(name, @value);
      return recv_set_system_value_list();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_system_value_list(AsyncCallback callback, object state, string name, List<double> @value)
    {
      oprot_.WriteMessageBegin(new TMessage("set_system_value_list", TMessageType.Call, seqid_));
      set_system_value_list_args args = new set_system_value_list_args();
      args.Name = name;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_system_value_list(string name, List<double> @value)
    {
      oprot_.WriteMessageBegin(new TMessage("set_system_value_list", TMessageType.Call, seqid_));
      set_system_value_list_args args = new set_system_value_list_args();
      args.Name = name;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_system_value_list()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_system_value_list_result result = new set_system_value_list_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_system_value_list failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_system_value_bool(AsyncCallback callback, object state, string name)
    {
      return send_get_system_value_bool(callback, state, name);
    }

    public bool End_get_system_value_bool(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_system_value_bool();
    }

    #endif

    public bool get_system_value_bool(string name)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_system_value_bool(null, null, name);
      return End_get_system_value_bool(asyncResult);

      #else
      send_get_system_value_bool(name);
      return recv_get_system_value_bool();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_system_value_bool(AsyncCallback callback, object state, string name)
    {
      oprot_.WriteMessageBegin(new TMessage("get_system_value_bool", TMessageType.Call, seqid_));
      get_system_value_bool_args args = new get_system_value_bool_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_system_value_bool(string name)
    {
      oprot_.WriteMessageBegin(new TMessage("get_system_value_bool", TMessageType.Call, seqid_));
      get_system_value_bool_args args = new get_system_value_bool_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_get_system_value_bool()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_system_value_bool_result result = new get_system_value_bool_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_system_value_bool failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_system_value_double(AsyncCallback callback, object state, string name)
    {
      return send_get_system_value_double(callback, state, name);
    }

    public double End_get_system_value_double(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_system_value_double();
    }

    #endif

    public double get_system_value_double(string name)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_system_value_double(null, null, name);
      return End_get_system_value_double(asyncResult);

      #else
      send_get_system_value_double(name);
      return recv_get_system_value_double();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_system_value_double(AsyncCallback callback, object state, string name)
    {
      oprot_.WriteMessageBegin(new TMessage("get_system_value_double", TMessageType.Call, seqid_));
      get_system_value_double_args args = new get_system_value_double_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_system_value_double(string name)
    {
      oprot_.WriteMessageBegin(new TMessage("get_system_value_double", TMessageType.Call, seqid_));
      get_system_value_double_args args = new get_system_value_double_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public double recv_get_system_value_double()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_system_value_double_result result = new get_system_value_double_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_system_value_double failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_system_value_str(AsyncCallback callback, object state, string name)
    {
      return send_get_system_value_str(callback, state, name);
    }

    public string End_get_system_value_str(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_system_value_str();
    }

    #endif

    public string get_system_value_str(string name)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_system_value_str(null, null, name);
      return End_get_system_value_str(asyncResult);

      #else
      send_get_system_value_str(name);
      return recv_get_system_value_str();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_system_value_str(AsyncCallback callback, object state, string name)
    {
      oprot_.WriteMessageBegin(new TMessage("get_system_value_str", TMessageType.Call, seqid_));
      get_system_value_str_args args = new get_system_value_str_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_system_value_str(string name)
    {
      oprot_.WriteMessageBegin(new TMessage("get_system_value_str", TMessageType.Call, seqid_));
      get_system_value_str_args args = new get_system_value_str_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_get_system_value_str()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_system_value_str_result result = new get_system_value_str_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_system_value_str failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_system_value_list(AsyncCallback callback, object state, string name)
    {
      return send_get_system_value_list(callback, state, name);
    }

    public List<double> End_get_system_value_list(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_system_value_list();
    }

    #endif

    public List<double> get_system_value_list(string name)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_system_value_list(null, null, name);
      return End_get_system_value_list(asyncResult);

      #else
      send_get_system_value_list(name);
      return recv_get_system_value_list();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_system_value_list(AsyncCallback callback, object state, string name)
    {
      oprot_.WriteMessageBegin(new TMessage("get_system_value_list", TMessageType.Call, seqid_));
      get_system_value_list_args args = new get_system_value_list_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_system_value_list(string name)
    {
      oprot_.WriteMessageBegin(new TMessage("get_system_value_list", TMessageType.Call, seqid_));
      get_system_value_list_args args = new get_system_value_list_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_system_value_list()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_system_value_list_result result = new get_system_value_list_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_system_value_list failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_trackEnqueue(AsyncCallback callback, object state, List<List<double>> track, bool block)
    {
      return send_trackEnqueue(callback, state, track, block);
    }

    public int End_trackEnqueue(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_trackEnqueue();
    }

    #endif

    public int trackEnqueue(List<List<double>> track, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_trackEnqueue(null, null, track, block);
      return End_trackEnqueue(asyncResult);

      #else
      send_trackEnqueue(track, block);
      return recv_trackEnqueue();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_trackEnqueue(AsyncCallback callback, object state, List<List<double>> track, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("trackEnqueue", TMessageType.Call, seqid_));
      trackEnqueue_args args = new trackEnqueue_args();
      args.Track = track;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_trackEnqueue(List<List<double>> track, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("trackEnqueue", TMessageType.Call, seqid_));
      trackEnqueue_args args = new trackEnqueue_args();
      args.Track = track;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_trackEnqueue()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      trackEnqueue_result result = new trackEnqueue_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "trackEnqueue failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_trackClearQueue(AsyncCallback callback, object state)
    {
      return send_trackClearQueue(callback, state);
    }

    public int End_trackClearQueue(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_trackClearQueue();
    }

    #endif

    public int trackClearQueue()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_trackClearQueue(null, null);
      return End_trackClearQueue(asyncResult);

      #else
      send_trackClearQueue();
      return recv_trackClearQueue();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_trackClearQueue(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("trackClearQueue", TMessageType.Call, seqid_));
      trackClearQueue_args args = new trackClearQueue_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_trackClearQueue()
    {
      oprot_.WriteMessageBegin(new TMessage("trackClearQueue", TMessageType.Call, seqid_));
      trackClearQueue_args args = new trackClearQueue_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_trackClearQueue()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      trackClearQueue_result result = new trackClearQueue_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "trackClearQueue failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getQueueSize(AsyncCallback callback, object state)
    {
      return send_getQueueSize(callback, state);
    }

    public int End_getQueueSize(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getQueueSize();
    }

    #endif

    public int getQueueSize()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getQueueSize(null, null);
      return End_getQueueSize(asyncResult);

      #else
      send_getQueueSize();
      return recv_getQueueSize();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getQueueSize(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getQueueSize", TMessageType.Call, seqid_));
      getQueueSize_args args = new getQueueSize_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getQueueSize()
    {
      oprot_.WriteMessageBegin(new TMessage("getQueueSize", TMessageType.Call, seqid_));
      getQueueSize_args args = new getQueueSize_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_getQueueSize()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getQueueSize_result result = new getQueueSize_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getQueueSize failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_trackJointMotion(AsyncCallback callback, object state, double speed, double acc, bool block)
    {
      return send_trackJointMotion(callback, state, speed, acc, block);
    }

    public int End_trackJointMotion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_trackJointMotion();
    }

    #endif

    public int trackJointMotion(double speed, double acc, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_trackJointMotion(null, null, speed, acc, block);
      return End_trackJointMotion(asyncResult);

      #else
      send_trackJointMotion(speed, acc, block);
      return recv_trackJointMotion();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_trackJointMotion(AsyncCallback callback, object state, double speed, double acc, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("trackJointMotion", TMessageType.Call, seqid_));
      trackJointMotion_args args = new trackJointMotion_args();
      args.Speed = speed;
      args.Acc = acc;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_trackJointMotion(double speed, double acc, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("trackJointMotion", TMessageType.Call, seqid_));
      trackJointMotion_args args = new trackJointMotion_args();
      args.Speed = speed;
      args.Acc = acc;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_trackJointMotion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      trackJointMotion_result result = new trackJointMotion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "trackJointMotion failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_trackCartMotion(AsyncCallback callback, object state, double speed, double acc, bool block, string tool, string wobj, double radius)
    {
      return send_trackCartMotion(callback, state, speed, acc, block, tool, wobj, radius);
    }

    public int End_trackCartMotion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_trackCartMotion();
    }

    #endif

    public int trackCartMotion(double speed, double acc, bool block, string tool, string wobj, double radius)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_trackCartMotion(null, null, speed, acc, block, tool, wobj, radius);
      return End_trackCartMotion(asyncResult);

      #else
      send_trackCartMotion(speed, acc, block, tool, wobj, radius);
      return recv_trackCartMotion();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_trackCartMotion(AsyncCallback callback, object state, double speed, double acc, bool block, string tool, string wobj, double radius)
    {
      oprot_.WriteMessageBegin(new TMessage("trackCartMotion", TMessageType.Call, seqid_));
      trackCartMotion_args args = new trackCartMotion_args();
      args.Speed = speed;
      args.Acc = acc;
      args.Block = block;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Radius = radius;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_trackCartMotion(double speed, double acc, bool block, string tool, string wobj, double radius)
    {
      oprot_.WriteMessageBegin(new TMessage("trackCartMotion", TMessageType.Call, seqid_));
      trackCartMotion_args args = new trackCartMotion_args();
      args.Speed = speed;
      args.Acc = acc;
      args.Block = block;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Radius = radius;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_trackCartMotion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      trackCartMotion_result result = new trackCartMotion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "trackCartMotion failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_rpc_heartbeat(AsyncCallback callback, object state, int time)
    {
      return send_rpc_heartbeat(callback, state, time);
    }

    public void End_rpc_heartbeat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_rpc_heartbeat();
    }

    #endif

    public void rpc_heartbeat(int time)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_rpc_heartbeat(null, null, time);
      End_rpc_heartbeat(asyncResult);

      #else
      send_rpc_heartbeat(time);
      recv_rpc_heartbeat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_rpc_heartbeat(AsyncCallback callback, object state, int time)
    {
      oprot_.WriteMessageBegin(new TMessage("rpc_heartbeat", TMessageType.Call, seqid_));
      rpc_heartbeat_args args = new rpc_heartbeat_args();
      args.Time = time;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_rpc_heartbeat(int time)
    {
      oprot_.WriteMessageBegin(new TMessage("rpc_heartbeat", TMessageType.Call, seqid_));
      rpc_heartbeat_args args = new rpc_heartbeat_args();
      args.Time = time;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_rpc_heartbeat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      rpc_heartbeat_result result = new rpc_heartbeat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_move_spiral(AsyncCallback callback, object state, List<double> p1, List<double> p2, double rev, double len, double r, int mode, double v, double a, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      return send_move_spiral(callback, state, p1, p2, rev, len, r, mode, v, a, q_near, tool, wobj, block, op, def_acc);
    }

    public int End_move_spiral(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_move_spiral();
    }

    #endif

    public int move_spiral(List<double> p1, List<double> p2, double rev, double len, double r, int mode, double v, double a, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_move_spiral(null, null, p1, p2, rev, len, r, mode, v, a, q_near, tool, wobj, block, op, def_acc);
      return End_move_spiral(asyncResult);

      #else
      send_move_spiral(p1, p2, rev, len, r, mode, v, a, q_near, tool, wobj, block, op, def_acc);
      return recv_move_spiral();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_move_spiral(AsyncCallback callback, object state, List<double> p1, List<double> p2, double rev, double len, double r, int mode, double v, double a, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("move_spiral", TMessageType.Call, seqid_));
      move_spiral_args args = new move_spiral_args();
      args.P1 = p1;
      args.P2 = p2;
      args.Rev = rev;
      args.Len = len;
      args.R = r;
      args.Mode = mode;
      args.V = v;
      args.A = a;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_move_spiral(List<double> p1, List<double> p2, double rev, double len, double r, int mode, double v, double a, List<double> q_near, string tool, string wobj, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("move_spiral", TMessageType.Call, seqid_));
      move_spiral_args args = new move_spiral_args();
      args.P1 = p1;
      args.P2 = p2;
      args.Rev = rev;
      args.Len = len;
      args.R = r;
      args.Mode = mode;
      args.V = v;
      args.A = a;
      args.Q_near = q_near;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_move_spiral()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      move_spiral_result result = new move_spiral_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "move_spiral failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_enable_acc_optimization(AsyncCallback callback, object state)
    {
      return send_enable_acc_optimization(callback, state);
    }

    public int End_enable_acc_optimization(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_enable_acc_optimization();
    }

    #endif

    public int enable_acc_optimization()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_enable_acc_optimization(null, null);
      return End_enable_acc_optimization(asyncResult);

      #else
      send_enable_acc_optimization();
      return recv_enable_acc_optimization();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_enable_acc_optimization(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("enable_acc_optimization", TMessageType.Call, seqid_));
      enable_acc_optimization_args args = new enable_acc_optimization_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_enable_acc_optimization()
    {
      oprot_.WriteMessageBegin(new TMessage("enable_acc_optimization", TMessageType.Call, seqid_));
      enable_acc_optimization_args args = new enable_acc_optimization_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_enable_acc_optimization()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      enable_acc_optimization_result result = new enable_acc_optimization_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "enable_acc_optimization failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_disable_acc_optimization(AsyncCallback callback, object state)
    {
      return send_disable_acc_optimization(callback, state);
    }

    public int End_disable_acc_optimization(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_disable_acc_optimization();
    }

    #endif

    public int disable_acc_optimization()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_disable_acc_optimization(null, null);
      return End_disable_acc_optimization(asyncResult);

      #else
      send_disable_acc_optimization();
      return recv_disable_acc_optimization();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_disable_acc_optimization(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("disable_acc_optimization", TMessageType.Call, seqid_));
      disable_acc_optimization_args args = new disable_acc_optimization_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_disable_acc_optimization()
    {
      oprot_.WriteMessageBegin(new TMessage("disable_acc_optimization", TMessageType.Call, seqid_));
      disable_acc_optimization_args args = new disable_acc_optimization_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_disable_acc_optimization()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disable_acc_optimization_result result = new disable_acc_optimization_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "disable_acc_optimization failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_baudrate_485(AsyncCallback callback, object state, int @value, bool block)
    {
      return send_set_baudrate_485(callback, state, @value, block);
    }

    public int End_set_baudrate_485(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_baudrate_485();
    }

    #endif

    public int set_baudrate_485(int @value, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_baudrate_485(null, null, @value, block);
      return End_set_baudrate_485(asyncResult);

      #else
      send_set_baudrate_485(@value, block);
      return recv_set_baudrate_485();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_baudrate_485(AsyncCallback callback, object state, int @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_baudrate_485", TMessageType.Call, seqid_));
      set_baudrate_485_args args = new set_baudrate_485_args();
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_baudrate_485(int @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_baudrate_485", TMessageType.Call, seqid_));
      set_baudrate_485_args args = new set_baudrate_485_args();
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_baudrate_485()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_baudrate_485_result result = new set_baudrate_485_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_baudrate_485 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_baudrate_can(AsyncCallback callback, object state, int @value, bool block)
    {
      return send_set_baudrate_can(callback, state, @value, block);
    }

    public int End_set_baudrate_can(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_baudrate_can();
    }

    #endif

    public int set_baudrate_can(int @value, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_baudrate_can(null, null, @value, block);
      return End_set_baudrate_can(asyncResult);

      #else
      send_set_baudrate_can(@value, block);
      return recv_set_baudrate_can();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_baudrate_can(AsyncCallback callback, object state, int @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_baudrate_can", TMessageType.Call, seqid_));
      set_baudrate_can_args args = new set_baudrate_can_args();
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_baudrate_can(int @value, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_baudrate_can", TMessageType.Call, seqid_));
      set_baudrate_can_args args = new set_baudrate_can_args();
      args.Value = @value;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_baudrate_can()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_baudrate_can_result result = new set_baudrate_can_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_baudrate_can failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_analog_output_mode(AsyncCallback callback, object state, short num, int mode, bool block)
    {
      return send_set_analog_output_mode(callback, state, num, mode, block);
    }

    public int End_set_analog_output_mode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_analog_output_mode();
    }

    #endif

    public int set_analog_output_mode(short num, int mode, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_analog_output_mode(null, null, num, mode, block);
      return End_set_analog_output_mode(asyncResult);

      #else
      send_set_analog_output_mode(num, mode, block);
      return recv_set_analog_output_mode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_analog_output_mode(AsyncCallback callback, object state, short num, int mode, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_analog_output_mode", TMessageType.Call, seqid_));
      set_analog_output_mode_args args = new set_analog_output_mode_args();
      args.Num = num;
      args.Mode = mode;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_analog_output_mode(short num, int mode, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_analog_output_mode", TMessageType.Call, seqid_));
      set_analog_output_mode_args args = new set_analog_output_mode_args();
      args.Num = num;
      args.Mode = mode;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_analog_output_mode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_analog_output_mode_result result = new set_analog_output_mode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_analog_output_mode failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_robotmoving(AsyncCallback callback, object state)
    {
      return send_robotmoving(callback, state);
    }

    public bool End_robotmoving(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_robotmoving();
    }

    #endif

    public bool robotmoving()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_robotmoving(null, null);
      return End_robotmoving(asyncResult);

      #else
      send_robotmoving();
      return recv_robotmoving();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_robotmoving(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("robotmoving", TMessageType.Call, seqid_));
      robotmoving_args args = new robotmoving_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_robotmoving()
    {
      oprot_.WriteMessageBegin(new TMessage("robotmoving", TMessageType.Call, seqid_));
      robotmoving_args args = new robotmoving_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_robotmoving()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      robotmoving_result result = new robotmoving_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "robotmoving failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_modbus_write_multiple_coils(AsyncCallback callback, object state, int slave_num, string name, int len, List<sbyte> byte_list)
    {
      return send_modbus_write_multiple_coils(callback, state, slave_num, name, len, byte_list);
    }

    public int End_modbus_write_multiple_coils(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_modbus_write_multiple_coils();
    }

    #endif

    public int modbus_write_multiple_coils(int slave_num, string name, int len, List<sbyte> byte_list)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_modbus_write_multiple_coils(null, null, slave_num, name, len, byte_list);
      return End_modbus_write_multiple_coils(asyncResult);

      #else
      send_modbus_write_multiple_coils(slave_num, name, len, byte_list);
      return recv_modbus_write_multiple_coils();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_modbus_write_multiple_coils(AsyncCallback callback, object state, int slave_num, string name, int len, List<sbyte> byte_list)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_write_multiple_coils", TMessageType.Call, seqid_));
      modbus_write_multiple_coils_args args = new modbus_write_multiple_coils_args();
      args.Slave_num = slave_num;
      args.Name = name;
      args.Len = len;
      args.Byte_list = byte_list;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_modbus_write_multiple_coils(int slave_num, string name, int len, List<sbyte> byte_list)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_write_multiple_coils", TMessageType.Call, seqid_));
      modbus_write_multiple_coils_args args = new modbus_write_multiple_coils_args();
      args.Slave_num = slave_num;
      args.Name = name;
      args.Len = len;
      args.Byte_list = byte_list;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_modbus_write_multiple_coils()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      modbus_write_multiple_coils_result result = new modbus_write_multiple_coils_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "modbus_write_multiple_coils failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_modbus_write_multiple_regs(AsyncCallback callback, object state, int slave_num, string name, int len, List<short> word_list)
    {
      return send_modbus_write_multiple_regs(callback, state, slave_num, name, len, word_list);
    }

    public int End_modbus_write_multiple_regs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_modbus_write_multiple_regs();
    }

    #endif

    public int modbus_write_multiple_regs(int slave_num, string name, int len, List<short> word_list)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_modbus_write_multiple_regs(null, null, slave_num, name, len, word_list);
      return End_modbus_write_multiple_regs(asyncResult);

      #else
      send_modbus_write_multiple_regs(slave_num, name, len, word_list);
      return recv_modbus_write_multiple_regs();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_modbus_write_multiple_regs(AsyncCallback callback, object state, int slave_num, string name, int len, List<short> word_list)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_write_multiple_regs", TMessageType.Call, seqid_));
      modbus_write_multiple_regs_args args = new modbus_write_multiple_regs_args();
      args.Slave_num = slave_num;
      args.Name = name;
      args.Len = len;
      args.Word_list = word_list;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_modbus_write_multiple_regs(int slave_num, string name, int len, List<short> word_list)
    {
      oprot_.WriteMessageBegin(new TMessage("modbus_write_multiple_regs", TMessageType.Call, seqid_));
      modbus_write_multiple_regs_args args = new modbus_write_multiple_regs_args();
      args.Slave_num = slave_num;
      args.Name = name;
      args.Len = len;
      args.Word_list = word_list;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_modbus_write_multiple_regs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      modbus_write_multiple_regs_result result = new modbus_write_multiple_regs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "modbus_write_multiple_regs failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_current_project(AsyncCallback callback, object state)
    {
      return send_get_current_project(callback, state);
    }

    public string End_get_current_project(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_current_project();
    }

    #endif

    public string get_current_project()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_current_project(null, null);
      return End_get_current_project(asyncResult);

      #else
      send_get_current_project();
      return recv_get_current_project();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_current_project(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_current_project", TMessageType.Call, seqid_));
      get_current_project_args args = new get_current_project_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_current_project()
    {
      oprot_.WriteMessageBegin(new TMessage("get_current_project", TMessageType.Call, seqid_));
      get_current_project_args args = new get_current_project_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_get_current_project()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_current_project_result result = new get_current_project_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_current_project failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_files_list(AsyncCallback callback, object state, string path)
    {
      return send_get_files_list(callback, state, path);
    }

    public Dictionary<string, int> End_get_files_list(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_files_list();
    }

    #endif

    public Dictionary<string, int> get_files_list(string path)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_files_list(null, null, path);
      return End_get_files_list(asyncResult);

      #else
      send_get_files_list(path);
      return recv_get_files_list();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_files_list(AsyncCallback callback, object state, string path)
    {
      oprot_.WriteMessageBegin(new TMessage("get_files_list", TMessageType.Call, seqid_));
      get_files_list_args args = new get_files_list_args();
      args.Path = path;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_files_list(string path)
    {
      oprot_.WriteMessageBegin(new TMessage("get_files_list", TMessageType.Call, seqid_));
      get_files_list_args args = new get_files_list_args();
      args.Path = path;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, int> recv_get_files_list()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_files_list_result result = new get_files_list_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_files_list failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRobotStatus(AsyncCallback callback, object state)
    {
      return send_getRobotStatus(callback, state);
    }

    public RobotStatus End_getRobotStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRobotStatus();
    }

    #endif

    public RobotStatus getRobotStatus()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRobotStatus(null, null);
      return End_getRobotStatus(asyncResult);

      #else
      send_getRobotStatus();
      return recv_getRobotStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRobotStatus(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getRobotStatus", TMessageType.Call, seqid_));
      getRobotStatus_args args = new getRobotStatus_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRobotStatus()
    {
      oprot_.WriteMessageBegin(new TMessage("getRobotStatus", TMessageType.Call, seqid_));
      getRobotStatus_args args = new getRobotStatus_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RobotStatus recv_getRobotStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRobotStatus_result result = new getRobotStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRobotStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRobotIOStatus(AsyncCallback callback, object state)
    {
      return send_getRobotIOStatus(callback, state);
    }

    public IOStatus End_getRobotIOStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRobotIOStatus();
    }

    #endif

    public IOStatus getRobotIOStatus()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRobotIOStatus(null, null);
      return End_getRobotIOStatus(asyncResult);

      #else
      send_getRobotIOStatus();
      return recv_getRobotIOStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRobotIOStatus(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getRobotIOStatus", TMessageType.Call, seqid_));
      getRobotIOStatus_args args = new getRobotIOStatus_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRobotIOStatus()
    {
      oprot_.WriteMessageBegin(new TMessage("getRobotIOStatus", TMessageType.Call, seqid_));
      getRobotIOStatus_args args = new getRobotIOStatus_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public IOStatus recv_getRobotIOStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRobotIOStatus_result result = new getRobotIOStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRobotIOStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tcp_pose_coord(AsyncCallback callback, object state, string tool, string wobj)
    {
      return send_get_tcp_pose_coord(callback, state, tool, wobj);
    }

    public List<double> End_get_tcp_pose_coord(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tcp_pose_coord();
    }

    #endif

    public List<double> get_tcp_pose_coord(string tool, string wobj)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tcp_pose_coord(null, null, tool, wobj);
      return End_get_tcp_pose_coord(asyncResult);

      #else
      send_get_tcp_pose_coord(tool, wobj);
      return recv_get_tcp_pose_coord();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tcp_pose_coord(AsyncCallback callback, object state, string tool, string wobj)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_pose_coord", TMessageType.Call, seqid_));
      get_tcp_pose_coord_args args = new get_tcp_pose_coord_args();
      args.Tool = tool;
      args.Wobj = wobj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tcp_pose_coord(string tool, string wobj)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_pose_coord", TMessageType.Call, seqid_));
      get_tcp_pose_coord_args args = new get_tcp_pose_coord_args();
      args.Tool = tool;
      args.Wobj = wobj;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_tcp_pose_coord()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tcp_pose_coord_result result = new get_tcp_pose_coord_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tcp_pose_coord failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_tcp_force_tool(AsyncCallback callback, object state, string tool)
    {
      return send_get_tcp_force_tool(callback, state, tool);
    }

    public List<double> End_get_tcp_force_tool(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_tcp_force_tool();
    }

    #endif

    public List<double> get_tcp_force_tool(string tool)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_tcp_force_tool(null, null, tool);
      return End_get_tcp_force_tool(asyncResult);

      #else
      send_get_tcp_force_tool(tool);
      return recv_get_tcp_force_tool();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_tcp_force_tool(AsyncCallback callback, object state, string tool)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_force_tool", TMessageType.Call, seqid_));
      get_tcp_force_tool_args args = new get_tcp_force_tool_args();
      args.Tool = tool;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_tcp_force_tool(string tool)
    {
      oprot_.WriteMessageBegin(new TMessage("get_tcp_force_tool", TMessageType.Call, seqid_));
      get_tcp_force_tool_args args = new get_tcp_force_tool_args();
      args.Tool = tool;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<double> recv_get_tcp_force_tool()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_tcp_force_tool_result result = new get_tcp_force_tool_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_tcp_force_tool failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_restart(AsyncCallback callback, object state, bool block)
    {
      return send_restart(callback, state, block);
    }

    public int End_restart(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_restart();
    }

    #endif

    public int restart(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_restart(null, null, block);
      return End_restart(asyncResult);

      #else
      send_restart(block);
      return recv_restart();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_restart(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("restart", TMessageType.Call, seqid_));
      restart_args args = new restart_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_restart(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("restart", TMessageType.Call, seqid_));
      restart_args args = new restart_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_restart()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      restart_result result = new restart_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "restart failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_servo_config(AsyncCallback callback, object state, int axis_num, int id, int @value, int qfmt, bool block)
    {
      return send_set_servo_config(callback, state, axis_num, id, @value, qfmt, block);
    }

    public int End_set_servo_config(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_servo_config();
    }

    #endif

    public int set_servo_config(int axis_num, int id, int @value, int qfmt, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_servo_config(null, null, axis_num, id, @value, qfmt, block);
      return End_set_servo_config(asyncResult);

      #else
      send_set_servo_config(axis_num, id, @value, qfmt, block);
      return recv_set_servo_config();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_servo_config(AsyncCallback callback, object state, int axis_num, int id, int @value, int qfmt, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_servo_config", TMessageType.Call, seqid_));
      set_servo_config_args args = new set_servo_config_args();
      args.Axis_num = axis_num;
      args.Id = id;
      args.Value = @value;
      args.Qfmt = qfmt;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_servo_config(int axis_num, int id, int @value, int qfmt, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_servo_config", TMessageType.Call, seqid_));
      set_servo_config_args args = new set_servo_config_args();
      args.Axis_num = axis_num;
      args.Id = id;
      args.Value = @value;
      args.Qfmt = qfmt;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_servo_config()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_servo_config_result result = new set_servo_config_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_servo_config failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_apply_servo_config(AsyncCallback callback, object state, int axis_num, bool block)
    {
      return send_apply_servo_config(callback, state, axis_num, block);
    }

    public int End_apply_servo_config(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_apply_servo_config();
    }

    #endif

    public int apply_servo_config(int axis_num, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_apply_servo_config(null, null, axis_num, block);
      return End_apply_servo_config(asyncResult);

      #else
      send_apply_servo_config(axis_num, block);
      return recv_apply_servo_config();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_apply_servo_config(AsyncCallback callback, object state, int axis_num, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("apply_servo_config", TMessageType.Call, seqid_));
      apply_servo_config_args args = new apply_servo_config_args();
      args.Axis_num = axis_num;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_apply_servo_config(int axis_num, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("apply_servo_config", TMessageType.Call, seqid_));
      apply_servo_config_args args = new apply_servo_config_args();
      args.Axis_num = axis_num;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_apply_servo_config()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      apply_servo_config_result result = new apply_servo_config_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "apply_servo_config failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_motor_pole_pair_number(AsyncCallback callback, object state)
    {
      return send_get_motor_pole_pair_number(callback, state);
    }

    public List<short> End_get_motor_pole_pair_number(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_motor_pole_pair_number();
    }

    #endif

    public List<short> get_motor_pole_pair_number()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_motor_pole_pair_number(null, null);
      return End_get_motor_pole_pair_number(asyncResult);

      #else
      send_get_motor_pole_pair_number();
      return recv_get_motor_pole_pair_number();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_motor_pole_pair_number(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_motor_pole_pair_number", TMessageType.Call, seqid_));
      get_motor_pole_pair_number_args args = new get_motor_pole_pair_number_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_motor_pole_pair_number()
    {
      oprot_.WriteMessageBegin(new TMessage("get_motor_pole_pair_number", TMessageType.Call, seqid_));
      get_motor_pole_pair_number_args args = new get_motor_pole_pair_number_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<short> recv_get_motor_pole_pair_number()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_motor_pole_pair_number_result result = new get_motor_pole_pair_number_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_motor_pole_pair_number failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_motor_stator_slots(AsyncCallback callback, object state)
    {
      return send_get_motor_stator_slots(callback, state);
    }

    public List<short> End_get_motor_stator_slots(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_motor_stator_slots();
    }

    #endif

    public List<short> get_motor_stator_slots()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_motor_stator_slots(null, null);
      return End_get_motor_stator_slots(asyncResult);

      #else
      send_get_motor_stator_slots();
      return recv_get_motor_stator_slots();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_motor_stator_slots(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_motor_stator_slots", TMessageType.Call, seqid_));
      get_motor_stator_slots_args args = new get_motor_stator_slots_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_motor_stator_slots()
    {
      oprot_.WriteMessageBegin(new TMessage("get_motor_stator_slots", TMessageType.Call, seqid_));
      get_motor_stator_slots_args args = new get_motor_stator_slots_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<short> recv_get_motor_stator_slots()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_motor_stator_slots_result result = new get_motor_stator_slots_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_motor_stator_slots failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_axis_ratio(AsyncCallback callback, object state)
    {
      return send_get_axis_ratio(callback, state);
    }

    public List<short> End_get_axis_ratio(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_axis_ratio();
    }

    #endif

    public List<short> get_axis_ratio()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_axis_ratio(null, null);
      return End_get_axis_ratio(asyncResult);

      #else
      send_get_axis_ratio();
      return recv_get_axis_ratio();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_axis_ratio(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_axis_ratio", TMessageType.Call, seqid_));
      get_axis_ratio_args args = new get_axis_ratio_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_axis_ratio()
    {
      oprot_.WriteMessageBegin(new TMessage("get_axis_ratio", TMessageType.Call, seqid_));
      get_axis_ratio_args args = new get_axis_ratio_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<short> recv_get_axis_ratio()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_axis_ratio_result result = new get_axis_ratio_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_axis_ratio failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_collision_detection_reset(AsyncCallback callback, object state)
    {
      return send_collision_detection_reset(callback, state);
    }

    public int End_collision_detection_reset(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_collision_detection_reset();
    }

    #endif

    public int collision_detection_reset()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_collision_detection_reset(null, null);
      return End_collision_detection_reset(asyncResult);

      #else
      send_collision_detection_reset();
      return recv_collision_detection_reset();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_collision_detection_reset(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("collision_detection_reset", TMessageType.Call, seqid_));
      collision_detection_reset_args args = new collision_detection_reset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_collision_detection_reset()
    {
      oprot_.WriteMessageBegin(new TMessage("collision_detection_reset", TMessageType.Call, seqid_));
      collision_detection_reset_args args = new collision_detection_reset_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_collision_detection_reset()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      collision_detection_reset_result result = new collision_detection_reset_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "collision_detection_reset failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_servo_file_params(AsyncCallback callback, object state, int axis_num, int id, string name, double @value, double qfmt)
    {
      return send_set_servo_file_params(callback, state, axis_num, id, name, @value, qfmt);
    }

    public int End_set_servo_file_params(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_servo_file_params();
    }

    #endif

    public int set_servo_file_params(int axis_num, int id, string name, double @value, double qfmt)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_servo_file_params(null, null, axis_num, id, name, @value, qfmt);
      return End_set_servo_file_params(asyncResult);

      #else
      send_set_servo_file_params(axis_num, id, name, @value, qfmt);
      return recv_set_servo_file_params();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_servo_file_params(AsyncCallback callback, object state, int axis_num, int id, string name, double @value, double qfmt)
    {
      oprot_.WriteMessageBegin(new TMessage("set_servo_file_params", TMessageType.Call, seqid_));
      set_servo_file_params_args args = new set_servo_file_params_args();
      args.Axis_num = axis_num;
      args.Id = id;
      args.Name = name;
      args.Value = @value;
      args.Qfmt = qfmt;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_servo_file_params(int axis_num, int id, string name, double @value, double qfmt)
    {
      oprot_.WriteMessageBegin(new TMessage("set_servo_file_params", TMessageType.Call, seqid_));
      set_servo_file_params_args args = new set_servo_file_params_args();
      args.Axis_num = axis_num;
      args.Id = id;
      args.Name = name;
      args.Value = @value;
      args.Qfmt = qfmt;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_servo_file_params()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_servo_file_params_result result = new set_servo_file_params_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_servo_file_params failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_combine_motion_config(AsyncCallback callback, object state, int type, int ref_plane, int fq, int amp, int el_offset, int az_offset, int up_height, List<int> time, List<Op> op_list)
    {
      return send_combine_motion_config(callback, state, type, ref_plane, fq, amp, el_offset, az_offset, up_height, time, op_list);
    }

    public int End_combine_motion_config(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_combine_motion_config();
    }

    #endif

    public int combine_motion_config(int type, int ref_plane, int fq, int amp, int el_offset, int az_offset, int up_height, List<int> time, List<Op> op_list)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_combine_motion_config(null, null, type, ref_plane, fq, amp, el_offset, az_offset, up_height, time, op_list);
      return End_combine_motion_config(asyncResult);

      #else
      send_combine_motion_config(type, ref_plane, fq, amp, el_offset, az_offset, up_height, time, op_list);
      return recv_combine_motion_config();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_combine_motion_config(AsyncCallback callback, object state, int type, int ref_plane, int fq, int amp, int el_offset, int az_offset, int up_height, List<int> time, List<Op> op_list)
    {
      oprot_.WriteMessageBegin(new TMessage("combine_motion_config", TMessageType.Call, seqid_));
      combine_motion_config_args args = new combine_motion_config_args();
      args.Type = type;
      args.Ref_plane = ref_plane;
      args.Fq = fq;
      args.Amp = amp;
      args.El_offset = el_offset;
      args.Az_offset = az_offset;
      args.Up_height = up_height;
      args.Time = time;
      args.Op_list = op_list;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_combine_motion_config(int type, int ref_plane, int fq, int amp, int el_offset, int az_offset, int up_height, List<int> time, List<Op> op_list)
    {
      oprot_.WriteMessageBegin(new TMessage("combine_motion_config", TMessageType.Call, seqid_));
      combine_motion_config_args args = new combine_motion_config_args();
      args.Type = type;
      args.Ref_plane = ref_plane;
      args.Fq = fq;
      args.Amp = amp;
      args.El_offset = el_offset;
      args.Az_offset = az_offset;
      args.Up_height = up_height;
      args.Time = time;
      args.Op_list = op_list;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_combine_motion_config()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      combine_motion_config_result result = new combine_motion_config_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "combine_motion_config failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_eaxis_param(AsyncCallback callback, object state, int num, EAxisParam param, bool block)
    {
      return send_set_eaxis_param(callback, state, num, param, block);
    }

    public int End_set_eaxis_param(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_eaxis_param();
    }

    #endif

    public int set_eaxis_param(int num, EAxisParam param, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_eaxis_param(null, null, num, param, block);
      return End_set_eaxis_param(asyncResult);

      #else
      send_set_eaxis_param(num, param, block);
      return recv_set_eaxis_param();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_eaxis_param(AsyncCallback callback, object state, int num, EAxisParam param, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_eaxis_param", TMessageType.Call, seqid_));
      set_eaxis_param_args args = new set_eaxis_param_args();
      args.Num = num;
      args.Param = param;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_eaxis_param(int num, EAxisParam param, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_eaxis_param", TMessageType.Call, seqid_));
      set_eaxis_param_args args = new set_eaxis_param_args();
      args.Num = num;
      args.Param = param;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_eaxis_param()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_eaxis_param_result result = new set_eaxis_param_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_eaxis_param failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_add_eaxis_scheme(AsyncCallback callback, object state, int num, bool block)
    {
      return send_add_eaxis_scheme(callback, state, num, block);
    }

    public int End_add_eaxis_scheme(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_add_eaxis_scheme();
    }

    #endif

    public int add_eaxis_scheme(int num, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_add_eaxis_scheme(null, null, num, block);
      return End_add_eaxis_scheme(asyncResult);

      #else
      send_add_eaxis_scheme(num, block);
      return recv_add_eaxis_scheme();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_add_eaxis_scheme(AsyncCallback callback, object state, int num, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("add_eaxis_scheme", TMessageType.Call, seqid_));
      add_eaxis_scheme_args args = new add_eaxis_scheme_args();
      args.Num = num;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_add_eaxis_scheme(int num, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("add_eaxis_scheme", TMessageType.Call, seqid_));
      add_eaxis_scheme_args args = new add_eaxis_scheme_args();
      args.Num = num;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_add_eaxis_scheme()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      add_eaxis_scheme_result result = new add_eaxis_scheme_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_eaxis_scheme failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_delete_eaxis_scheme(AsyncCallback callback, object state, int num, bool block)
    {
      return send_delete_eaxis_scheme(callback, state, num, block);
    }

    public int End_delete_eaxis_scheme(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_delete_eaxis_scheme();
    }

    #endif

    public int delete_eaxis_scheme(int num, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_delete_eaxis_scheme(null, null, num, block);
      return End_delete_eaxis_scheme(asyncResult);

      #else
      send_delete_eaxis_scheme(num, block);
      return recv_delete_eaxis_scheme();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_delete_eaxis_scheme(AsyncCallback callback, object state, int num, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("delete_eaxis_scheme", TMessageType.Call, seqid_));
      delete_eaxis_scheme_args args = new delete_eaxis_scheme_args();
      args.Num = num;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_delete_eaxis_scheme(int num, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("delete_eaxis_scheme", TMessageType.Call, seqid_));
      delete_eaxis_scheme_args args = new delete_eaxis_scheme_args();
      args.Num = num;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_delete_eaxis_scheme()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      delete_eaxis_scheme_result result = new delete_eaxis_scheme_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "delete_eaxis_scheme failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_enable_eaxis_scheme(AsyncCallback callback, object state, string scheme_name)
    {
      return send_enable_eaxis_scheme(callback, state, scheme_name);
    }

    public int End_enable_eaxis_scheme(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_enable_eaxis_scheme();
    }

    #endif

    public int enable_eaxis_scheme(string scheme_name)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_enable_eaxis_scheme(null, null, scheme_name);
      return End_enable_eaxis_scheme(asyncResult);

      #else
      send_enable_eaxis_scheme(scheme_name);
      return recv_enable_eaxis_scheme();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_enable_eaxis_scheme(AsyncCallback callback, object state, string scheme_name)
    {
      oprot_.WriteMessageBegin(new TMessage("enable_eaxis_scheme", TMessageType.Call, seqid_));
      enable_eaxis_scheme_args args = new enable_eaxis_scheme_args();
      args.Scheme_name = scheme_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_enable_eaxis_scheme(string scheme_name)
    {
      oprot_.WriteMessageBegin(new TMessage("enable_eaxis_scheme", TMessageType.Call, seqid_));
      enable_eaxis_scheme_args args = new enable_eaxis_scheme_args();
      args.Scheme_name = scheme_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_enable_eaxis_scheme()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      enable_eaxis_scheme_result result = new enable_eaxis_scheme_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "enable_eaxis_scheme failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_disable_eaxis_scheme(AsyncCallback callback, object state, string scheme_name)
    {
      return send_disable_eaxis_scheme(callback, state, scheme_name);
    }

    public int End_disable_eaxis_scheme(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_disable_eaxis_scheme();
    }

    #endif

    public int disable_eaxis_scheme(string scheme_name)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_disable_eaxis_scheme(null, null, scheme_name);
      return End_disable_eaxis_scheme(asyncResult);

      #else
      send_disable_eaxis_scheme(scheme_name);
      return recv_disable_eaxis_scheme();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_disable_eaxis_scheme(AsyncCallback callback, object state, string scheme_name)
    {
      oprot_.WriteMessageBegin(new TMessage("disable_eaxis_scheme", TMessageType.Call, seqid_));
      disable_eaxis_scheme_args args = new disable_eaxis_scheme_args();
      args.Scheme_name = scheme_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_disable_eaxis_scheme(string scheme_name)
    {
      oprot_.WriteMessageBegin(new TMessage("disable_eaxis_scheme", TMessageType.Call, seqid_));
      disable_eaxis_scheme_args args = new disable_eaxis_scheme_args();
      args.Scheme_name = scheme_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_disable_eaxis_scheme()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disable_eaxis_scheme_result result = new disable_eaxis_scheme_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "disable_eaxis_scheme failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_eaxiss_scheme_param(AsyncCallback callback, object state, int num, EAxisSchemeParam param, bool block)
    {
      return send_set_eaxiss_scheme_param(callback, state, num, param, block);
    }

    public int End_set_eaxiss_scheme_param(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_eaxiss_scheme_param();
    }

    #endif

    public int set_eaxiss_scheme_param(int num, EAxisSchemeParam param, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_eaxiss_scheme_param(null, null, num, param, block);
      return End_set_eaxiss_scheme_param(asyncResult);

      #else
      send_set_eaxiss_scheme_param(num, param, block);
      return recv_set_eaxiss_scheme_param();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_eaxiss_scheme_param(AsyncCallback callback, object state, int num, EAxisSchemeParam param, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_eaxiss_scheme_param", TMessageType.Call, seqid_));
      set_eaxiss_scheme_param_args args = new set_eaxiss_scheme_param_args();
      args.Num = num;
      args.Param = param;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_eaxiss_scheme_param(int num, EAxisSchemeParam param, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("set_eaxiss_scheme_param", TMessageType.Call, seqid_));
      set_eaxiss_scheme_param_args args = new set_eaxiss_scheme_param_args();
      args.Num = num;
      args.Param = param;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_eaxiss_scheme_param()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_eaxiss_scheme_param_result result = new set_eaxiss_scheme_param_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_eaxiss_scheme_param failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_move_jog(AsyncCallback callback, object state, MoveJogTaskParam param, bool block)
    {
      return send_move_jog(callback, state, param, block);
    }

    public int End_move_jog(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_move_jog();
    }

    #endif

    public int move_jog(MoveJogTaskParam param, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_move_jog(null, null, param, block);
      return End_move_jog(asyncResult);

      #else
      send_move_jog(param, block);
      return recv_move_jog();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_move_jog(AsyncCallback callback, object state, MoveJogTaskParam param, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("move_jog", TMessageType.Call, seqid_));
      move_jog_args args = new move_jog_args();
      args.Param = param;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_move_jog(MoveJogTaskParam param, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("move_jog", TMessageType.Call, seqid_));
      move_jog_args args = new move_jog_args();
      args.Param = param;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_move_jog()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      move_jog_result result = new move_jog_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "move_jog failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_stop_manual_move(AsyncCallback callback, object state, bool block)
    {
      return send_stop_manual_move(callback, state, block);
    }

    public int End_stop_manual_move(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_stop_manual_move();
    }

    #endif

    public int stop_manual_move(bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_stop_manual_move(null, null, block);
      return End_stop_manual_move(asyncResult);

      #else
      send_stop_manual_move(block);
      return recv_stop_manual_move();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_stop_manual_move(AsyncCallback callback, object state, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("stop_manual_move", TMessageType.Call, seqid_));
      stop_manual_move_args args = new stop_manual_move_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_stop_manual_move(bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("stop_manual_move", TMessageType.Call, seqid_));
      stop_manual_move_args args = new stop_manual_move_args();
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_stop_manual_move()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      stop_manual_move_result result = new stop_manual_move_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "stop_manual_move failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_robot_version(AsyncCallback callback, object state)
    {
      return send_get_robot_version(callback, state);
    }

    public string End_get_robot_version(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_robot_version();
    }

    #endif

    public string get_robot_version()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_robot_version(null, null);
      return End_get_robot_version(asyncResult);

      #else
      send_get_robot_version();
      return recv_get_robot_version();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_robot_version(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_robot_version", TMessageType.Call, seqid_));
      get_robot_version_args args = new get_robot_version_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_robot_version()
    {
      oprot_.WriteMessageBegin(new TMessage("get_robot_version", TMessageType.Call, seqid_));
      get_robot_version_args args = new get_robot_version_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_get_robot_version()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_robot_version_result result = new get_robot_version_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_robot_version failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_teach_pendant(AsyncCallback callback, object state, bool enable)
    {
      return send_set_teach_pendant(callback, state, enable);
    }

    public int End_set_teach_pendant(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_teach_pendant();
    }

    #endif

    public int set_teach_pendant(bool enable)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_teach_pendant(null, null, enable);
      return End_set_teach_pendant(asyncResult);

      #else
      send_set_teach_pendant(enable);
      return recv_set_teach_pendant();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_teach_pendant(AsyncCallback callback, object state, bool enable)
    {
      oprot_.WriteMessageBegin(new TMessage("set_teach_pendant", TMessageType.Call, seqid_));
      set_teach_pendant_args args = new set_teach_pendant_args();
      args.Enable = enable;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_teach_pendant(bool enable)
    {
      oprot_.WriteMessageBegin(new TMessage("set_teach_pendant", TMessageType.Call, seqid_));
      set_teach_pendant_args args = new set_teach_pendant_args();
      args.Enable = enable;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_teach_pendant()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_teach_pendant_result result = new set_teach_pendant_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_teach_pendant failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_teach_speed(AsyncCallback callback, object state)
    {
      return send_get_teach_speed(callback, state);
    }

    public int End_get_teach_speed(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_teach_speed();
    }

    #endif

    public int get_teach_speed()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_teach_speed(null, null);
      return End_get_teach_speed(asyncResult);

      #else
      send_get_teach_speed();
      return recv_get_teach_speed();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_teach_speed(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_teach_speed", TMessageType.Call, seqid_));
      get_teach_speed_args args = new get_teach_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_teach_speed()
    {
      oprot_.WriteMessageBegin(new TMessage("get_teach_speed", TMessageType.Call, seqid_));
      get_teach_speed_args args = new get_teach_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_get_teach_speed()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_teach_speed_result result = new get_teach_speed_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_teach_speed failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_global_speed(AsyncCallback callback, object state)
    {
      return send_get_global_speed(callback, state);
    }

    public int End_get_global_speed(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_global_speed();
    }

    #endif

    public int get_global_speed()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_global_speed(null, null);
      return End_get_global_speed(asyncResult);

      #else
      send_get_global_speed();
      return recv_get_global_speed();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_global_speed(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_global_speed", TMessageType.Call, seqid_));
      get_global_speed_args args = new get_global_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_global_speed()
    {
      oprot_.WriteMessageBegin(new TMessage("get_global_speed", TMessageType.Call, seqid_));
      get_global_speed_args args = new get_global_speed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_get_global_speed()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_global_speed_result result = new get_global_speed_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_global_speed failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_teach_speed(AsyncCallback callback, object state, int v)
    {
      return send_set_teach_speed(callback, state, v);
    }

    public int End_set_teach_speed(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_teach_speed();
    }

    #endif

    public int set_teach_speed(int v)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_teach_speed(null, null, v);
      return End_set_teach_speed(asyncResult);

      #else
      send_set_teach_speed(v);
      return recv_set_teach_speed();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_teach_speed(AsyncCallback callback, object state, int v)
    {
      oprot_.WriteMessageBegin(new TMessage("set_teach_speed", TMessageType.Call, seqid_));
      set_teach_speed_args args = new set_teach_speed_args();
      args.V = v;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_teach_speed(int v)
    {
      oprot_.WriteMessageBegin(new TMessage("set_teach_speed", TMessageType.Call, seqid_));
      set_teach_speed_args args = new set_teach_speed_args();
      args.V = v;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_teach_speed()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_teach_speed_result result = new set_teach_speed_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_teach_speed failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_enable_combine_motion(AsyncCallback callback, object state)
    {
      return send_enable_combine_motion(callback, state);
    }

    public int End_enable_combine_motion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_enable_combine_motion();
    }

    #endif

    public int enable_combine_motion()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_enable_combine_motion(null, null);
      return End_enable_combine_motion(asyncResult);

      #else
      send_enable_combine_motion();
      return recv_enable_combine_motion();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_enable_combine_motion(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("enable_combine_motion", TMessageType.Call, seqid_));
      enable_combine_motion_args args = new enable_combine_motion_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_enable_combine_motion()
    {
      oprot_.WriteMessageBegin(new TMessage("enable_combine_motion", TMessageType.Call, seqid_));
      enable_combine_motion_args args = new enable_combine_motion_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_enable_combine_motion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      enable_combine_motion_result result = new enable_combine_motion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "enable_combine_motion failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_disable_combine_motion(AsyncCallback callback, object state)
    {
      return send_disable_combine_motion(callback, state);
    }

    public int End_disable_combine_motion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_disable_combine_motion();
    }

    #endif

    public int disable_combine_motion()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_disable_combine_motion(null, null);
      return End_disable_combine_motion(asyncResult);

      #else
      send_disable_combine_motion();
      return recv_disable_combine_motion();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_disable_combine_motion(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("disable_combine_motion", TMessageType.Call, seqid_));
      disable_combine_motion_args args = new disable_combine_motion_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_disable_combine_motion()
    {
      oprot_.WriteMessageBegin(new TMessage("disable_combine_motion", TMessageType.Call, seqid_));
      disable_combine_motion_args args = new disable_combine_motion_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_disable_combine_motion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disable_combine_motion_result result = new disable_combine_motion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "disable_combine_motion failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_enable_singularity_control(AsyncCallback callback, object state)
    {
      return send_enable_singularity_control(callback, state);
    }

    public int End_enable_singularity_control(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_enable_singularity_control();
    }

    #endif

    public int enable_singularity_control()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_enable_singularity_control(null, null);
      return End_enable_singularity_control(asyncResult);

      #else
      send_enable_singularity_control();
      return recv_enable_singularity_control();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_enable_singularity_control(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("enable_singularity_control", TMessageType.Call, seqid_));
      enable_singularity_control_args args = new enable_singularity_control_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_enable_singularity_control()
    {
      oprot_.WriteMessageBegin(new TMessage("enable_singularity_control", TMessageType.Call, seqid_));
      enable_singularity_control_args args = new enable_singularity_control_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_enable_singularity_control()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      enable_singularity_control_result result = new enable_singularity_control_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "enable_singularity_control failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_disable_singularity_control(AsyncCallback callback, object state)
    {
      return send_disable_singularity_control(callback, state);
    }

    public int End_disable_singularity_control(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_disable_singularity_control();
    }

    #endif

    public int disable_singularity_control()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_disable_singularity_control(null, null);
      return End_disable_singularity_control(asyncResult);

      #else
      send_disable_singularity_control();
      return recv_disable_singularity_control();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_disable_singularity_control(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("disable_singularity_control", TMessageType.Call, seqid_));
      disable_singularity_control_args args = new disable_singularity_control_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_disable_singularity_control()
    {
      oprot_.WriteMessageBegin(new TMessage("disable_singularity_control", TMessageType.Call, seqid_));
      disable_singularity_control_args args = new disable_singularity_control_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_disable_singularity_control()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disable_singularity_control_result result = new disable_singularity_control_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "disable_singularity_control failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_enable_vibration_control(AsyncCallback callback, object state)
    {
      return send_enable_vibration_control(callback, state);
    }

    public int End_enable_vibration_control(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_enable_vibration_control();
    }

    #endif

    public int enable_vibration_control()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_enable_vibration_control(null, null);
      return End_enable_vibration_control(asyncResult);

      #else
      send_enable_vibration_control();
      return recv_enable_vibration_control();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_enable_vibration_control(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("enable_vibration_control", TMessageType.Call, seqid_));
      enable_vibration_control_args args = new enable_vibration_control_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_enable_vibration_control()
    {
      oprot_.WriteMessageBegin(new TMessage("enable_vibration_control", TMessageType.Call, seqid_));
      enable_vibration_control_args args = new enable_vibration_control_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_enable_vibration_control()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      enable_vibration_control_result result = new enable_vibration_control_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "enable_vibration_control failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_disable_vibration_control(AsyncCallback callback, object state)
    {
      return send_disable_vibration_control(callback, state);
    }

    public int End_disable_vibration_control(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_disable_vibration_control();
    }

    #endif

    public int disable_vibration_control()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_disable_vibration_control(null, null);
      return End_disable_vibration_control(asyncResult);

      #else
      send_disable_vibration_control();
      return recv_disable_vibration_control();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_disable_vibration_control(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("disable_vibration_control", TMessageType.Call, seqid_));
      disable_vibration_control_args args = new disable_vibration_control_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_disable_vibration_control()
    {
      oprot_.WriteMessageBegin(new TMessage("disable_vibration_control", TMessageType.Call, seqid_));
      disable_vibration_control_args args = new disable_vibration_control_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_disable_vibration_control()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disable_vibration_control_result result = new disable_vibration_control_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "disable_vibration_control failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_move_eaxis(AsyncCallback callback, object state, string scheme_name, List<double> epose, double v, bool block, Op op)
    {
      return send_move_eaxis(callback, state, scheme_name, epose, v, block, op);
    }

    public int End_move_eaxis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_move_eaxis();
    }

    #endif

    public int move_eaxis(string scheme_name, List<double> epose, double v, bool block, Op op)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_move_eaxis(null, null, scheme_name, epose, v, block, op);
      return End_move_eaxis(asyncResult);

      #else
      send_move_eaxis(scheme_name, epose, v, block, op);
      return recv_move_eaxis();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_move_eaxis(AsyncCallback callback, object state, string scheme_name, List<double> epose, double v, bool block, Op op)
    {
      oprot_.WriteMessageBegin(new TMessage("move_eaxis", TMessageType.Call, seqid_));
      move_eaxis_args args = new move_eaxis_args();
      args.Scheme_name = scheme_name;
      args.Epose = epose;
      args.V = v;
      args.Block = block;
      args.Op = op;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_move_eaxis(string scheme_name, List<double> epose, double v, bool block, Op op)
    {
      oprot_.WriteMessageBegin(new TMessage("move_eaxis", TMessageType.Call, seqid_));
      move_eaxis_args args = new move_eaxis_args();
      args.Scheme_name = scheme_name;
      args.Epose = epose;
      args.V = v;
      args.Block = block;
      args.Op = op;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_move_eaxis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      move_eaxis_result result = new move_eaxis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "move_eaxis failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_movej2_eaxis(AsyncCallback callback, object state, List<double> joints_list, double v, double a, double rad, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      return send_movej2_eaxis(callback, state, joints_list, v, a, rad, scheme_name, epose, eaxis_v, block, op, def_acc);
    }

    public int End_movej2_eaxis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_movej2_eaxis();
    }

    #endif

    public int movej2_eaxis(List<double> joints_list, double v, double a, double rad, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_movej2_eaxis(null, null, joints_list, v, a, rad, scheme_name, epose, eaxis_v, block, op, def_acc);
      return End_movej2_eaxis(asyncResult);

      #else
      send_movej2_eaxis(joints_list, v, a, rad, scheme_name, epose, eaxis_v, block, op, def_acc);
      return recv_movej2_eaxis();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_movej2_eaxis(AsyncCallback callback, object state, List<double> joints_list, double v, double a, double rad, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej2_eaxis", TMessageType.Call, seqid_));
      movej2_eaxis_args args = new movej2_eaxis_args();
      args.Joints_list = joints_list;
      args.V = v;
      args.A = a;
      args.Rad = rad;
      args.Scheme_name = scheme_name;
      args.Epose = epose;
      args.Eaxis_v = eaxis_v;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_movej2_eaxis(List<double> joints_list, double v, double a, double rad, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej2_eaxis", TMessageType.Call, seqid_));
      movej2_eaxis_args args = new movej2_eaxis_args();
      args.Joints_list = joints_list;
      args.V = v;
      args.A = a;
      args.Rad = rad;
      args.Scheme_name = scheme_name;
      args.Epose = epose;
      args.Eaxis_v = eaxis_v;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_movej2_eaxis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      movej2_eaxis_result result = new movej2_eaxis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "movej2_eaxis failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_movej2_pose_eaxis(AsyncCallback callback, object state, List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      return send_movej2_pose_eaxis(callback, state, p, v, a, rad, qnear, tool, wobj, scheme_name, epose, eaxis_v, block, op, def_acc);
    }

    public int End_movej2_pose_eaxis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_movej2_pose_eaxis();
    }

    #endif

    public int movej2_pose_eaxis(List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_movej2_pose_eaxis(null, null, p, v, a, rad, qnear, tool, wobj, scheme_name, epose, eaxis_v, block, op, def_acc);
      return End_movej2_pose_eaxis(asyncResult);

      #else
      send_movej2_pose_eaxis(p, v, a, rad, qnear, tool, wobj, scheme_name, epose, eaxis_v, block, op, def_acc);
      return recv_movej2_pose_eaxis();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_movej2_pose_eaxis(AsyncCallback callback, object state, List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej2_pose_eaxis", TMessageType.Call, seqid_));
      movej2_pose_eaxis_args args = new movej2_pose_eaxis_args();
      args.P = p;
      args.V = v;
      args.A = a;
      args.Rad = rad;
      args.Qnear = qnear;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Scheme_name = scheme_name;
      args.Epose = epose;
      args.Eaxis_v = eaxis_v;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_movej2_pose_eaxis(List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movej2_pose_eaxis", TMessageType.Call, seqid_));
      movej2_pose_eaxis_args args = new movej2_pose_eaxis_args();
      args.P = p;
      args.V = v;
      args.A = a;
      args.Rad = rad;
      args.Qnear = qnear;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Scheme_name = scheme_name;
      args.Epose = epose;
      args.Eaxis_v = eaxis_v;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_movej2_pose_eaxis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      movej2_pose_eaxis_result result = new movej2_pose_eaxis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "movej2_pose_eaxis failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_movel_eaxis(AsyncCallback callback, object state, List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      return send_movel_eaxis(callback, state, p, v, a, rad, qnear, tool, wobj, scheme_name, epose, eaxis_v, block, op, def_acc);
    }

    public int End_movel_eaxis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_movel_eaxis();
    }

    #endif

    public int movel_eaxis(List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_movel_eaxis(null, null, p, v, a, rad, qnear, tool, wobj, scheme_name, epose, eaxis_v, block, op, def_acc);
      return End_movel_eaxis(asyncResult);

      #else
      send_movel_eaxis(p, v, a, rad, qnear, tool, wobj, scheme_name, epose, eaxis_v, block, op, def_acc);
      return recv_movel_eaxis();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_movel_eaxis(AsyncCallback callback, object state, List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movel_eaxis", TMessageType.Call, seqid_));
      movel_eaxis_args args = new movel_eaxis_args();
      args.P = p;
      args.V = v;
      args.A = a;
      args.Rad = rad;
      args.Qnear = qnear;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Scheme_name = scheme_name;
      args.Epose = epose;
      args.Eaxis_v = eaxis_v;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_movel_eaxis(List<double> p, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movel_eaxis", TMessageType.Call, seqid_));
      movel_eaxis_args args = new movel_eaxis_args();
      args.P = p;
      args.V = v;
      args.A = a;
      args.Rad = rad;
      args.Qnear = qnear;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Scheme_name = scheme_name;
      args.Epose = epose;
      args.Eaxis_v = eaxis_v;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_movel_eaxis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      movel_eaxis_result result = new movel_eaxis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "movel_eaxis failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_movec_eaxis(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      return send_movec_eaxis(callback, state, p1, p2, v, a, rad, qnear, tool, wobj, scheme_name, epose, eaxis_v, block, op, def_acc);
    }

    public int End_movec_eaxis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_movec_eaxis();
    }

    #endif

    public int movec_eaxis(List<double> p1, List<double> p2, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_movec_eaxis(null, null, p1, p2, v, a, rad, qnear, tool, wobj, scheme_name, epose, eaxis_v, block, op, def_acc);
      return End_movec_eaxis(asyncResult);

      #else
      send_movec_eaxis(p1, p2, v, a, rad, qnear, tool, wobj, scheme_name, epose, eaxis_v, block, op, def_acc);
      return recv_movec_eaxis();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_movec_eaxis(AsyncCallback callback, object state, List<double> p1, List<double> p2, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movec_eaxis", TMessageType.Call, seqid_));
      movec_eaxis_args args = new movec_eaxis_args();
      args.P1 = p1;
      args.P2 = p2;
      args.V = v;
      args.A = a;
      args.Rad = rad;
      args.Qnear = qnear;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Scheme_name = scheme_name;
      args.Epose = epose;
      args.Eaxis_v = eaxis_v;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_movec_eaxis(List<double> p1, List<double> p2, double v, double a, double rad, List<double> qnear, string tool, string wobj, string scheme_name, List<double> epose, double eaxis_v, bool block, Op op, bool def_acc)
    {
      oprot_.WriteMessageBegin(new TMessage("movec_eaxis", TMessageType.Call, seqid_));
      movec_eaxis_args args = new movec_eaxis_args();
      args.P1 = p1;
      args.P2 = p2;
      args.V = v;
      args.A = a;
      args.Rad = rad;
      args.Qnear = qnear;
      args.Tool = tool;
      args.Wobj = wobj;
      args.Scheme_name = scheme_name;
      args.Epose = epose;
      args.Eaxis_v = eaxis_v;
      args.Block = block;
      args.Op = op;
      args.Def_acc = def_acc;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_movec_eaxis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      movec_eaxis_result result = new movec_eaxis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "movec_eaxis failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reach_check(AsyncCallback callback, object state, List<double> @base, List<double> wobj, List<double> tool, List<double> ref_pos, List<List<double>> check_points)
    {
      return send_reach_check(callback, state, @base, wobj, tool, ref_pos, check_points);
    }

    public ReachabilityParam End_reach_check(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reach_check();
    }

    #endif

    public ReachabilityParam reach_check(List<double> @base, List<double> wobj, List<double> tool, List<double> ref_pos, List<List<double>> check_points)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reach_check(null, null, @base, wobj, tool, ref_pos, check_points);
      return End_reach_check(asyncResult);

      #else
      send_reach_check(@base, wobj, tool, ref_pos, check_points);
      return recv_reach_check();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reach_check(AsyncCallback callback, object state, List<double> @base, List<double> wobj, List<double> tool, List<double> ref_pos, List<List<double>> check_points)
    {
      oprot_.WriteMessageBegin(new TMessage("reach_check", TMessageType.Call, seqid_));
      reach_check_args args = new reach_check_args();
      args.Base = @base;
      args.Wobj = wobj;
      args.Tool = tool;
      args.Ref_pos = ref_pos;
      args.Check_points = check_points;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reach_check(List<double> @base, List<double> wobj, List<double> tool, List<double> ref_pos, List<List<double>> check_points)
    {
      oprot_.WriteMessageBegin(new TMessage("reach_check", TMessageType.Call, seqid_));
      reach_check_args args = new reach_check_args();
      args.Base = @base;
      args.Wobj = wobj;
      args.Tool = tool;
      args.Ref_pos = ref_pos;
      args.Check_points = check_points;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ReachabilityParam recv_reach_check()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reach_check_result result = new reach_check_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reach_check failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_move_jog_eaxis(AsyncCallback callback, object state, string name, int direction, double vel, bool block)
    {
      return send_move_jog_eaxis(callback, state, name, direction, vel, block);
    }

    public int End_move_jog_eaxis(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_move_jog_eaxis();
    }

    #endif

    public int move_jog_eaxis(string name, int direction, double vel, bool block)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_move_jog_eaxis(null, null, name, direction, vel, block);
      return End_move_jog_eaxis(asyncResult);

      #else
      send_move_jog_eaxis(name, direction, vel, block);
      return recv_move_jog_eaxis();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_move_jog_eaxis(AsyncCallback callback, object state, string name, int direction, double vel, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("move_jog_eaxis", TMessageType.Call, seqid_));
      move_jog_eaxis_args args = new move_jog_eaxis_args();
      args.Name = name;
      args.Direction = direction;
      args.Vel = vel;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_move_jog_eaxis(string name, int direction, double vel, bool block)
    {
      oprot_.WriteMessageBegin(new TMessage("move_jog_eaxis", TMessageType.Call, seqid_));
      move_jog_eaxis_args args = new move_jog_eaxis_args();
      args.Name = name;
      args.Direction = direction;
      args.Vel = vel;
      args.Block = block;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_move_jog_eaxis()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      move_jog_eaxis_result result = new move_jog_eaxis_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "move_jog_eaxis failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_get_eaxis_info(AsyncCallback callback, object state)
    {
      return send_get_eaxis_info(callback, state);
    }

    public List<EAxissInfo> End_get_eaxis_info(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get_eaxis_info();
    }

    #endif

    public List<EAxissInfo> get_eaxis_info()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_get_eaxis_info(null, null);
      return End_get_eaxis_info(asyncResult);

      #else
      send_get_eaxis_info();
      return recv_get_eaxis_info();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get_eaxis_info(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("get_eaxis_info", TMessageType.Call, seqid_));
      get_eaxis_info_args args = new get_eaxis_info_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_get_eaxis_info()
    {
      oprot_.WriteMessageBegin(new TMessage("get_eaxis_info", TMessageType.Call, seqid_));
      get_eaxis_info_args args = new get_eaxis_info_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<EAxissInfo> recv_get_eaxis_info()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_eaxis_info_result result = new get_eaxis_info_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_eaxis_info failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_hand_teach_parameter(AsyncCallback callback, object state, int space, int joint_scale, int cart_scale, int coord_type, List<bool> direction)
    {
      return send_set_hand_teach_parameter(callback, state, space, joint_scale, cart_scale, coord_type, direction);
    }

    public int End_set_hand_teach_parameter(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_hand_teach_parameter();
    }

    #endif

    public int set_hand_teach_parameter(int space, int joint_scale, int cart_scale, int coord_type, List<bool> direction)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_hand_teach_parameter(null, null, space, joint_scale, cart_scale, coord_type, direction);
      return End_set_hand_teach_parameter(asyncResult);

      #else
      send_set_hand_teach_parameter(space, joint_scale, cart_scale, coord_type, direction);
      return recv_set_hand_teach_parameter();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_hand_teach_parameter(AsyncCallback callback, object state, int space, int joint_scale, int cart_scale, int coord_type, List<bool> direction)
    {
      oprot_.WriteMessageBegin(new TMessage("set_hand_teach_parameter", TMessageType.Call, seqid_));
      set_hand_teach_parameter_args args = new set_hand_teach_parameter_args();
      args.Space = space;
      args.Joint_scale = joint_scale;
      args.Cart_scale = cart_scale;
      args.Coord_type = coord_type;
      args.Direction = direction;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_hand_teach_parameter(int space, int joint_scale, int cart_scale, int coord_type, List<bool> direction)
    {
      oprot_.WriteMessageBegin(new TMessage("set_hand_teach_parameter", TMessageType.Call, seqid_));
      set_hand_teach_parameter_args args = new set_hand_teach_parameter_args();
      args.Space = space;
      args.Joint_scale = joint_scale;
      args.Cart_scale = cart_scale;
      args.Coord_type = coord_type;
      args.Direction = direction;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_hand_teach_parameter()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_hand_teach_parameter_result result = new set_hand_teach_parameter_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_hand_teach_parameter failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_pendant_type(AsyncCallback callback, object state, int type)
    {
      return send_set_pendant_type(callback, state, type);
    }

    public int End_set_pendant_type(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_pendant_type();
    }

    #endif

    public int set_pendant_type(int type)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_pendant_type(null, null, type);
      return End_set_pendant_type(asyncResult);

      #else
      send_set_pendant_type(type);
      return recv_set_pendant_type();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_pendant_type(AsyncCallback callback, object state, int type)
    {
      oprot_.WriteMessageBegin(new TMessage("set_pendant_type", TMessageType.Call, seqid_));
      set_pendant_type_args args = new set_pendant_type_args();
      args.Type = type;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_pendant_type(int type)
    {
      oprot_.WriteMessageBegin(new TMessage("set_pendant_type", TMessageType.Call, seqid_));
      set_pendant_type_args args = new set_pendant_type_args();
      args.Type = type;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_pendant_type()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_pendant_type_result result = new set_pendant_type_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_pendant_type failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_set_blend_ahead(AsyncCallback callback, object state, int per)
    {
      return send_set_blend_ahead(callback, state, per);
    }

    public int End_set_blend_ahead(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_set_blend_ahead();
    }

    #endif

    public int set_blend_ahead(int per)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_set_blend_ahead(null, null, per);
      return End_set_blend_ahead(asyncResult);

      #else
      send_set_blend_ahead(per);
      return recv_set_blend_ahead();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_set_blend_ahead(AsyncCallback callback, object state, int per)
    {
      oprot_.WriteMessageBegin(new TMessage("set_blend_ahead", TMessageType.Call, seqid_));
      set_blend_ahead_args args = new set_blend_ahead_args();
      args.Per = per;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_set_blend_ahead(int per)
    {
      oprot_.WriteMessageBegin(new TMessage("set_blend_ahead", TMessageType.Call, seqid_));
      set_blend_ahead_args args = new set_blend_ahead_args();
      args.Per = per;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_set_blend_ahead()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      set_blend_ahead_result result = new set_blend_ahead_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "set_blend_ahead failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["power_on"] = power_on_Process;
      processMap_["power_off"] = power_off_Process;
      processMap_["enable"] = enable_Process;
      processMap_["disable"] = disable_Process;
      processMap_["shutdown"] = shutdown_Process;
      processMap_["stop"] = stop_Process;
      processMap_["pause"] = pause_Process;
      processMap_["resume"] = resume_Process;
      processMap_["run_program"] = run_program_Process;
      processMap_["set_tool_data"] = set_tool_data_Process;
      processMap_["get_tool_load"] = get_tool_load_Process;
      processMap_["get_tcp_offset"] = get_tcp_offset_Process;
      processMap_["set_wobj"] = set_wobj_Process;
      processMap_["set_wobj_offset"] = set_wobj_offset_Process;
      processMap_["get_wobj"] = get_wobj_Process;
      processMap_["cal_fkine"] = cal_fkine_Process;
      processMap_["cal_ikine"] = cal_ikine_Process;
      processMap_["set_digital_output_mode"] = set_digital_output_mode_Process;
      processMap_["set_standard_digital_out"] = set_standard_digital_out_Process;
      processMap_["set_tool_digital_out"] = set_tool_digital_out_Process;
      processMap_["get_standard_digital_in"] = get_standard_digital_in_Process;
      processMap_["get_standard_digital_out"] = get_standard_digital_out_Process;
      processMap_["get_tool_digital_in"] = get_tool_digital_in_Process;
      processMap_["get_tool_digital_out"] = get_tool_digital_out_Process;
      processMap_["get_config_digital_in"] = get_config_digital_in_Process;
      processMap_["get_standard_analog_voltage_in"] = get_standard_analog_voltage_in_Process;
      processMap_["get_tool_analog_voltage_in"] = get_tool_analog_voltage_in_Process;
      processMap_["get_standard_analog_current_in"] = get_standard_analog_current_in_Process;
      processMap_["set_standard_analog_voltage_out"] = set_standard_analog_voltage_out_Process;
      processMap_["set_standard_analog_current_out"] = set_standard_analog_current_out_Process;
      processMap_["read_data_485"] = read_data_485_Process;
      processMap_["read_raw_data_485"] = read_raw_data_485_Process;
      processMap_["read_raw_data_485_ht"] = read_raw_data_485_ht_Process;
      processMap_["read_raw_data_485_h"] = read_raw_data_485_h_Process;
      processMap_["write_data_485"] = write_data_485_Process;
      processMap_["write_raw_data_485"] = write_raw_data_485_Process;
      processMap_["write_raw_data_485_h"] = write_raw_data_485_h_Process;
      processMap_["write_raw_data_485_ht"] = write_raw_data_485_ht_Process;
      processMap_["tool_read_data_485"] = tool_read_data_485_Process;
      processMap_["tool_read_raw_data_485"] = tool_read_raw_data_485_Process;
      processMap_["tool_read_raw_data_485_h"] = tool_read_raw_data_485_h_Process;
      processMap_["tool_read_raw_data_485_ht"] = tool_read_raw_data_485_ht_Process;
      processMap_["tool_write_data_485"] = tool_write_data_485_Process;
      processMap_["tool_write_raw_data_485"] = tool_write_raw_data_485_Process;
      processMap_["tool_write_raw_data_485_h"] = tool_write_raw_data_485_h_Process;
      processMap_["tool_write_raw_data_485_ht"] = tool_write_raw_data_485_ht_Process;
      processMap_["read_data_can"] = read_data_can_Process;
      processMap_["read_raw_data_can"] = read_raw_data_can_Process;
      processMap_["write_data_can"] = write_data_can_Process;
      processMap_["write_raw_data_can"] = write_raw_data_can_Process;
      processMap_["get_function_digital_in"] = get_function_digital_in_Process;
      processMap_["get_function_digital_out"] = get_function_digital_out_Process;
      processMap_["read_bool_reg"] = read_bool_reg_Process;
      processMap_["read_word_reg"] = read_word_reg_Process;
      processMap_["read_float_reg"] = read_float_reg_Process;
      processMap_["write_bool_reg"] = write_bool_reg_Process;
      processMap_["write_word_reg"] = write_word_reg_Process;
      processMap_["write_float_reg"] = write_float_reg_Process;
      processMap_["get_function_reg_in"] = get_function_reg_in_Process;
      processMap_["get_function_reg_out"] = get_function_reg_out_Process;
      processMap_["movej"] = movej_Process;
      processMap_["movej_pose"] = movej_pose_Process;
      processMap_["movej2"] = movej2_Process;
      processMap_["movej_pose2"] = movej_pose2_Process;
      processMap_["movel"] = movel_Process;
      processMap_["movec"] = movec_Process;
      processMap_["move_circle"] = move_circle_Process;
      processMap_["tcp_move"] = tcp_move_Process;
      processMap_["tcp_move_2p"] = tcp_move_2p_Process;
      processMap_["spline"] = spline_Process;
      processMap_["speedj"] = speedj_Process;
      processMap_["speedl"] = speedl_Process;
      processMap_["speed_stop"] = speed_stop_Process;
      processMap_["servoj"] = servoj_Process;
      processMap_["servoj_pose"] = servoj_pose_Process;
      processMap_["servo_tcp"] = servo_tcp_Process;
      processMap_["teach_mode"] = teach_mode_Process;
      processMap_["end_teach_mode"] = end_teach_mode_Process;
      processMap_["modbus_add_signal"] = modbus_add_signal_Process;
      processMap_["modbus_delete_signal"] = modbus_delete_signal_Process;
      processMap_["modbus_read"] = modbus_read_Process;
      processMap_["modbus_write"] = modbus_write_Process;
      processMap_["modbus_set_frequency"] = modbus_set_frequency_Process;
      processMap_["get_last_error"] = get_last_error_Process;
      processMap_["get_noneblock_taskstate"] = get_noneblock_taskstate_Process;
      processMap_["log_info"] = log_info_Process;
      processMap_["log_error"] = log_error_Process;
      processMap_["simulation"] = simulation_Process;
      processMap_["speed"] = speed_Process;
      processMap_["get_robot_state"] = get_robot_state_Process;
      processMap_["get_flange_pose"] = get_flange_pose_Process;
      processMap_["get_flange_speed"] = get_flange_speed_Process;
      processMap_["get_flange_acceleration"] = get_flange_acceleration_Process;
      processMap_["get_tcp_pose"] = get_tcp_pose_Process;
      processMap_["get_tcp_speed"] = get_tcp_speed_Process;
      processMap_["get_tcp_acceleration"] = get_tcp_acceleration_Process;
      processMap_["get_tcp_force"] = get_tcp_force_Process;
      processMap_["get_actual_joints_position"] = get_actual_joints_position_Process;
      processMap_["get_target_joints_position"] = get_target_joints_position_Process;
      processMap_["get_actual_joints_speed"] = get_actual_joints_speed_Process;
      processMap_["get_target_joints_speed"] = get_target_joints_speed_Process;
      processMap_["get_actual_joints_acceleration"] = get_actual_joints_acceleration_Process;
      processMap_["get_target_joints_acceleration"] = get_target_joints_acceleration_Process;
      processMap_["get_actual_joints_torque"] = get_actual_joints_torque_Process;
      processMap_["get_target_joints_torque"] = get_target_joints_torque_Process;
      processMap_["stop_record_track"] = stop_record_track_Process;
      processMap_["start_record_track"] = start_record_track_Process;
      processMap_["collision_detect"] = collision_detect_Process;
      processMap_["replay"] = replay_Process;
      processMap_["set_load_data"] = set_load_data_Process;
      processMap_["fc_start"] = fc_start_Process;
      processMap_["fc_stop"] = fc_stop_Process;
      processMap_["fc_config"] = fc_config_Process;
      processMap_["fc_move"] = fc_move_Process;
      processMap_["fc_guard_act"] = fc_guard_act_Process;
      processMap_["fc_guard_deact"] = fc_guard_deact_Process;
      processMap_["fc_force_set_value"] = fc_force_set_value_Process;
      processMap_["fc_wait_pos"] = fc_wait_pos_Process;
      processMap_["fc_wait_vel"] = fc_wait_vel_Process;
      processMap_["fc_wait_ft"] = fc_wait_ft_Process;
      processMap_["fc_wait_logic"] = fc_wait_logic_Process;
      processMap_["fc_get_ft"] = fc_get_ft_Process;
      processMap_["fc_mode_is_active"] = fc_mode_is_active_Process;
      processMap_["start_realtime_mode"] = start_realtime_mode_Process;
      processMap_["end_realtime_mode"] = end_realtime_mode_Process;
      processMap_["realtime_data_enqueue"] = realtime_data_enqueue_Process;
      processMap_["clear_realtime_data_queue"] = clear_realtime_data_queue_Process;
      processMap_["get_realtime_data_queue_size"] = get_realtime_data_queue_size_Process;
      processMap_["enable_speed_optimization"] = enable_speed_optimization_Process;
      processMap_["disable_speed_optimization"] = disable_speed_optimization_Process;
      processMap_["change_recipe"] = change_recipe_Process;
      processMap_["set_system_value_bool"] = set_system_value_bool_Process;
      processMap_["set_system_value_double"] = set_system_value_double_Process;
      processMap_["set_system_value_str"] = set_system_value_str_Process;
      processMap_["set_system_value_list"] = set_system_value_list_Process;
      processMap_["get_system_value_bool"] = get_system_value_bool_Process;
      processMap_["get_system_value_double"] = get_system_value_double_Process;
      processMap_["get_system_value_str"] = get_system_value_str_Process;
      processMap_["get_system_value_list"] = get_system_value_list_Process;
      processMap_["trackEnqueue"] = trackEnqueue_Process;
      processMap_["trackClearQueue"] = trackClearQueue_Process;
      processMap_["getQueueSize"] = getQueueSize_Process;
      processMap_["trackJointMotion"] = trackJointMotion_Process;
      processMap_["trackCartMotion"] = trackCartMotion_Process;
      processMap_["rpc_heartbeat"] = rpc_heartbeat_Process;
      processMap_["move_spiral"] = move_spiral_Process;
      processMap_["enable_acc_optimization"] = enable_acc_optimization_Process;
      processMap_["disable_acc_optimization"] = disable_acc_optimization_Process;
      processMap_["set_baudrate_485"] = set_baudrate_485_Process;
      processMap_["set_baudrate_can"] = set_baudrate_can_Process;
      processMap_["set_analog_output_mode"] = set_analog_output_mode_Process;
      processMap_["robotmoving"] = robotmoving_Process;
      processMap_["modbus_write_multiple_coils"] = modbus_write_multiple_coils_Process;
      processMap_["modbus_write_multiple_regs"] = modbus_write_multiple_regs_Process;
      processMap_["get_current_project"] = get_current_project_Process;
      processMap_["get_files_list"] = get_files_list_Process;
      processMap_["getRobotStatus"] = getRobotStatus_Process;
      processMap_["getRobotIOStatus"] = getRobotIOStatus_Process;
      processMap_["get_tcp_pose_coord"] = get_tcp_pose_coord_Process;
      processMap_["get_tcp_force_tool"] = get_tcp_force_tool_Process;
      processMap_["restart"] = restart_Process;
      processMap_["set_servo_config"] = set_servo_config_Process;
      processMap_["apply_servo_config"] = apply_servo_config_Process;
      processMap_["get_motor_pole_pair_number"] = get_motor_pole_pair_number_Process;
      processMap_["get_motor_stator_slots"] = get_motor_stator_slots_Process;
      processMap_["get_axis_ratio"] = get_axis_ratio_Process;
      processMap_["collision_detection_reset"] = collision_detection_reset_Process;
      processMap_["set_servo_file_params"] = set_servo_file_params_Process;
      processMap_["combine_motion_config"] = combine_motion_config_Process;
      processMap_["set_eaxis_param"] = set_eaxis_param_Process;
      processMap_["add_eaxis_scheme"] = add_eaxis_scheme_Process;
      processMap_["delete_eaxis_scheme"] = delete_eaxis_scheme_Process;
      processMap_["enable_eaxis_scheme"] = enable_eaxis_scheme_Process;
      processMap_["disable_eaxis_scheme"] = disable_eaxis_scheme_Process;
      processMap_["set_eaxiss_scheme_param"] = set_eaxiss_scheme_param_Process;
      processMap_["move_jog"] = move_jog_Process;
      processMap_["stop_manual_move"] = stop_manual_move_Process;
      processMap_["get_robot_version"] = get_robot_version_Process;
      processMap_["set_teach_pendant"] = set_teach_pendant_Process;
      processMap_["get_teach_speed"] = get_teach_speed_Process;
      processMap_["get_global_speed"] = get_global_speed_Process;
      processMap_["set_teach_speed"] = set_teach_speed_Process;
      processMap_["enable_combine_motion"] = enable_combine_motion_Process;
      processMap_["disable_combine_motion"] = disable_combine_motion_Process;
      processMap_["enable_singularity_control"] = enable_singularity_control_Process;
      processMap_["disable_singularity_control"] = disable_singularity_control_Process;
      processMap_["enable_vibration_control"] = enable_vibration_control_Process;
      processMap_["disable_vibration_control"] = disable_vibration_control_Process;
      processMap_["move_eaxis"] = move_eaxis_Process;
      processMap_["movej2_eaxis"] = movej2_eaxis_Process;
      processMap_["movej2_pose_eaxis"] = movej2_pose_eaxis_Process;
      processMap_["movel_eaxis"] = movel_eaxis_Process;
      processMap_["movec_eaxis"] = movec_eaxis_Process;
      processMap_["reach_check"] = reach_check_Process;
      processMap_["move_jog_eaxis"] = move_jog_eaxis_Process;
      processMap_["get_eaxis_info"] = get_eaxis_info_Process;
      processMap_["set_hand_teach_parameter"] = set_hand_teach_parameter_Process;
      processMap_["set_pendant_type"] = set_pendant_type_Process;
      processMap_["set_blend_ahead"] = set_blend_ahead_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void power_on_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      power_on_args args = new power_on_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      power_on_result result = new power_on_result();
      try
      {
        result.Success = iface_.power_on(args.Block);
        oprot.WriteMessageBegin(new TMessage("power_on", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("power_on", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void power_off_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      power_off_args args = new power_off_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      power_off_result result = new power_off_result();
      try
      {
        result.Success = iface_.power_off(args.Block);
        oprot.WriteMessageBegin(new TMessage("power_off", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("power_off", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void enable_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      enable_args args = new enable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      enable_result result = new enable_result();
      try
      {
        result.Success = iface_.enable(args.Block);
        oprot.WriteMessageBegin(new TMessage("enable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("enable", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disable_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disable_args args = new disable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disable_result result = new disable_result();
      try
      {
        result.Success = iface_.disable(args.Block);
        oprot.WriteMessageBegin(new TMessage("disable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disable", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void shutdown_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      shutdown_args args = new shutdown_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      shutdown_result result = new shutdown_result();
      try
      {
        result.Success = iface_.shutdown(args.Block);
        oprot.WriteMessageBegin(new TMessage("shutdown", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("shutdown", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void stop_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      stop_args args = new stop_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      stop_result result = new stop_result();
      try
      {
        result.Success = iface_.stop(args.Block);
        oprot.WriteMessageBegin(new TMessage("stop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("stop", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void pause_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      pause_args args = new pause_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      pause_result result = new pause_result();
      try
      {
        result.Success = iface_.pause(args.Block);
        oprot.WriteMessageBegin(new TMessage("pause", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("pause", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void resume_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      resume_args args = new resume_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      resume_result result = new resume_result();
      try
      {
        result.Success = iface_.resume(args.Block);
        oprot.WriteMessageBegin(new TMessage("resume", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("resume", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void run_program_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      run_program_args args = new run_program_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      run_program_result result = new run_program_result();
      try
      {
        result.Success = iface_.run_program(args.Name, args.Block);
        oprot.WriteMessageBegin(new TMessage("run_program", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("run_program", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_tool_data_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_tool_data_args args = new set_tool_data_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_tool_data_result result = new set_tool_data_result();
      try
      {
        result.Success = iface_.set_tool_data(args.Name, args.Tool_offset, args.Payload, args.Inertia_tensor);
        oprot.WriteMessageBegin(new TMessage("set_tool_data", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_tool_data", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tool_load_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tool_load_args args = new get_tool_load_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tool_load_result result = new get_tool_load_result();
      try
      {
        result.Success = iface_.get_tool_load();
        oprot.WriteMessageBegin(new TMessage("get_tool_load", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tool_load", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tcp_offset_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tcp_offset_args args = new get_tcp_offset_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tcp_offset_result result = new get_tcp_offset_result();
      try
      {
        result.Success = iface_.get_tcp_offset();
        oprot.WriteMessageBegin(new TMessage("get_tcp_offset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tcp_offset", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_wobj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_wobj_args args = new set_wobj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_wobj_result result = new set_wobj_result();
      try
      {
        result.Success = iface_.set_wobj(args.Name, args.Wobj);
        oprot.WriteMessageBegin(new TMessage("set_wobj", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_wobj", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_wobj_offset_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_wobj_offset_args args = new set_wobj_offset_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_wobj_offset_result result = new set_wobj_offset_result();
      try
      {
        result.Success = iface_.set_wobj_offset(args.Wobj, args.Active);
        oprot.WriteMessageBegin(new TMessage("set_wobj_offset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_wobj_offset", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_wobj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_wobj_args args = new get_wobj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_wobj_result result = new get_wobj_result();
      try
      {
        result.Success = iface_.get_wobj();
        oprot.WriteMessageBegin(new TMessage("get_wobj", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_wobj", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void cal_fkine_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      cal_fkine_args args = new cal_fkine_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      cal_fkine_result result = new cal_fkine_result();
      try
      {
        result.Success = iface_.cal_fkine(args.Joints_position, args.Tool, args.Wobj);
        oprot.WriteMessageBegin(new TMessage("cal_fkine", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("cal_fkine", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void cal_ikine_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      cal_ikine_args args = new cal_ikine_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      cal_ikine_result result = new cal_ikine_result();
      try
      {
        result.Success = iface_.cal_ikine(args.P, args.Q_near, args.Tool, args.Wobj);
        oprot.WriteMessageBegin(new TMessage("cal_ikine", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("cal_ikine", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_digital_output_mode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_digital_output_mode_args args = new set_digital_output_mode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_digital_output_mode_result result = new set_digital_output_mode_result();
      try
      {
        result.Success = iface_.set_digital_output_mode(args.Num, args.Type, args.Freq, args.Duty_cycle);
        oprot.WriteMessageBegin(new TMessage("set_digital_output_mode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_digital_output_mode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_standard_digital_out_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_standard_digital_out_args args = new set_standard_digital_out_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_standard_digital_out_result result = new set_standard_digital_out_result();
      try
      {
        result.Success = iface_.set_standard_digital_out(args.Num, args.Value, args.Block);
        oprot.WriteMessageBegin(new TMessage("set_standard_digital_out", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_standard_digital_out", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_tool_digital_out_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_tool_digital_out_args args = new set_tool_digital_out_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_tool_digital_out_result result = new set_tool_digital_out_result();
      try
      {
        result.Success = iface_.set_tool_digital_out(args.Num, args.Value, args.Block);
        oprot.WriteMessageBegin(new TMessage("set_tool_digital_out", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_tool_digital_out", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_standard_digital_in_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_standard_digital_in_args args = new get_standard_digital_in_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_standard_digital_in_result result = new get_standard_digital_in_result();
      try
      {
        result.Success = iface_.get_standard_digital_in(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_standard_digital_in", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_standard_digital_in", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_standard_digital_out_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_standard_digital_out_args args = new get_standard_digital_out_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_standard_digital_out_result result = new get_standard_digital_out_result();
      try
      {
        result.Success = iface_.get_standard_digital_out(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_standard_digital_out", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_standard_digital_out", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tool_digital_in_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tool_digital_in_args args = new get_tool_digital_in_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tool_digital_in_result result = new get_tool_digital_in_result();
      try
      {
        result.Success = iface_.get_tool_digital_in(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_tool_digital_in", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tool_digital_in", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tool_digital_out_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tool_digital_out_args args = new get_tool_digital_out_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tool_digital_out_result result = new get_tool_digital_out_result();
      try
      {
        result.Success = iface_.get_tool_digital_out(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_tool_digital_out", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tool_digital_out", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_config_digital_in_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_config_digital_in_args args = new get_config_digital_in_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_config_digital_in_result result = new get_config_digital_in_result();
      try
      {
        result.Success = iface_.get_config_digital_in(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_config_digital_in", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_config_digital_in", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_standard_analog_voltage_in_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_standard_analog_voltage_in_args args = new get_standard_analog_voltage_in_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_standard_analog_voltage_in_result result = new get_standard_analog_voltage_in_result();
      try
      {
        result.Success = iface_.get_standard_analog_voltage_in(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_standard_analog_voltage_in", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_standard_analog_voltage_in", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tool_analog_voltage_in_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tool_analog_voltage_in_args args = new get_tool_analog_voltage_in_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tool_analog_voltage_in_result result = new get_tool_analog_voltage_in_result();
      try
      {
        result.Success = iface_.get_tool_analog_voltage_in(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_tool_analog_voltage_in", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tool_analog_voltage_in", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_standard_analog_current_in_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_standard_analog_current_in_args args = new get_standard_analog_current_in_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_standard_analog_current_in_result result = new get_standard_analog_current_in_result();
      try
      {
        result.Success = iface_.get_standard_analog_current_in(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_standard_analog_current_in", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_standard_analog_current_in", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_standard_analog_voltage_out_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_standard_analog_voltage_out_args args = new set_standard_analog_voltage_out_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_standard_analog_voltage_out_result result = new set_standard_analog_voltage_out_result();
      try
      {
        result.Success = iface_.set_standard_analog_voltage_out(args.Num, args.Value, args.Block);
        oprot.WriteMessageBegin(new TMessage("set_standard_analog_voltage_out", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_standard_analog_voltage_out", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_standard_analog_current_out_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_standard_analog_current_out_args args = new set_standard_analog_current_out_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_standard_analog_current_out_result result = new set_standard_analog_current_out_result();
      try
      {
        result.Success = iface_.set_standard_analog_current_out(args.Num, args.Value, args.Block);
        oprot.WriteMessageBegin(new TMessage("set_standard_analog_current_out", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_standard_analog_current_out", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void read_data_485_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      read_data_485_args args = new read_data_485_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      read_data_485_result result = new read_data_485_result();
      try
      {
        result.Success = iface_.read_data_485();
        oprot.WriteMessageBegin(new TMessage("read_data_485", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("read_data_485", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void read_raw_data_485_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      read_raw_data_485_args args = new read_raw_data_485_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      read_raw_data_485_result result = new read_raw_data_485_result();
      try
      {
        result.Success = iface_.read_raw_data_485(args.Len);
        oprot.WriteMessageBegin(new TMessage("read_raw_data_485", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("read_raw_data_485", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void read_raw_data_485_ht_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      read_raw_data_485_ht_args args = new read_raw_data_485_ht_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      read_raw_data_485_ht_result result = new read_raw_data_485_ht_result();
      try
      {
        result.Success = iface_.read_raw_data_485_ht(args.Head, args.Tail);
        oprot.WriteMessageBegin(new TMessage("read_raw_data_485_ht", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("read_raw_data_485_ht", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void read_raw_data_485_h_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      read_raw_data_485_h_args args = new read_raw_data_485_h_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      read_raw_data_485_h_result result = new read_raw_data_485_h_result();
      try
      {
        result.Success = iface_.read_raw_data_485_h(args.Head, args.Len);
        oprot.WriteMessageBegin(new TMessage("read_raw_data_485_h", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("read_raw_data_485_h", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void write_data_485_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      write_data_485_args args = new write_data_485_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      write_data_485_result result = new write_data_485_result();
      try
      {
        result.Success = iface_.write_data_485(args.Data);
        oprot.WriteMessageBegin(new TMessage("write_data_485", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("write_data_485", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void write_raw_data_485_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      write_raw_data_485_args args = new write_raw_data_485_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      write_raw_data_485_result result = new write_raw_data_485_result();
      try
      {
        result.Success = iface_.write_raw_data_485(args.Data);
        oprot.WriteMessageBegin(new TMessage("write_raw_data_485", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("write_raw_data_485", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void write_raw_data_485_h_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      write_raw_data_485_h_args args = new write_raw_data_485_h_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      write_raw_data_485_h_result result = new write_raw_data_485_h_result();
      try
      {
        result.Success = iface_.write_raw_data_485_h(args.Data, args.Head);
        oprot.WriteMessageBegin(new TMessage("write_raw_data_485_h", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("write_raw_data_485_h", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void write_raw_data_485_ht_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      write_raw_data_485_ht_args args = new write_raw_data_485_ht_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      write_raw_data_485_ht_result result = new write_raw_data_485_ht_result();
      try
      {
        result.Success = iface_.write_raw_data_485_ht(args.Data, args.Head, args.Tail);
        oprot.WriteMessageBegin(new TMessage("write_raw_data_485_ht", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("write_raw_data_485_ht", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tool_read_data_485_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tool_read_data_485_args args = new tool_read_data_485_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tool_read_data_485_result result = new tool_read_data_485_result();
      try
      {
        result.Success = iface_.tool_read_data_485();
        oprot.WriteMessageBegin(new TMessage("tool_read_data_485", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tool_read_data_485", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tool_read_raw_data_485_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tool_read_raw_data_485_args args = new tool_read_raw_data_485_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tool_read_raw_data_485_result result = new tool_read_raw_data_485_result();
      try
      {
        result.Success = iface_.tool_read_raw_data_485(args.Len);
        oprot.WriteMessageBegin(new TMessage("tool_read_raw_data_485", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tool_read_raw_data_485", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tool_read_raw_data_485_h_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tool_read_raw_data_485_h_args args = new tool_read_raw_data_485_h_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tool_read_raw_data_485_h_result result = new tool_read_raw_data_485_h_result();
      try
      {
        result.Success = iface_.tool_read_raw_data_485_h(args.Head, args.Len);
        oprot.WriteMessageBegin(new TMessage("tool_read_raw_data_485_h", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tool_read_raw_data_485_h", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tool_read_raw_data_485_ht_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tool_read_raw_data_485_ht_args args = new tool_read_raw_data_485_ht_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tool_read_raw_data_485_ht_result result = new tool_read_raw_data_485_ht_result();
      try
      {
        result.Success = iface_.tool_read_raw_data_485_ht(args.Head, args.Tail);
        oprot.WriteMessageBegin(new TMessage("tool_read_raw_data_485_ht", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tool_read_raw_data_485_ht", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tool_write_data_485_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tool_write_data_485_args args = new tool_write_data_485_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tool_write_data_485_result result = new tool_write_data_485_result();
      try
      {
        result.Success = iface_.tool_write_data_485(args.Data);
        oprot.WriteMessageBegin(new TMessage("tool_write_data_485", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tool_write_data_485", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tool_write_raw_data_485_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tool_write_raw_data_485_args args = new tool_write_raw_data_485_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tool_write_raw_data_485_result result = new tool_write_raw_data_485_result();
      try
      {
        result.Success = iface_.tool_write_raw_data_485(args.Data);
        oprot.WriteMessageBegin(new TMessage("tool_write_raw_data_485", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tool_write_raw_data_485", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tool_write_raw_data_485_h_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tool_write_raw_data_485_h_args args = new tool_write_raw_data_485_h_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tool_write_raw_data_485_h_result result = new tool_write_raw_data_485_h_result();
      try
      {
        result.Success = iface_.tool_write_raw_data_485_h(args.Data, args.Head);
        oprot.WriteMessageBegin(new TMessage("tool_write_raw_data_485_h", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tool_write_raw_data_485_h", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tool_write_raw_data_485_ht_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tool_write_raw_data_485_ht_args args = new tool_write_raw_data_485_ht_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tool_write_raw_data_485_ht_result result = new tool_write_raw_data_485_ht_result();
      try
      {
        result.Success = iface_.tool_write_raw_data_485_ht(args.Data, args.Head, args.Tail);
        oprot.WriteMessageBegin(new TMessage("tool_write_raw_data_485_ht", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tool_write_raw_data_485_ht", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void read_data_can_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      read_data_can_args args = new read_data_can_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      read_data_can_result result = new read_data_can_result();
      try
      {
        result.Success = iface_.read_data_can();
        oprot.WriteMessageBegin(new TMessage("read_data_can", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("read_data_can", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void read_raw_data_can_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      read_raw_data_can_args args = new read_raw_data_can_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      read_raw_data_can_result result = new read_raw_data_can_result();
      try
      {
        result.Success = iface_.read_raw_data_can();
        oprot.WriteMessageBegin(new TMessage("read_raw_data_can", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("read_raw_data_can", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void write_data_can_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      write_data_can_args args = new write_data_can_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      write_data_can_result result = new write_data_can_result();
      try
      {
        result.Success = iface_.write_data_can(args.Id, args.Data);
        oprot.WriteMessageBegin(new TMessage("write_data_can", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("write_data_can", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void write_raw_data_can_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      write_raw_data_can_args args = new write_raw_data_can_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      write_raw_data_can_result result = new write_raw_data_can_result();
      try
      {
        result.Success = iface_.write_raw_data_can(args.Id, args.Data);
        oprot.WriteMessageBegin(new TMessage("write_raw_data_can", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("write_raw_data_can", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_function_digital_in_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_function_digital_in_args args = new get_function_digital_in_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_function_digital_in_result result = new get_function_digital_in_result();
      try
      {
        result.Success = iface_.get_function_digital_in(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_function_digital_in", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_function_digital_in", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_function_digital_out_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_function_digital_out_args args = new get_function_digital_out_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_function_digital_out_result result = new get_function_digital_out_result();
      try
      {
        result.Success = iface_.get_function_digital_out(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_function_digital_out", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_function_digital_out", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void read_bool_reg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      read_bool_reg_args args = new read_bool_reg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      read_bool_reg_result result = new read_bool_reg_result();
      try
      {
        result.Success = iface_.read_bool_reg(args.Num);
        oprot.WriteMessageBegin(new TMessage("read_bool_reg", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("read_bool_reg", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void read_word_reg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      read_word_reg_args args = new read_word_reg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      read_word_reg_result result = new read_word_reg_result();
      try
      {
        result.Success = iface_.read_word_reg(args.Num);
        oprot.WriteMessageBegin(new TMessage("read_word_reg", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("read_word_reg", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void read_float_reg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      read_float_reg_args args = new read_float_reg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      read_float_reg_result result = new read_float_reg_result();
      try
      {
        result.Success = iface_.read_float_reg(args.Num);
        oprot.WriteMessageBegin(new TMessage("read_float_reg", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("read_float_reg", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void write_bool_reg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      write_bool_reg_args args = new write_bool_reg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      write_bool_reg_result result = new write_bool_reg_result();
      try
      {
        result.Success = iface_.write_bool_reg(args.Num, args.Value);
        oprot.WriteMessageBegin(new TMessage("write_bool_reg", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("write_bool_reg", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void write_word_reg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      write_word_reg_args args = new write_word_reg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      write_word_reg_result result = new write_word_reg_result();
      try
      {
        result.Success = iface_.write_word_reg(args.Num, args.Value);
        oprot.WriteMessageBegin(new TMessage("write_word_reg", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("write_word_reg", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void write_float_reg_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      write_float_reg_args args = new write_float_reg_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      write_float_reg_result result = new write_float_reg_result();
      try
      {
        result.Success = iface_.write_float_reg(args.Num, args.Value);
        oprot.WriteMessageBegin(new TMessage("write_float_reg", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("write_float_reg", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_function_reg_in_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_function_reg_in_args args = new get_function_reg_in_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_function_reg_in_result result = new get_function_reg_in_result();
      try
      {
        result.Success = iface_.get_function_reg_in(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_function_reg_in", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_function_reg_in", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_function_reg_out_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_function_reg_out_args args = new get_function_reg_out_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_function_reg_out_result result = new get_function_reg_out_result();
      try
      {
        result.Success = iface_.get_function_reg_out(args.Num);
        oprot.WriteMessageBegin(new TMessage("get_function_reg_out", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_function_reg_out", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void movej_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      movej_args args = new movej_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      movej_result result = new movej_result();
      try
      {
        result.Success = iface_.movej(args.Joints_list, args.V, args.A, args.R, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("movej", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("movej", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void movej_pose_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      movej_pose_args args = new movej_pose_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      movej_pose_result result = new movej_pose_result();
      try
      {
        result.Success = iface_.movej_pose(args.P, args.V, args.A, args.R, args.Q_near, args.Tool, args.Wobj, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("movej_pose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("movej_pose", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void movej2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      movej2_args args = new movej2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      movej2_result result = new movej2_result();
      try
      {
        result.Success = iface_.movej2(args.Joints_list, args.V, args.A, args.R, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("movej2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("movej2", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void movej_pose2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      movej_pose2_args args = new movej_pose2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      movej_pose2_result result = new movej_pose2_result();
      try
      {
        result.Success = iface_.movej_pose2(args.P, args.V, args.A, args.R, args.Q_near, args.Tool, args.Wobj, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("movej_pose2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("movej_pose2", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void movel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      movel_args args = new movel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      movel_result result = new movel_result();
      try
      {
        result.Success = iface_.movel(args.P, args.V, args.A, args.R, args.Q_near, args.Tool, args.Wobj, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("movel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("movel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void movec_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      movec_args args = new movec_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      movec_result result = new movec_result();
      try
      {
        result.Success = iface_.movec(args.P1, args.P2, args.V, args.A, args.R, args.Mode, args.Q_near, args.Tool, args.Wobj, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("movec", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("movec", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void move_circle_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      move_circle_args args = new move_circle_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      move_circle_result result = new move_circle_result();
      try
      {
        result.Success = iface_.move_circle(args.P1, args.P2, args.V, args.A, args.R, args.Mode, args.Q_near, args.Tool, args.Wobj, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("move_circle", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("move_circle", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tcp_move_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tcp_move_args args = new tcp_move_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tcp_move_result result = new tcp_move_result();
      try
      {
        result.Success = iface_.tcp_move(args.Pose_offset, args.V, args.A, args.R, args.Tool, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("tcp_move", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tcp_move", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tcp_move_2p_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tcp_move_2p_args args = new tcp_move_2p_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tcp_move_2p_result result = new tcp_move_2p_result();
      try
      {
        result.Success = iface_.tcp_move_2p(args.P1, args.P2, args.V, args.A, args.R, args.Tool, args.Wobj, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("tcp_move_2p", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tcp_move_2p", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void spline_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      spline_args args = new spline_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      spline_result result = new spline_result();
      try
      {
        result.Success = iface_.spline(args.Pose_list, args.V, args.A, args.Tool, args.Wobj, args.Block, args.Op, args.R, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("spline", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("spline", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void speedj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      speedj_args args = new speedj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      speedj_result result = new speedj_result();
      try
      {
        result.Success = iface_.speedj(args.Joints_list, args.A, args.Time, args.Block);
        oprot.WriteMessageBegin(new TMessage("speedj", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("speedj", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void speedl_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      speedl_args args = new speedl_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      speedl_result result = new speedl_result();
      try
      {
        result.Success = iface_.speedl(args.Pose_list, args.A, args.Time, args.Block);
        oprot.WriteMessageBegin(new TMessage("speedl", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("speedl", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void speed_stop_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      speed_stop_args args = new speed_stop_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      speed_stop_result result = new speed_stop_result();
      try
      {
        result.Success = iface_.speed_stop(args.Block);
        oprot.WriteMessageBegin(new TMessage("speed_stop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("speed_stop", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void servoj_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      servoj_args args = new servoj_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      servoj_result result = new servoj_result();
      try
      {
        result.Success = iface_.servoj(args.Joints_list, args.V, args.A, args.Block, args.Kp, args.Kd);
        oprot.WriteMessageBegin(new TMessage("servoj", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("servoj", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void servoj_pose_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      servoj_pose_args args = new servoj_pose_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      servoj_pose_result result = new servoj_pose_result();
      try
      {
        result.Success = iface_.servoj_pose(args.Pose_list, args.V, args.A, args.Q_near, args.Tool, args.Wobj, args.Block, args.Kp, args.Kd);
        oprot.WriteMessageBegin(new TMessage("servoj_pose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("servoj_pose", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void servo_tcp_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      servo_tcp_args args = new servo_tcp_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      servo_tcp_result result = new servo_tcp_result();
      try
      {
        result.Success = iface_.servo_tcp(args.Pose_offset, args.V, args.A, args.Tool, args.Block, args.Kp, args.Kd);
        oprot.WriteMessageBegin(new TMessage("servo_tcp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("servo_tcp", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void teach_mode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      teach_mode_args args = new teach_mode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      teach_mode_result result = new teach_mode_result();
      try
      {
        result.Success = iface_.teach_mode(args.Block);
        oprot.WriteMessageBegin(new TMessage("teach_mode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("teach_mode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void end_teach_mode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      end_teach_mode_args args = new end_teach_mode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      end_teach_mode_result result = new end_teach_mode_result();
      try
      {
        result.Success = iface_.end_teach_mode(args.Block);
        oprot.WriteMessageBegin(new TMessage("end_teach_mode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("end_teach_mode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void modbus_add_signal_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      modbus_add_signal_args args = new modbus_add_signal_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      modbus_add_signal_result result = new modbus_add_signal_result();
      try
      {
        result.Success = iface_.modbus_add_signal(args.Ip, args.Slave_number, args.Signal_address, args.Signal_type, args.Signal_name);
        oprot.WriteMessageBegin(new TMessage("modbus_add_signal", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("modbus_add_signal", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void modbus_delete_signal_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      modbus_delete_signal_args args = new modbus_delete_signal_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      modbus_delete_signal_result result = new modbus_delete_signal_result();
      try
      {
        result.Success = iface_.modbus_delete_signal(args.Signal_name);
        oprot.WriteMessageBegin(new TMessage("modbus_delete_signal", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("modbus_delete_signal", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void modbus_read_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      modbus_read_args args = new modbus_read_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      modbus_read_result result = new modbus_read_result();
      try
      {
        result.Success = iface_.modbus_read(args.Signal_name);
        oprot.WriteMessageBegin(new TMessage("modbus_read", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("modbus_read", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void modbus_write_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      modbus_write_args args = new modbus_write_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      modbus_write_result result = new modbus_write_result();
      try
      {
        result.Success = iface_.modbus_write(args.Signal_name, args.Value);
        oprot.WriteMessageBegin(new TMessage("modbus_write", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("modbus_write", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void modbus_set_frequency_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      modbus_set_frequency_args args = new modbus_set_frequency_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      modbus_set_frequency_result result = new modbus_set_frequency_result();
      try
      {
        iface_.modbus_set_frequency(args.Signal_name, args.Frequence);
        oprot.WriteMessageBegin(new TMessage("modbus_set_frequency", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("modbus_set_frequency", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_last_error_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_last_error_args args = new get_last_error_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_last_error_result result = new get_last_error_result();
      try
      {
        result.Success = iface_.get_last_error();
        oprot.WriteMessageBegin(new TMessage("get_last_error", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_last_error", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_noneblock_taskstate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_noneblock_taskstate_args args = new get_noneblock_taskstate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_noneblock_taskstate_result result = new get_noneblock_taskstate_result();
      try
      {
        result.Success = iface_.get_noneblock_taskstate(args.Id);
        oprot.WriteMessageBegin(new TMessage("get_noneblock_taskstate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_noneblock_taskstate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void log_info_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      log_info_args args = new log_info_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      log_info_result result = new log_info_result();
      try
      {
        iface_.log_info(args.Message);
        oprot.WriteMessageBegin(new TMessage("log_info", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("log_info", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void log_error_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      log_error_args args = new log_error_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      log_error_result result = new log_error_result();
      try
      {
        iface_.log_error(args.Message);
        oprot.WriteMessageBegin(new TMessage("log_error", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("log_error", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void simulation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      simulation_args args = new simulation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      simulation_result result = new simulation_result();
      try
      {
        result.Success = iface_.simulation(args.Sim, args.Block);
        oprot.WriteMessageBegin(new TMessage("simulation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("simulation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void speed_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      speed_args args = new speed_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      speed_result result = new speed_result();
      try
      {
        result.Success = iface_.speed(args.Val);
        oprot.WriteMessageBegin(new TMessage("speed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("speed", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_robot_state_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_robot_state_args args = new get_robot_state_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_robot_state_result result = new get_robot_state_result();
      try
      {
        result.Success = iface_.get_robot_state();
        oprot.WriteMessageBegin(new TMessage("get_robot_state", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_robot_state", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_flange_pose_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_flange_pose_args args = new get_flange_pose_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_flange_pose_result result = new get_flange_pose_result();
      try
      {
        result.Success = iface_.get_flange_pose();
        oprot.WriteMessageBegin(new TMessage("get_flange_pose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_flange_pose", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_flange_speed_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_flange_speed_args args = new get_flange_speed_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_flange_speed_result result = new get_flange_speed_result();
      try
      {
        result.Success = iface_.get_flange_speed();
        oprot.WriteMessageBegin(new TMessage("get_flange_speed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_flange_speed", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_flange_acceleration_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_flange_acceleration_args args = new get_flange_acceleration_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_flange_acceleration_result result = new get_flange_acceleration_result();
      try
      {
        result.Success = iface_.get_flange_acceleration();
        oprot.WriteMessageBegin(new TMessage("get_flange_acceleration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_flange_acceleration", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tcp_pose_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tcp_pose_args args = new get_tcp_pose_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tcp_pose_result result = new get_tcp_pose_result();
      try
      {
        result.Success = iface_.get_tcp_pose();
        oprot.WriteMessageBegin(new TMessage("get_tcp_pose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tcp_pose", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tcp_speed_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tcp_speed_args args = new get_tcp_speed_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tcp_speed_result result = new get_tcp_speed_result();
      try
      {
        result.Success = iface_.get_tcp_speed();
        oprot.WriteMessageBegin(new TMessage("get_tcp_speed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tcp_speed", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tcp_acceleration_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tcp_acceleration_args args = new get_tcp_acceleration_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tcp_acceleration_result result = new get_tcp_acceleration_result();
      try
      {
        result.Success = iface_.get_tcp_acceleration();
        oprot.WriteMessageBegin(new TMessage("get_tcp_acceleration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tcp_acceleration", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tcp_force_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tcp_force_args args = new get_tcp_force_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tcp_force_result result = new get_tcp_force_result();
      try
      {
        result.Success = iface_.get_tcp_force();
        oprot.WriteMessageBegin(new TMessage("get_tcp_force", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tcp_force", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_actual_joints_position_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_actual_joints_position_args args = new get_actual_joints_position_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_actual_joints_position_result result = new get_actual_joints_position_result();
      try
      {
        result.Success = iface_.get_actual_joints_position();
        oprot.WriteMessageBegin(new TMessage("get_actual_joints_position", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_actual_joints_position", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_target_joints_position_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_target_joints_position_args args = new get_target_joints_position_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_target_joints_position_result result = new get_target_joints_position_result();
      try
      {
        result.Success = iface_.get_target_joints_position();
        oprot.WriteMessageBegin(new TMessage("get_target_joints_position", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_target_joints_position", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_actual_joints_speed_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_actual_joints_speed_args args = new get_actual_joints_speed_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_actual_joints_speed_result result = new get_actual_joints_speed_result();
      try
      {
        result.Success = iface_.get_actual_joints_speed();
        oprot.WriteMessageBegin(new TMessage("get_actual_joints_speed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_actual_joints_speed", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_target_joints_speed_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_target_joints_speed_args args = new get_target_joints_speed_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_target_joints_speed_result result = new get_target_joints_speed_result();
      try
      {
        result.Success = iface_.get_target_joints_speed();
        oprot.WriteMessageBegin(new TMessage("get_target_joints_speed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_target_joints_speed", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_actual_joints_acceleration_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_actual_joints_acceleration_args args = new get_actual_joints_acceleration_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_actual_joints_acceleration_result result = new get_actual_joints_acceleration_result();
      try
      {
        result.Success = iface_.get_actual_joints_acceleration();
        oprot.WriteMessageBegin(new TMessage("get_actual_joints_acceleration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_actual_joints_acceleration", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_target_joints_acceleration_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_target_joints_acceleration_args args = new get_target_joints_acceleration_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_target_joints_acceleration_result result = new get_target_joints_acceleration_result();
      try
      {
        result.Success = iface_.get_target_joints_acceleration();
        oprot.WriteMessageBegin(new TMessage("get_target_joints_acceleration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_target_joints_acceleration", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_actual_joints_torque_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_actual_joints_torque_args args = new get_actual_joints_torque_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_actual_joints_torque_result result = new get_actual_joints_torque_result();
      try
      {
        result.Success = iface_.get_actual_joints_torque();
        oprot.WriteMessageBegin(new TMessage("get_actual_joints_torque", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_actual_joints_torque", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_target_joints_torque_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_target_joints_torque_args args = new get_target_joints_torque_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_target_joints_torque_result result = new get_target_joints_torque_result();
      try
      {
        result.Success = iface_.get_target_joints_torque();
        oprot.WriteMessageBegin(new TMessage("get_target_joints_torque", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_target_joints_torque", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void stop_record_track_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      stop_record_track_args args = new stop_record_track_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      stop_record_track_result result = new stop_record_track_result();
      try
      {
        result.Success = iface_.stop_record_track();
        oprot.WriteMessageBegin(new TMessage("stop_record_track", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("stop_record_track", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void start_record_track_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      start_record_track_args args = new start_record_track_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      start_record_track_result result = new start_record_track_result();
      try
      {
        result.Success = iface_.start_record_track(args.Name, args.Mode, args.Tool, args.Wobj, args.Interval);
        oprot.WriteMessageBegin(new TMessage("start_record_track", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("start_record_track", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void collision_detect_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      collision_detect_args args = new collision_detect_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      collision_detect_result result = new collision_detect_result();
      try
      {
        result.Success = iface_.collision_detect(args.Value);
        oprot.WriteMessageBegin(new TMessage("collision_detect", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("collision_detect", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void replay_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      replay_args args = new replay_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      replay_result result = new replay_result();
      try
      {
        result.Success = iface_.replay(args.Name, args.Value, args.Mode);
        oprot.WriteMessageBegin(new TMessage("replay", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("replay", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_load_data_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_load_data_args args = new set_load_data_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_load_data_result result = new set_load_data_result();
      try
      {
        result.Success = iface_.set_load_data(args.Value);
        oprot.WriteMessageBegin(new TMessage("set_load_data", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_load_data", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_start_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_start_args args = new fc_start_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_start_result result = new fc_start_result();
      try
      {
        result.Success = iface_.fc_start();
        oprot.WriteMessageBegin(new TMessage("fc_start", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_start", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_stop_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_stop_args args = new fc_stop_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_stop_result result = new fc_stop_result();
      try
      {
        result.Success = iface_.fc_stop();
        oprot.WriteMessageBegin(new TMessage("fc_stop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_stop", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_config_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_config_args args = new fc_config_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_config_result result = new fc_config_result();
      try
      {
        result.Success = iface_.fc_config(args.Direction, args.Ref_ft, args.Damp, args.Max_vel, args.Number_list, args.Tool, args.Wobj, args.Value);
        oprot.WriteMessageBegin(new TMessage("fc_config", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_config", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_move_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_move_args args = new fc_move_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_move_result result = new fc_move_result();
      try
      {
        result.Success = iface_.fc_move();
        oprot.WriteMessageBegin(new TMessage("fc_move", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_move", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_guard_act_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_guard_act_args args = new fc_guard_act_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_guard_act_result result = new fc_guard_act_result();
      try
      {
        result.Success = iface_.fc_guard_act(args.Direction, args.Ref_ft, args.Tool, args.Wobj, args.Type, args.Force_property);
        oprot.WriteMessageBegin(new TMessage("fc_guard_act", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_guard_act", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_guard_deact_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_guard_deact_args args = new fc_guard_deact_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_guard_deact_result result = new fc_guard_deact_result();
      try
      {
        result.Success = iface_.fc_guard_deact();
        oprot.WriteMessageBegin(new TMessage("fc_guard_deact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_guard_deact", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_force_set_value_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_force_set_value_args args = new fc_force_set_value_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_force_set_value_result result = new fc_force_set_value_result();
      try
      {
        result.Success = iface_.fc_force_set_value(args.Direction, args.Ref_ft);
        oprot.WriteMessageBegin(new TMessage("fc_force_set_value", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_force_set_value", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_wait_pos_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_wait_pos_args args = new fc_wait_pos_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_wait_pos_result result = new fc_wait_pos_result();
      try
      {
        result.Success = iface_.fc_wait_pos(args.Middle, args.Range, args.Absolute, args.Duration, args.Timeout);
        oprot.WriteMessageBegin(new TMessage("fc_wait_pos", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_wait_pos", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_wait_vel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_wait_vel_args args = new fc_wait_vel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_wait_vel_result result = new fc_wait_vel_result();
      try
      {
        result.Success = iface_.fc_wait_vel(args.Middle, args.Range, args.Absolute, args.Duration, args.Timeout);
        oprot.WriteMessageBegin(new TMessage("fc_wait_vel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_wait_vel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_wait_ft_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_wait_ft_args args = new fc_wait_ft_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_wait_ft_result result = new fc_wait_ft_result();
      try
      {
        result.Success = iface_.fc_wait_ft(args.Middle, args.Range, args.Absolute, args.Duration, args.Timeout);
        oprot.WriteMessageBegin(new TMessage("fc_wait_ft", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_wait_ft", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_wait_logic_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_wait_logic_args args = new fc_wait_logic_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_wait_logic_result result = new fc_wait_logic_result();
      try
      {
        result.Success = iface_.fc_wait_logic(args.Value);
        oprot.WriteMessageBegin(new TMessage("fc_wait_logic", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_wait_logic", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_get_ft_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_get_ft_args args = new fc_get_ft_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_get_ft_result result = new fc_get_ft_result();
      try
      {
        result.Success = iface_.fc_get_ft();
        oprot.WriteMessageBegin(new TMessage("fc_get_ft", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_get_ft", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fc_mode_is_active_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fc_mode_is_active_args args = new fc_mode_is_active_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fc_mode_is_active_result result = new fc_mode_is_active_result();
      try
      {
        result.Success = iface_.fc_mode_is_active();
        oprot.WriteMessageBegin(new TMessage("fc_mode_is_active", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fc_mode_is_active", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void start_realtime_mode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      start_realtime_mode_args args = new start_realtime_mode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      start_realtime_mode_result result = new start_realtime_mode_result();
      try
      {
        result.Success = iface_.start_realtime_mode(args.Mode, args.Fileter_bandwidth, args.Com_lost_time);
        oprot.WriteMessageBegin(new TMessage("start_realtime_mode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("start_realtime_mode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void end_realtime_mode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      end_realtime_mode_args args = new end_realtime_mode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      end_realtime_mode_result result = new end_realtime_mode_result();
      try
      {
        result.Success = iface_.end_realtime_mode();
        oprot.WriteMessageBegin(new TMessage("end_realtime_mode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("end_realtime_mode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void realtime_data_enqueue_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      realtime_data_enqueue_args args = new realtime_data_enqueue_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      realtime_data_enqueue_result result = new realtime_data_enqueue_result();
      try
      {
        result.Success = iface_.realtime_data_enqueue(args.Realtime_data, args.Block);
        oprot.WriteMessageBegin(new TMessage("realtime_data_enqueue", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("realtime_data_enqueue", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void clear_realtime_data_queue_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      clear_realtime_data_queue_args args = new clear_realtime_data_queue_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      clear_realtime_data_queue_result result = new clear_realtime_data_queue_result();
      try
      {
        result.Success = iface_.clear_realtime_data_queue();
        oprot.WriteMessageBegin(new TMessage("clear_realtime_data_queue", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("clear_realtime_data_queue", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_realtime_data_queue_size_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_realtime_data_queue_size_args args = new get_realtime_data_queue_size_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_realtime_data_queue_size_result result = new get_realtime_data_queue_size_result();
      try
      {
        result.Success = iface_.get_realtime_data_queue_size();
        oprot.WriteMessageBegin(new TMessage("get_realtime_data_queue_size", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_realtime_data_queue_size", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void enable_speed_optimization_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      enable_speed_optimization_args args = new enable_speed_optimization_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      enable_speed_optimization_result result = new enable_speed_optimization_result();
      try
      {
        result.Success = iface_.enable_speed_optimization();
        oprot.WriteMessageBegin(new TMessage("enable_speed_optimization", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("enable_speed_optimization", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disable_speed_optimization_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disable_speed_optimization_args args = new disable_speed_optimization_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disable_speed_optimization_result result = new disable_speed_optimization_result();
      try
      {
        result.Success = iface_.disable_speed_optimization();
        oprot.WriteMessageBegin(new TMessage("disable_speed_optimization", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disable_speed_optimization", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void change_recipe_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      change_recipe_args args = new change_recipe_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      change_recipe_result result = new change_recipe_result();
      try
      {
        iface_.change_recipe();
        oprot.WriteMessageBegin(new TMessage("change_recipe", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("change_recipe", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_system_value_bool_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_system_value_bool_args args = new set_system_value_bool_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_system_value_bool_result result = new set_system_value_bool_result();
      try
      {
        result.Success = iface_.set_system_value_bool(args.Name, args.Value);
        oprot.WriteMessageBegin(new TMessage("set_system_value_bool", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_system_value_bool", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_system_value_double_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_system_value_double_args args = new set_system_value_double_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_system_value_double_result result = new set_system_value_double_result();
      try
      {
        result.Success = iface_.set_system_value_double(args.Name, args.Value);
        oprot.WriteMessageBegin(new TMessage("set_system_value_double", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_system_value_double", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_system_value_str_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_system_value_str_args args = new set_system_value_str_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_system_value_str_result result = new set_system_value_str_result();
      try
      {
        result.Success = iface_.set_system_value_str(args.Name, args.Value);
        oprot.WriteMessageBegin(new TMessage("set_system_value_str", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_system_value_str", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_system_value_list_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_system_value_list_args args = new set_system_value_list_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_system_value_list_result result = new set_system_value_list_result();
      try
      {
        result.Success = iface_.set_system_value_list(args.Name, args.Value);
        oprot.WriteMessageBegin(new TMessage("set_system_value_list", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_system_value_list", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_system_value_bool_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_system_value_bool_args args = new get_system_value_bool_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_system_value_bool_result result = new get_system_value_bool_result();
      try
      {
        result.Success = iface_.get_system_value_bool(args.Name);
        oprot.WriteMessageBegin(new TMessage("get_system_value_bool", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_system_value_bool", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_system_value_double_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_system_value_double_args args = new get_system_value_double_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_system_value_double_result result = new get_system_value_double_result();
      try
      {
        result.Success = iface_.get_system_value_double(args.Name);
        oprot.WriteMessageBegin(new TMessage("get_system_value_double", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_system_value_double", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_system_value_str_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_system_value_str_args args = new get_system_value_str_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_system_value_str_result result = new get_system_value_str_result();
      try
      {
        result.Success = iface_.get_system_value_str(args.Name);
        oprot.WriteMessageBegin(new TMessage("get_system_value_str", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_system_value_str", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_system_value_list_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_system_value_list_args args = new get_system_value_list_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_system_value_list_result result = new get_system_value_list_result();
      try
      {
        result.Success = iface_.get_system_value_list(args.Name);
        oprot.WriteMessageBegin(new TMessage("get_system_value_list", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_system_value_list", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void trackEnqueue_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      trackEnqueue_args args = new trackEnqueue_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      trackEnqueue_result result = new trackEnqueue_result();
      try
      {
        result.Success = iface_.trackEnqueue(args.Track, args.Block);
        oprot.WriteMessageBegin(new TMessage("trackEnqueue", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("trackEnqueue", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void trackClearQueue_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      trackClearQueue_args args = new trackClearQueue_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      trackClearQueue_result result = new trackClearQueue_result();
      try
      {
        result.Success = iface_.trackClearQueue();
        oprot.WriteMessageBegin(new TMessage("trackClearQueue", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("trackClearQueue", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getQueueSize_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getQueueSize_args args = new getQueueSize_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getQueueSize_result result = new getQueueSize_result();
      try
      {
        result.Success = iface_.getQueueSize();
        oprot.WriteMessageBegin(new TMessage("getQueueSize", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getQueueSize", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void trackJointMotion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      trackJointMotion_args args = new trackJointMotion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      trackJointMotion_result result = new trackJointMotion_result();
      try
      {
        result.Success = iface_.trackJointMotion(args.Speed, args.Acc, args.Block);
        oprot.WriteMessageBegin(new TMessage("trackJointMotion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("trackJointMotion", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void trackCartMotion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      trackCartMotion_args args = new trackCartMotion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      trackCartMotion_result result = new trackCartMotion_result();
      try
      {
        result.Success = iface_.trackCartMotion(args.Speed, args.Acc, args.Block, args.Tool, args.Wobj, args.Radius);
        oprot.WriteMessageBegin(new TMessage("trackCartMotion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("trackCartMotion", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void rpc_heartbeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      rpc_heartbeat_args args = new rpc_heartbeat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      rpc_heartbeat_result result = new rpc_heartbeat_result();
      try
      {
        iface_.rpc_heartbeat(args.Time);
        oprot.WriteMessageBegin(new TMessage("rpc_heartbeat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("rpc_heartbeat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void move_spiral_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      move_spiral_args args = new move_spiral_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      move_spiral_result result = new move_spiral_result();
      try
      {
        result.Success = iface_.move_spiral(args.P1, args.P2, args.Rev, args.Len, args.R, args.Mode, args.V, args.A, args.Q_near, args.Tool, args.Wobj, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("move_spiral", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("move_spiral", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void enable_acc_optimization_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      enable_acc_optimization_args args = new enable_acc_optimization_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      enable_acc_optimization_result result = new enable_acc_optimization_result();
      try
      {
        result.Success = iface_.enable_acc_optimization();
        oprot.WriteMessageBegin(new TMessage("enable_acc_optimization", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("enable_acc_optimization", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disable_acc_optimization_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disable_acc_optimization_args args = new disable_acc_optimization_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disable_acc_optimization_result result = new disable_acc_optimization_result();
      try
      {
        result.Success = iface_.disable_acc_optimization();
        oprot.WriteMessageBegin(new TMessage("disable_acc_optimization", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disable_acc_optimization", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_baudrate_485_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_baudrate_485_args args = new set_baudrate_485_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_baudrate_485_result result = new set_baudrate_485_result();
      try
      {
        result.Success = iface_.set_baudrate_485(args.Value, args.Block);
        oprot.WriteMessageBegin(new TMessage("set_baudrate_485", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_baudrate_485", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_baudrate_can_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_baudrate_can_args args = new set_baudrate_can_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_baudrate_can_result result = new set_baudrate_can_result();
      try
      {
        result.Success = iface_.set_baudrate_can(args.Value, args.Block);
        oprot.WriteMessageBegin(new TMessage("set_baudrate_can", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_baudrate_can", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_analog_output_mode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_analog_output_mode_args args = new set_analog_output_mode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_analog_output_mode_result result = new set_analog_output_mode_result();
      try
      {
        result.Success = iface_.set_analog_output_mode(args.Num, args.Mode, args.Block);
        oprot.WriteMessageBegin(new TMessage("set_analog_output_mode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_analog_output_mode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void robotmoving_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      robotmoving_args args = new robotmoving_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      robotmoving_result result = new robotmoving_result();
      try
      {
        result.Success = iface_.robotmoving();
        oprot.WriteMessageBegin(new TMessage("robotmoving", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("robotmoving", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void modbus_write_multiple_coils_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      modbus_write_multiple_coils_args args = new modbus_write_multiple_coils_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      modbus_write_multiple_coils_result result = new modbus_write_multiple_coils_result();
      try
      {
        result.Success = iface_.modbus_write_multiple_coils(args.Slave_num, args.Name, args.Len, args.Byte_list);
        oprot.WriteMessageBegin(new TMessage("modbus_write_multiple_coils", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("modbus_write_multiple_coils", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void modbus_write_multiple_regs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      modbus_write_multiple_regs_args args = new modbus_write_multiple_regs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      modbus_write_multiple_regs_result result = new modbus_write_multiple_regs_result();
      try
      {
        result.Success = iface_.modbus_write_multiple_regs(args.Slave_num, args.Name, args.Len, args.Word_list);
        oprot.WriteMessageBegin(new TMessage("modbus_write_multiple_regs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("modbus_write_multiple_regs", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_current_project_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_current_project_args args = new get_current_project_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_current_project_result result = new get_current_project_result();
      try
      {
        result.Success = iface_.get_current_project();
        oprot.WriteMessageBegin(new TMessage("get_current_project", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_current_project", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_files_list_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_files_list_args args = new get_files_list_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_files_list_result result = new get_files_list_result();
      try
      {
        result.Success = iface_.get_files_list(args.Path);
        oprot.WriteMessageBegin(new TMessage("get_files_list", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_files_list", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRobotStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRobotStatus_args args = new getRobotStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRobotStatus_result result = new getRobotStatus_result();
      try
      {
        result.Success = iface_.getRobotStatus();
        oprot.WriteMessageBegin(new TMessage("getRobotStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRobotStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRobotIOStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRobotIOStatus_args args = new getRobotIOStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRobotIOStatus_result result = new getRobotIOStatus_result();
      try
      {
        result.Success = iface_.getRobotIOStatus();
        oprot.WriteMessageBegin(new TMessage("getRobotIOStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRobotIOStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tcp_pose_coord_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tcp_pose_coord_args args = new get_tcp_pose_coord_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tcp_pose_coord_result result = new get_tcp_pose_coord_result();
      try
      {
        result.Success = iface_.get_tcp_pose_coord(args.Tool, args.Wobj);
        oprot.WriteMessageBegin(new TMessage("get_tcp_pose_coord", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tcp_pose_coord", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_tcp_force_tool_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_tcp_force_tool_args args = new get_tcp_force_tool_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_tcp_force_tool_result result = new get_tcp_force_tool_result();
      try
      {
        result.Success = iface_.get_tcp_force_tool(args.Tool);
        oprot.WriteMessageBegin(new TMessage("get_tcp_force_tool", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_tcp_force_tool", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void restart_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      restart_args args = new restart_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      restart_result result = new restart_result();
      try
      {
        result.Success = iface_.restart(args.Block);
        oprot.WriteMessageBegin(new TMessage("restart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("restart", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_servo_config_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_servo_config_args args = new set_servo_config_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_servo_config_result result = new set_servo_config_result();
      try
      {
        result.Success = iface_.set_servo_config(args.Axis_num, args.Id, args.Value, args.Qfmt, args.Block);
        oprot.WriteMessageBegin(new TMessage("set_servo_config", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_servo_config", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void apply_servo_config_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      apply_servo_config_args args = new apply_servo_config_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      apply_servo_config_result result = new apply_servo_config_result();
      try
      {
        result.Success = iface_.apply_servo_config(args.Axis_num, args.Block);
        oprot.WriteMessageBegin(new TMessage("apply_servo_config", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("apply_servo_config", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_motor_pole_pair_number_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_motor_pole_pair_number_args args = new get_motor_pole_pair_number_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_motor_pole_pair_number_result result = new get_motor_pole_pair_number_result();
      try
      {
        result.Success = iface_.get_motor_pole_pair_number();
        oprot.WriteMessageBegin(new TMessage("get_motor_pole_pair_number", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_motor_pole_pair_number", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_motor_stator_slots_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_motor_stator_slots_args args = new get_motor_stator_slots_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_motor_stator_slots_result result = new get_motor_stator_slots_result();
      try
      {
        result.Success = iface_.get_motor_stator_slots();
        oprot.WriteMessageBegin(new TMessage("get_motor_stator_slots", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_motor_stator_slots", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_axis_ratio_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_axis_ratio_args args = new get_axis_ratio_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_axis_ratio_result result = new get_axis_ratio_result();
      try
      {
        result.Success = iface_.get_axis_ratio();
        oprot.WriteMessageBegin(new TMessage("get_axis_ratio", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_axis_ratio", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void collision_detection_reset_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      collision_detection_reset_args args = new collision_detection_reset_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      collision_detection_reset_result result = new collision_detection_reset_result();
      try
      {
        result.Success = iface_.collision_detection_reset();
        oprot.WriteMessageBegin(new TMessage("collision_detection_reset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("collision_detection_reset", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_servo_file_params_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_servo_file_params_args args = new set_servo_file_params_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_servo_file_params_result result = new set_servo_file_params_result();
      try
      {
        result.Success = iface_.set_servo_file_params(args.Axis_num, args.Id, args.Name, args.Value, args.Qfmt);
        oprot.WriteMessageBegin(new TMessage("set_servo_file_params", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_servo_file_params", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void combine_motion_config_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      combine_motion_config_args args = new combine_motion_config_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      combine_motion_config_result result = new combine_motion_config_result();
      try
      {
        result.Success = iface_.combine_motion_config(args.Type, args.Ref_plane, args.Fq, args.Amp, args.El_offset, args.Az_offset, args.Up_height, args.Time, args.Op_list);
        oprot.WriteMessageBegin(new TMessage("combine_motion_config", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("combine_motion_config", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_eaxis_param_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_eaxis_param_args args = new set_eaxis_param_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_eaxis_param_result result = new set_eaxis_param_result();
      try
      {
        result.Success = iface_.set_eaxis_param(args.Num, args.Param, args.Block);
        oprot.WriteMessageBegin(new TMessage("set_eaxis_param", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_eaxis_param", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void add_eaxis_scheme_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      add_eaxis_scheme_args args = new add_eaxis_scheme_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      add_eaxis_scheme_result result = new add_eaxis_scheme_result();
      try
      {
        result.Success = iface_.add_eaxis_scheme(args.Num, args.Block);
        oprot.WriteMessageBegin(new TMessage("add_eaxis_scheme", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("add_eaxis_scheme", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void delete_eaxis_scheme_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      delete_eaxis_scheme_args args = new delete_eaxis_scheme_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      delete_eaxis_scheme_result result = new delete_eaxis_scheme_result();
      try
      {
        result.Success = iface_.delete_eaxis_scheme(args.Num, args.Block);
        oprot.WriteMessageBegin(new TMessage("delete_eaxis_scheme", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("delete_eaxis_scheme", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void enable_eaxis_scheme_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      enable_eaxis_scheme_args args = new enable_eaxis_scheme_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      enable_eaxis_scheme_result result = new enable_eaxis_scheme_result();
      try
      {
        result.Success = iface_.enable_eaxis_scheme(args.Scheme_name);
        oprot.WriteMessageBegin(new TMessage("enable_eaxis_scheme", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("enable_eaxis_scheme", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disable_eaxis_scheme_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disable_eaxis_scheme_args args = new disable_eaxis_scheme_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disable_eaxis_scheme_result result = new disable_eaxis_scheme_result();
      try
      {
        result.Success = iface_.disable_eaxis_scheme(args.Scheme_name);
        oprot.WriteMessageBegin(new TMessage("disable_eaxis_scheme", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disable_eaxis_scheme", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_eaxiss_scheme_param_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_eaxiss_scheme_param_args args = new set_eaxiss_scheme_param_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_eaxiss_scheme_param_result result = new set_eaxiss_scheme_param_result();
      try
      {
        result.Success = iface_.set_eaxiss_scheme_param(args.Num, args.Param, args.Block);
        oprot.WriteMessageBegin(new TMessage("set_eaxiss_scheme_param", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_eaxiss_scheme_param", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void move_jog_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      move_jog_args args = new move_jog_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      move_jog_result result = new move_jog_result();
      try
      {
        result.Success = iface_.move_jog(args.Param, args.Block);
        oprot.WriteMessageBegin(new TMessage("move_jog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("move_jog", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void stop_manual_move_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      stop_manual_move_args args = new stop_manual_move_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      stop_manual_move_result result = new stop_manual_move_result();
      try
      {
        result.Success = iface_.stop_manual_move(args.Block);
        oprot.WriteMessageBegin(new TMessage("stop_manual_move", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("stop_manual_move", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_robot_version_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_robot_version_args args = new get_robot_version_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_robot_version_result result = new get_robot_version_result();
      try
      {
        result.Success = iface_.get_robot_version();
        oprot.WriteMessageBegin(new TMessage("get_robot_version", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_robot_version", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_teach_pendant_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_teach_pendant_args args = new set_teach_pendant_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_teach_pendant_result result = new set_teach_pendant_result();
      try
      {
        result.Success = iface_.set_teach_pendant(args.Enable);
        oprot.WriteMessageBegin(new TMessage("set_teach_pendant", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_teach_pendant", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_teach_speed_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_teach_speed_args args = new get_teach_speed_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_teach_speed_result result = new get_teach_speed_result();
      try
      {
        result.Success = iface_.get_teach_speed();
        oprot.WriteMessageBegin(new TMessage("get_teach_speed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_teach_speed", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_global_speed_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_global_speed_args args = new get_global_speed_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_global_speed_result result = new get_global_speed_result();
      try
      {
        result.Success = iface_.get_global_speed();
        oprot.WriteMessageBegin(new TMessage("get_global_speed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_global_speed", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_teach_speed_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_teach_speed_args args = new set_teach_speed_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_teach_speed_result result = new set_teach_speed_result();
      try
      {
        result.Success = iface_.set_teach_speed(args.V);
        oprot.WriteMessageBegin(new TMessage("set_teach_speed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_teach_speed", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void enable_combine_motion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      enable_combine_motion_args args = new enable_combine_motion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      enable_combine_motion_result result = new enable_combine_motion_result();
      try
      {
        result.Success = iface_.enable_combine_motion();
        oprot.WriteMessageBegin(new TMessage("enable_combine_motion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("enable_combine_motion", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disable_combine_motion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disable_combine_motion_args args = new disable_combine_motion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disable_combine_motion_result result = new disable_combine_motion_result();
      try
      {
        result.Success = iface_.disable_combine_motion();
        oprot.WriteMessageBegin(new TMessage("disable_combine_motion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disable_combine_motion", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void enable_singularity_control_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      enable_singularity_control_args args = new enable_singularity_control_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      enable_singularity_control_result result = new enable_singularity_control_result();
      try
      {
        result.Success = iface_.enable_singularity_control();
        oprot.WriteMessageBegin(new TMessage("enable_singularity_control", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("enable_singularity_control", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disable_singularity_control_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disable_singularity_control_args args = new disable_singularity_control_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disable_singularity_control_result result = new disable_singularity_control_result();
      try
      {
        result.Success = iface_.disable_singularity_control();
        oprot.WriteMessageBegin(new TMessage("disable_singularity_control", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disable_singularity_control", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void enable_vibration_control_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      enable_vibration_control_args args = new enable_vibration_control_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      enable_vibration_control_result result = new enable_vibration_control_result();
      try
      {
        result.Success = iface_.enable_vibration_control();
        oprot.WriteMessageBegin(new TMessage("enable_vibration_control", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("enable_vibration_control", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disable_vibration_control_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disable_vibration_control_args args = new disable_vibration_control_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disable_vibration_control_result result = new disable_vibration_control_result();
      try
      {
        result.Success = iface_.disable_vibration_control();
        oprot.WriteMessageBegin(new TMessage("disable_vibration_control", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disable_vibration_control", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void move_eaxis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      move_eaxis_args args = new move_eaxis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      move_eaxis_result result = new move_eaxis_result();
      try
      {
        result.Success = iface_.move_eaxis(args.Scheme_name, args.Epose, args.V, args.Block, args.Op);
        oprot.WriteMessageBegin(new TMessage("move_eaxis", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("move_eaxis", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void movej2_eaxis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      movej2_eaxis_args args = new movej2_eaxis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      movej2_eaxis_result result = new movej2_eaxis_result();
      try
      {
        result.Success = iface_.movej2_eaxis(args.Joints_list, args.V, args.A, args.Rad, args.Scheme_name, args.Epose, args.Eaxis_v, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("movej2_eaxis", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("movej2_eaxis", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void movej2_pose_eaxis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      movej2_pose_eaxis_args args = new movej2_pose_eaxis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      movej2_pose_eaxis_result result = new movej2_pose_eaxis_result();
      try
      {
        result.Success = iface_.movej2_pose_eaxis(args.P, args.V, args.A, args.Rad, args.Qnear, args.Tool, args.Wobj, args.Scheme_name, args.Epose, args.Eaxis_v, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("movej2_pose_eaxis", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("movej2_pose_eaxis", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void movel_eaxis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      movel_eaxis_args args = new movel_eaxis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      movel_eaxis_result result = new movel_eaxis_result();
      try
      {
        result.Success = iface_.movel_eaxis(args.P, args.V, args.A, args.Rad, args.Qnear, args.Tool, args.Wobj, args.Scheme_name, args.Epose, args.Eaxis_v, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("movel_eaxis", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("movel_eaxis", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void movec_eaxis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      movec_eaxis_args args = new movec_eaxis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      movec_eaxis_result result = new movec_eaxis_result();
      try
      {
        result.Success = iface_.movec_eaxis(args.P1, args.P2, args.V, args.A, args.Rad, args.Qnear, args.Tool, args.Wobj, args.Scheme_name, args.Epose, args.Eaxis_v, args.Block, args.Op, args.Def_acc);
        oprot.WriteMessageBegin(new TMessage("movec_eaxis", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("movec_eaxis", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reach_check_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reach_check_args args = new reach_check_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reach_check_result result = new reach_check_result();
      try
      {
        result.Success = iface_.reach_check(args.Base, args.Wobj, args.Tool, args.Ref_pos, args.Check_points);
        oprot.WriteMessageBegin(new TMessage("reach_check", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reach_check", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void move_jog_eaxis_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      move_jog_eaxis_args args = new move_jog_eaxis_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      move_jog_eaxis_result result = new move_jog_eaxis_result();
      try
      {
        result.Success = iface_.move_jog_eaxis(args.Name, args.Direction, args.Vel, args.Block);
        oprot.WriteMessageBegin(new TMessage("move_jog_eaxis", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("move_jog_eaxis", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_eaxis_info_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_eaxis_info_args args = new get_eaxis_info_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_eaxis_info_result result = new get_eaxis_info_result();
      try
      {
        result.Success = iface_.get_eaxis_info();
        oprot.WriteMessageBegin(new TMessage("get_eaxis_info", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("get_eaxis_info", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_hand_teach_parameter_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_hand_teach_parameter_args args = new set_hand_teach_parameter_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_hand_teach_parameter_result result = new set_hand_teach_parameter_result();
      try
      {
        result.Success = iface_.set_hand_teach_parameter(args.Space, args.Joint_scale, args.Cart_scale, args.Coord_type, args.Direction);
        oprot.WriteMessageBegin(new TMessage("set_hand_teach_parameter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_hand_teach_parameter", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_pendant_type_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_pendant_type_args args = new set_pendant_type_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_pendant_type_result result = new set_pendant_type_result();
      try
      {
        result.Success = iface_.set_pendant_type(args.Type);
        oprot.WriteMessageBegin(new TMessage("set_pendant_type", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_pendant_type", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void set_blend_ahead_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      set_blend_ahead_args args = new set_blend_ahead_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      set_blend_ahead_result result = new set_blend_ahead_result();
      try
      {
        result.Success = iface_.set_blend_ahead(args.Per);
        oprot.WriteMessageBegin(new TMessage("set_blend_ahead", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("set_blend_ahead", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class power_on_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public power_on_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("power_on_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("power_on_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class power_on_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public power_on_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("power_on_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("power_on_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class power_off_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public power_off_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("power_off_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("power_off_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class power_off_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public power_off_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("power_off_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("power_off_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public enable_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public enable_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public disable_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public disable_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class shutdown_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public shutdown_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("shutdown_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("shutdown_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class shutdown_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public shutdown_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("shutdown_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("shutdown_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class stop_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public stop_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("stop_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("stop_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class stop_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public stop_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("stop_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("stop_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class pause_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public pause_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("pause_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("pause_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class pause_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public pause_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("pause_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("pause_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class resume_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public resume_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("resume_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("resume_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class resume_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public resume_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("resume_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("resume_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class run_program_args : TBase
  {
    private string _name;
    private bool _block;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool block;
    }

    public run_program_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("run_program_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("run_program_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class run_program_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public run_program_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("run_program_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("run_program_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_tool_data_args : TBase
  {
    private string _name;
    private List<double> _tool_offset;
    private List<double> _payload;
    private List<double> _inertia_tensor;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public List<double> Tool_offset
    {
      get
      {
        return _tool_offset;
      }
      set
      {
        __isset.tool_offset = true;
        this._tool_offset = value;
      }
    }

    public List<double> Payload
    {
      get
      {
        return _payload;
      }
      set
      {
        __isset.payload = true;
        this._payload = value;
      }
    }

    public List<double> Inertia_tensor
    {
      get
      {
        return _inertia_tensor;
      }
      set
      {
        __isset.inertia_tensor = true;
        this._inertia_tensor = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool tool_offset;
      public bool payload;
      public bool inertia_tensor;
    }

    public set_tool_data_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Tool_offset = new List<double>();
                  TList _list184 = iprot.ReadListBegin();
                  for( int _i185 = 0; _i185 < _list184.Count; ++_i185)
                  {
                    double _elem186;
                    _elem186 = iprot.ReadDouble();
                    Tool_offset.Add(_elem186);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Payload = new List<double>();
                  TList _list187 = iprot.ReadListBegin();
                  for( int _i188 = 0; _i188 < _list187.Count; ++_i188)
                  {
                    double _elem189;
                    _elem189 = iprot.ReadDouble();
                    Payload.Add(_elem189);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Inertia_tensor = new List<double>();
                  TList _list190 = iprot.ReadListBegin();
                  for( int _i191 = 0; _i191 < _list190.Count; ++_i191)
                  {
                    double _elem192;
                    _elem192 = iprot.ReadDouble();
                    Inertia_tensor.Add(_elem192);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_tool_data_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Tool_offset != null && __isset.tool_offset) {
          field.Name = "tool_offset";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Tool_offset.Count));
            foreach (double _iter193 in Tool_offset)
            {
              oprot.WriteDouble(_iter193);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Payload != null && __isset.payload) {
          field.Name = "payload";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Payload.Count));
            foreach (double _iter194 in Payload)
            {
              oprot.WriteDouble(_iter194);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Inertia_tensor != null && __isset.inertia_tensor) {
          field.Name = "inertia_tensor";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Inertia_tensor.Count));
            foreach (double _iter195 in Inertia_tensor)
            {
              oprot.WriteDouble(_iter195);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_tool_data_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Tool_offset != null && __isset.tool_offset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool_offset: ");
        __sb.Append(Tool_offset);
      }
      if (Payload != null && __isset.payload) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Payload: ");
        __sb.Append(Payload);
      }
      if (Inertia_tensor != null && __isset.inertia_tensor) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Inertia_tensor: ");
        __sb.Append(Inertia_tensor);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_tool_data_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_tool_data_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_tool_data_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_tool_data_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tool_load_args : TBase
  {

    public get_tool_load_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tool_load_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tool_load_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tool_load_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tool_load_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list196 = iprot.ReadListBegin();
                  for( int _i197 = 0; _i197 < _list196.Count; ++_i197)
                  {
                    double _elem198;
                    _elem198 = iprot.ReadDouble();
                    Success.Add(_elem198);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tool_load_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter199 in Success)
              {
                oprot.WriteDouble(_iter199);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tool_load_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_offset_args : TBase
  {

    public get_tcp_offset_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_offset_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_offset_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_offset_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tcp_offset_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list200 = iprot.ReadListBegin();
                  for( int _i201 = 0; _i201 < _list200.Count; ++_i201)
                  {
                    double _elem202;
                    _elem202 = iprot.ReadDouble();
                    Success.Add(_elem202);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_offset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter203 in Success)
              {
                oprot.WriteDouble(_iter203);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_offset_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_wobj_args : TBase
  {
    private string _name;
    private List<double> _wobj;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public List<double> Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool wobj;
    }

    public set_wobj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Wobj = new List<double>();
                  TList _list204 = iprot.ReadListBegin();
                  for( int _i205 = 0; _i205 < _list204.Count; ++_i205)
                  {
                    double _elem206;
                    _elem206 = iprot.ReadDouble();
                    Wobj.Add(_elem206);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_wobj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Wobj.Count));
            foreach (double _iter207 in Wobj)
            {
              oprot.WriteDouble(_iter207);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_wobj_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_wobj_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_wobj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_wobj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_wobj_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_wobj_offset_args : TBase
  {
    private List<double> _wobj;
    private bool _active;

    public List<double> Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public bool Active
    {
      get
      {
        return _active;
      }
      set
      {
        __isset.active = true;
        this._active = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool wobj;
      public bool active;
    }

    public set_wobj_offset_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Wobj = new List<double>();
                  TList _list208 = iprot.ReadListBegin();
                  for( int _i209 = 0; _i209 < _list208.Count; ++_i209)
                  {
                    double _elem210;
                    _elem210 = iprot.ReadDouble();
                    Wobj.Add(_elem210);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Active = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_wobj_offset_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Wobj.Count));
            foreach (double _iter211 in Wobj)
            {
              oprot.WriteDouble(_iter211);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.active) {
          field.Name = "active";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Active);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_wobj_offset_args(");
      bool __first = true;
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.active) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Active: ");
        __sb.Append(Active);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_wobj_offset_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_wobj_offset_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_wobj_offset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_wobj_offset_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_wobj_args : TBase
  {

    public get_wobj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_wobj_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_wobj_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_wobj_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_wobj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list212 = iprot.ReadListBegin();
                  for( int _i213 = 0; _i213 < _list212.Count; ++_i213)
                  {
                    double _elem214;
                    _elem214 = iprot.ReadDouble();
                    Success.Add(_elem214);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_wobj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter215 in Success)
              {
                oprot.WriteDouble(_iter215);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_wobj_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cal_fkine_args : TBase
  {
    private List<double> _joints_position;
    private List<double> _tool;
    private List<double> _wobj;

    public List<double> Joints_position
    {
      get
      {
        return _joints_position;
      }
      set
      {
        __isset.joints_position = true;
        this._joints_position = value;
      }
    }

    public List<double> Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public List<double> Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool joints_position;
      public bool tool;
      public bool wobj;
    }

    public cal_fkine_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Joints_position = new List<double>();
                  TList _list216 = iprot.ReadListBegin();
                  for( int _i217 = 0; _i217 < _list216.Count; ++_i217)
                  {
                    double _elem218;
                    _elem218 = iprot.ReadDouble();
                    Joints_position.Add(_elem218);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Tool = new List<double>();
                  TList _list219 = iprot.ReadListBegin();
                  for( int _i220 = 0; _i220 < _list219.Count; ++_i220)
                  {
                    double _elem221;
                    _elem221 = iprot.ReadDouble();
                    Tool.Add(_elem221);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Wobj = new List<double>();
                  TList _list222 = iprot.ReadListBegin();
                  for( int _i223 = 0; _i223 < _list222.Count; ++_i223)
                  {
                    double _elem224;
                    _elem224 = iprot.ReadDouble();
                    Wobj.Add(_elem224);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cal_fkine_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Joints_position != null && __isset.joints_position) {
          field.Name = "joints_position";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Joints_position.Count));
            foreach (double _iter225 in Joints_position)
            {
              oprot.WriteDouble(_iter225);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Tool.Count));
            foreach (double _iter226 in Tool)
            {
              oprot.WriteDouble(_iter226);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Wobj.Count));
            foreach (double _iter227 in Wobj)
            {
              oprot.WriteDouble(_iter227);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cal_fkine_args(");
      bool __first = true;
      if (Joints_position != null && __isset.joints_position) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Joints_position: ");
        __sb.Append(Joints_position);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cal_fkine_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public cal_fkine_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list228 = iprot.ReadListBegin();
                  for( int _i229 = 0; _i229 < _list228.Count; ++_i229)
                  {
                    double _elem230;
                    _elem230 = iprot.ReadDouble();
                    Success.Add(_elem230);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cal_fkine_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter231 in Success)
              {
                oprot.WriteDouble(_iter231);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cal_fkine_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cal_ikine_args : TBase
  {
    private List<double> _p;
    private List<double> _q_near;
    private List<double> _tool;
    private List<double> _wobj;

    public List<double> P
    {
      get
      {
        return _p;
      }
      set
      {
        __isset.p = true;
        this._p = value;
      }
    }

    public List<double> Q_near
    {
      get
      {
        return _q_near;
      }
      set
      {
        __isset.q_near = true;
        this._q_near = value;
      }
    }

    public List<double> Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public List<double> Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p;
      public bool q_near;
      public bool tool;
      public bool wobj;
    }

    public cal_ikine_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P = new List<double>();
                  TList _list232 = iprot.ReadListBegin();
                  for( int _i233 = 0; _i233 < _list232.Count; ++_i233)
                  {
                    double _elem234;
                    _elem234 = iprot.ReadDouble();
                    P.Add(_elem234);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Q_near = new List<double>();
                  TList _list235 = iprot.ReadListBegin();
                  for( int _i236 = 0; _i236 < _list235.Count; ++_i236)
                  {
                    double _elem237;
                    _elem237 = iprot.ReadDouble();
                    Q_near.Add(_elem237);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Tool = new List<double>();
                  TList _list238 = iprot.ReadListBegin();
                  for( int _i239 = 0; _i239 < _list238.Count; ++_i239)
                  {
                    double _elem240;
                    _elem240 = iprot.ReadDouble();
                    Tool.Add(_elem240);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Wobj = new List<double>();
                  TList _list241 = iprot.ReadListBegin();
                  for( int _i242 = 0; _i242 < _list241.Count; ++_i242)
                  {
                    double _elem243;
                    _elem243 = iprot.ReadDouble();
                    Wobj.Add(_elem243);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cal_ikine_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P != null && __isset.p) {
          field.Name = "p";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P.Count));
            foreach (double _iter244 in P)
            {
              oprot.WriteDouble(_iter244);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Q_near != null && __isset.q_near) {
          field.Name = "q_near";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Q_near.Count));
            foreach (double _iter245 in Q_near)
            {
              oprot.WriteDouble(_iter245);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Tool.Count));
            foreach (double _iter246 in Tool)
            {
              oprot.WriteDouble(_iter246);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Wobj.Count));
            foreach (double _iter247 in Wobj)
            {
              oprot.WriteDouble(_iter247);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cal_ikine_args(");
      bool __first = true;
      if (P != null && __isset.p) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P: ");
        __sb.Append(P);
      }
      if (Q_near != null && __isset.q_near) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Q_near: ");
        __sb.Append(Q_near);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cal_ikine_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public cal_ikine_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list248 = iprot.ReadListBegin();
                  for( int _i249 = 0; _i249 < _list248.Count; ++_i249)
                  {
                    double _elem250;
                    _elem250 = iprot.ReadDouble();
                    Success.Add(_elem250);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cal_ikine_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter251 in Success)
              {
                oprot.WriteDouble(_iter251);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cal_ikine_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_digital_output_mode_args : TBase
  {
    private short _num;
    private short _type;
    private int _freq;
    private int _duty_cycle;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public short Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Freq
    {
      get
      {
        return _freq;
      }
      set
      {
        __isset.freq = true;
        this._freq = value;
      }
    }

    public int Duty_cycle
    {
      get
      {
        return _duty_cycle;
      }
      set
      {
        __isset.duty_cycle = true;
        this._duty_cycle = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool type;
      public bool freq;
      public bool duty_cycle;
    }

    public set_digital_output_mode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I16) {
                Type = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Freq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Duty_cycle = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_digital_output_mode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I16;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.freq) {
          field.Name = "freq";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Freq);
          oprot.WriteFieldEnd();
        }
        if (__isset.duty_cycle) {
          field.Name = "duty_cycle";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Duty_cycle);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_digital_output_mode_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.freq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Freq: ");
        __sb.Append(Freq);
      }
      if (__isset.duty_cycle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Duty_cycle: ");
        __sb.Append(Duty_cycle);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_digital_output_mode_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_digital_output_mode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_digital_output_mode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_digital_output_mode_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_standard_digital_out_args : TBase
  {
    private short _num;
    private bool _value;
    private bool _block;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public bool Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool @value;
      public bool block;
    }

    public set_standard_digital_out_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Value = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_standard_digital_out_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Value);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_standard_digital_out_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_standard_digital_out_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_standard_digital_out_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_standard_digital_out_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_standard_digital_out_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_tool_digital_out_args : TBase
  {
    private short _num;
    private bool _value;
    private bool _block;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public bool Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool @value;
      public bool block;
    }

    public set_tool_digital_out_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Value = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_tool_digital_out_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Value);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_tool_digital_out_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_tool_digital_out_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_tool_digital_out_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_tool_digital_out_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_tool_digital_out_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_standard_digital_in_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_standard_digital_in_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_standard_digital_in_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_standard_digital_in_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_standard_digital_in_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_standard_digital_in_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_standard_digital_in_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_standard_digital_in_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_standard_digital_out_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_standard_digital_out_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_standard_digital_out_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_standard_digital_out_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_standard_digital_out_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_standard_digital_out_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_standard_digital_out_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_standard_digital_out_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tool_digital_in_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_tool_digital_in_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tool_digital_in_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tool_digital_in_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tool_digital_in_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tool_digital_in_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tool_digital_in_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tool_digital_in_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tool_digital_out_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_tool_digital_out_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tool_digital_out_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tool_digital_out_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tool_digital_out_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tool_digital_out_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tool_digital_out_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tool_digital_out_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_config_digital_in_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_config_digital_in_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_config_digital_in_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_config_digital_in_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_config_digital_in_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_config_digital_in_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_config_digital_in_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_config_digital_in_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_standard_analog_voltage_in_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_standard_analog_voltage_in_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_standard_analog_voltage_in_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_standard_analog_voltage_in_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_standard_analog_voltage_in_result : TBase
  {
    private double _success;

    public double Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_standard_analog_voltage_in_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Double) {
                Success = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_standard_analog_voltage_in_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Double;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_standard_analog_voltage_in_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tool_analog_voltage_in_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_tool_analog_voltage_in_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tool_analog_voltage_in_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tool_analog_voltage_in_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tool_analog_voltage_in_result : TBase
  {
    private double _success;

    public double Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tool_analog_voltage_in_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Double) {
                Success = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tool_analog_voltage_in_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Double;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tool_analog_voltage_in_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_standard_analog_current_in_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_standard_analog_current_in_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_standard_analog_current_in_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_standard_analog_current_in_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_standard_analog_current_in_result : TBase
  {
    private double _success;

    public double Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_standard_analog_current_in_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Double) {
                Success = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_standard_analog_current_in_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Double;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_standard_analog_current_in_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_standard_analog_voltage_out_args : TBase
  {
    private short _num;
    private double _value;
    private bool _block;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public double Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool @value;
      public bool block;
    }

    public set_standard_analog_voltage_out_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Value = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_standard_analog_voltage_out_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Value);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_standard_analog_voltage_out_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_standard_analog_voltage_out_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_standard_analog_voltage_out_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_standard_analog_voltage_out_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_standard_analog_voltage_out_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_standard_analog_current_out_args : TBase
  {
    private short _num;
    private double _value;
    private bool _block;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public double Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool @value;
      public bool block;
    }

    public set_standard_analog_current_out_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Value = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_standard_analog_current_out_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Value);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_standard_analog_current_out_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_standard_analog_current_out_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_standard_analog_current_out_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_standard_analog_current_out_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_standard_analog_current_out_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_data_485_args : TBase
  {

    public read_data_485_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_data_485_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_data_485_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_data_485_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public read_data_485_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list252 = iprot.ReadListBegin();
                  for( int _i253 = 0; _i253 < _list252.Count; ++_i253)
                  {
                    sbyte _elem254;
                    _elem254 = iprot.ReadByte();
                    Success.Add(_elem254);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_data_485_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter255 in Success)
              {
                oprot.WriteByte(_iter255);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_data_485_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_raw_data_485_args : TBase
  {
    private int _len;

    public int Len
    {
      get
      {
        return _len;
      }
      set
      {
        __isset.len = true;
        this._len = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool len;
    }

    public read_raw_data_485_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Len = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_raw_data_485_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.len) {
          field.Name = "len";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Len);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_raw_data_485_args(");
      bool __first = true;
      if (__isset.len) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Len: ");
        __sb.Append(Len);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_raw_data_485_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public read_raw_data_485_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list256 = iprot.ReadListBegin();
                  for( int _i257 = 0; _i257 < _list256.Count; ++_i257)
                  {
                    sbyte _elem258;
                    _elem258 = iprot.ReadByte();
                    Success.Add(_elem258);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_raw_data_485_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter259 in Success)
              {
                oprot.WriteByte(_iter259);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_raw_data_485_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_raw_data_485_ht_args : TBase
  {
    private List<sbyte> _head;
    private List<sbyte> _tail;

    public List<sbyte> Head
    {
      get
      {
        return _head;
      }
      set
      {
        __isset.head = true;
        this._head = value;
      }
    }

    public List<sbyte> Tail
    {
      get
      {
        return _tail;
      }
      set
      {
        __isset.tail = true;
        this._tail = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool head;
      public bool tail;
    }

    public read_raw_data_485_ht_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Head = new List<sbyte>();
                  TList _list260 = iprot.ReadListBegin();
                  for( int _i261 = 0; _i261 < _list260.Count; ++_i261)
                  {
                    sbyte _elem262;
                    _elem262 = iprot.ReadByte();
                    Head.Add(_elem262);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Tail = new List<sbyte>();
                  TList _list263 = iprot.ReadListBegin();
                  for( int _i264 = 0; _i264 < _list263.Count; ++_i264)
                  {
                    sbyte _elem265;
                    _elem265 = iprot.ReadByte();
                    Tail.Add(_elem265);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_raw_data_485_ht_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Head != null && __isset.head) {
          field.Name = "head";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Head.Count));
            foreach (sbyte _iter266 in Head)
            {
              oprot.WriteByte(_iter266);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tail != null && __isset.tail) {
          field.Name = "tail";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Tail.Count));
            foreach (sbyte _iter267 in Tail)
            {
              oprot.WriteByte(_iter267);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_raw_data_485_ht_args(");
      bool __first = true;
      if (Head != null && __isset.head) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Head: ");
        __sb.Append(Head);
      }
      if (Tail != null && __isset.tail) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tail: ");
        __sb.Append(Tail);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_raw_data_485_ht_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public read_raw_data_485_ht_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list268 = iprot.ReadListBegin();
                  for( int _i269 = 0; _i269 < _list268.Count; ++_i269)
                  {
                    sbyte _elem270;
                    _elem270 = iprot.ReadByte();
                    Success.Add(_elem270);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_raw_data_485_ht_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter271 in Success)
              {
                oprot.WriteByte(_iter271);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_raw_data_485_ht_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_raw_data_485_h_args : TBase
  {
    private List<sbyte> _head;
    private int _len;

    public List<sbyte> Head
    {
      get
      {
        return _head;
      }
      set
      {
        __isset.head = true;
        this._head = value;
      }
    }

    public int Len
    {
      get
      {
        return _len;
      }
      set
      {
        __isset.len = true;
        this._len = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool head;
      public bool len;
    }

    public read_raw_data_485_h_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Head = new List<sbyte>();
                  TList _list272 = iprot.ReadListBegin();
                  for( int _i273 = 0; _i273 < _list272.Count; ++_i273)
                  {
                    sbyte _elem274;
                    _elem274 = iprot.ReadByte();
                    Head.Add(_elem274);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Len = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_raw_data_485_h_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Head != null && __isset.head) {
          field.Name = "head";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Head.Count));
            foreach (sbyte _iter275 in Head)
            {
              oprot.WriteByte(_iter275);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.len) {
          field.Name = "len";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Len);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_raw_data_485_h_args(");
      bool __first = true;
      if (Head != null && __isset.head) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Head: ");
        __sb.Append(Head);
      }
      if (__isset.len) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Len: ");
        __sb.Append(Len);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_raw_data_485_h_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public read_raw_data_485_h_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list276 = iprot.ReadListBegin();
                  for( int _i277 = 0; _i277 < _list276.Count; ++_i277)
                  {
                    sbyte _elem278;
                    _elem278 = iprot.ReadByte();
                    Success.Add(_elem278);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_raw_data_485_h_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter279 in Success)
              {
                oprot.WriteByte(_iter279);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_raw_data_485_h_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_data_485_args : TBase
  {
    private List<sbyte> _data;

    public List<sbyte> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data;
    }

    public write_data_485_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Data = new List<sbyte>();
                  TList _list280 = iprot.ReadListBegin();
                  for( int _i281 = 0; _i281 < _list280.Count; ++_i281)
                  {
                    sbyte _elem282;
                    _elem282 = iprot.ReadByte();
                    Data.Add(_elem282);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_data_485_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Data.Count));
            foreach (sbyte _iter283 in Data)
            {
              oprot.WriteByte(_iter283);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_data_485_args(");
      bool __first = true;
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_data_485_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public write_data_485_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_data_485_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_data_485_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_raw_data_485_args : TBase
  {
    private List<sbyte> _data;

    public List<sbyte> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data;
    }

    public write_raw_data_485_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Data = new List<sbyte>();
                  TList _list284 = iprot.ReadListBegin();
                  for( int _i285 = 0; _i285 < _list284.Count; ++_i285)
                  {
                    sbyte _elem286;
                    _elem286 = iprot.ReadByte();
                    Data.Add(_elem286);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_raw_data_485_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Data.Count));
            foreach (sbyte _iter287 in Data)
            {
              oprot.WriteByte(_iter287);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_raw_data_485_args(");
      bool __first = true;
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_raw_data_485_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public write_raw_data_485_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_raw_data_485_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_raw_data_485_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_raw_data_485_h_args : TBase
  {
    private List<sbyte> _data;
    private List<sbyte> _head;

    public List<sbyte> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }

    public List<sbyte> Head
    {
      get
      {
        return _head;
      }
      set
      {
        __isset.head = true;
        this._head = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data;
      public bool head;
    }

    public write_raw_data_485_h_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Data = new List<sbyte>();
                  TList _list288 = iprot.ReadListBegin();
                  for( int _i289 = 0; _i289 < _list288.Count; ++_i289)
                  {
                    sbyte _elem290;
                    _elem290 = iprot.ReadByte();
                    Data.Add(_elem290);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Head = new List<sbyte>();
                  TList _list291 = iprot.ReadListBegin();
                  for( int _i292 = 0; _i292 < _list291.Count; ++_i292)
                  {
                    sbyte _elem293;
                    _elem293 = iprot.ReadByte();
                    Head.Add(_elem293);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_raw_data_485_h_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Data.Count));
            foreach (sbyte _iter294 in Data)
            {
              oprot.WriteByte(_iter294);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Head != null && __isset.head) {
          field.Name = "head";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Head.Count));
            foreach (sbyte _iter295 in Head)
            {
              oprot.WriteByte(_iter295);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_raw_data_485_h_args(");
      bool __first = true;
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      if (Head != null && __isset.head) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Head: ");
        __sb.Append(Head);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_raw_data_485_h_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public write_raw_data_485_h_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_raw_data_485_h_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_raw_data_485_h_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_raw_data_485_ht_args : TBase
  {
    private List<sbyte> _data;
    private List<sbyte> _head;
    private List<sbyte> _tail;

    public List<sbyte> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }

    public List<sbyte> Head
    {
      get
      {
        return _head;
      }
      set
      {
        __isset.head = true;
        this._head = value;
      }
    }

    public List<sbyte> Tail
    {
      get
      {
        return _tail;
      }
      set
      {
        __isset.tail = true;
        this._tail = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data;
      public bool head;
      public bool tail;
    }

    public write_raw_data_485_ht_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Data = new List<sbyte>();
                  TList _list296 = iprot.ReadListBegin();
                  for( int _i297 = 0; _i297 < _list296.Count; ++_i297)
                  {
                    sbyte _elem298;
                    _elem298 = iprot.ReadByte();
                    Data.Add(_elem298);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Head = new List<sbyte>();
                  TList _list299 = iprot.ReadListBegin();
                  for( int _i300 = 0; _i300 < _list299.Count; ++_i300)
                  {
                    sbyte _elem301;
                    _elem301 = iprot.ReadByte();
                    Head.Add(_elem301);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Tail = new List<sbyte>();
                  TList _list302 = iprot.ReadListBegin();
                  for( int _i303 = 0; _i303 < _list302.Count; ++_i303)
                  {
                    sbyte _elem304;
                    _elem304 = iprot.ReadByte();
                    Tail.Add(_elem304);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_raw_data_485_ht_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Data.Count));
            foreach (sbyte _iter305 in Data)
            {
              oprot.WriteByte(_iter305);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Head != null && __isset.head) {
          field.Name = "head";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Head.Count));
            foreach (sbyte _iter306 in Head)
            {
              oprot.WriteByte(_iter306);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tail != null && __isset.tail) {
          field.Name = "tail";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Tail.Count));
            foreach (sbyte _iter307 in Tail)
            {
              oprot.WriteByte(_iter307);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_raw_data_485_ht_args(");
      bool __first = true;
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      if (Head != null && __isset.head) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Head: ");
        __sb.Append(Head);
      }
      if (Tail != null && __isset.tail) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tail: ");
        __sb.Append(Tail);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_raw_data_485_ht_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public write_raw_data_485_ht_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_raw_data_485_ht_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_raw_data_485_ht_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_read_data_485_args : TBase
  {

    public tool_read_data_485_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_read_data_485_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_read_data_485_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_read_data_485_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tool_read_data_485_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list308 = iprot.ReadListBegin();
                  for( int _i309 = 0; _i309 < _list308.Count; ++_i309)
                  {
                    sbyte _elem310;
                    _elem310 = iprot.ReadByte();
                    Success.Add(_elem310);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_read_data_485_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter311 in Success)
              {
                oprot.WriteByte(_iter311);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_read_data_485_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_read_raw_data_485_args : TBase
  {
    private int _len;

    public int Len
    {
      get
      {
        return _len;
      }
      set
      {
        __isset.len = true;
        this._len = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool len;
    }

    public tool_read_raw_data_485_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Len = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_read_raw_data_485_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.len) {
          field.Name = "len";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Len);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_read_raw_data_485_args(");
      bool __first = true;
      if (__isset.len) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Len: ");
        __sb.Append(Len);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_read_raw_data_485_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tool_read_raw_data_485_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list312 = iprot.ReadListBegin();
                  for( int _i313 = 0; _i313 < _list312.Count; ++_i313)
                  {
                    sbyte _elem314;
                    _elem314 = iprot.ReadByte();
                    Success.Add(_elem314);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_read_raw_data_485_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter315 in Success)
              {
                oprot.WriteByte(_iter315);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_read_raw_data_485_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_read_raw_data_485_h_args : TBase
  {
    private List<sbyte> _head;
    private int _len;

    public List<sbyte> Head
    {
      get
      {
        return _head;
      }
      set
      {
        __isset.head = true;
        this._head = value;
      }
    }

    public int Len
    {
      get
      {
        return _len;
      }
      set
      {
        __isset.len = true;
        this._len = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool head;
      public bool len;
    }

    public tool_read_raw_data_485_h_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Head = new List<sbyte>();
                  TList _list316 = iprot.ReadListBegin();
                  for( int _i317 = 0; _i317 < _list316.Count; ++_i317)
                  {
                    sbyte _elem318;
                    _elem318 = iprot.ReadByte();
                    Head.Add(_elem318);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Len = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_read_raw_data_485_h_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Head != null && __isset.head) {
          field.Name = "head";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Head.Count));
            foreach (sbyte _iter319 in Head)
            {
              oprot.WriteByte(_iter319);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.len) {
          field.Name = "len";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Len);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_read_raw_data_485_h_args(");
      bool __first = true;
      if (Head != null && __isset.head) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Head: ");
        __sb.Append(Head);
      }
      if (__isset.len) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Len: ");
        __sb.Append(Len);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_read_raw_data_485_h_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tool_read_raw_data_485_h_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list320 = iprot.ReadListBegin();
                  for( int _i321 = 0; _i321 < _list320.Count; ++_i321)
                  {
                    sbyte _elem322;
                    _elem322 = iprot.ReadByte();
                    Success.Add(_elem322);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_read_raw_data_485_h_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter323 in Success)
              {
                oprot.WriteByte(_iter323);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_read_raw_data_485_h_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_read_raw_data_485_ht_args : TBase
  {
    private List<sbyte> _head;
    private List<sbyte> _tail;

    public List<sbyte> Head
    {
      get
      {
        return _head;
      }
      set
      {
        __isset.head = true;
        this._head = value;
      }
    }

    public List<sbyte> Tail
    {
      get
      {
        return _tail;
      }
      set
      {
        __isset.tail = true;
        this._tail = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool head;
      public bool tail;
    }

    public tool_read_raw_data_485_ht_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Head = new List<sbyte>();
                  TList _list324 = iprot.ReadListBegin();
                  for( int _i325 = 0; _i325 < _list324.Count; ++_i325)
                  {
                    sbyte _elem326;
                    _elem326 = iprot.ReadByte();
                    Head.Add(_elem326);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Tail = new List<sbyte>();
                  TList _list327 = iprot.ReadListBegin();
                  for( int _i328 = 0; _i328 < _list327.Count; ++_i328)
                  {
                    sbyte _elem329;
                    _elem329 = iprot.ReadByte();
                    Tail.Add(_elem329);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_read_raw_data_485_ht_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Head != null && __isset.head) {
          field.Name = "head";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Head.Count));
            foreach (sbyte _iter330 in Head)
            {
              oprot.WriteByte(_iter330);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tail != null && __isset.tail) {
          field.Name = "tail";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Tail.Count));
            foreach (sbyte _iter331 in Tail)
            {
              oprot.WriteByte(_iter331);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_read_raw_data_485_ht_args(");
      bool __first = true;
      if (Head != null && __isset.head) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Head: ");
        __sb.Append(Head);
      }
      if (Tail != null && __isset.tail) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tail: ");
        __sb.Append(Tail);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_read_raw_data_485_ht_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tool_read_raw_data_485_ht_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list332 = iprot.ReadListBegin();
                  for( int _i333 = 0; _i333 < _list332.Count; ++_i333)
                  {
                    sbyte _elem334;
                    _elem334 = iprot.ReadByte();
                    Success.Add(_elem334);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_read_raw_data_485_ht_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter335 in Success)
              {
                oprot.WriteByte(_iter335);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_read_raw_data_485_ht_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_write_data_485_args : TBase
  {
    private List<sbyte> _data;

    public List<sbyte> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data;
    }

    public tool_write_data_485_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Data = new List<sbyte>();
                  TList _list336 = iprot.ReadListBegin();
                  for( int _i337 = 0; _i337 < _list336.Count; ++_i337)
                  {
                    sbyte _elem338;
                    _elem338 = iprot.ReadByte();
                    Data.Add(_elem338);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_write_data_485_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Data.Count));
            foreach (sbyte _iter339 in Data)
            {
              oprot.WriteByte(_iter339);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_write_data_485_args(");
      bool __first = true;
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_write_data_485_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tool_write_data_485_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_write_data_485_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_write_data_485_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_write_raw_data_485_args : TBase
  {
    private List<sbyte> _data;

    public List<sbyte> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data;
    }

    public tool_write_raw_data_485_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Data = new List<sbyte>();
                  TList _list340 = iprot.ReadListBegin();
                  for( int _i341 = 0; _i341 < _list340.Count; ++_i341)
                  {
                    sbyte _elem342;
                    _elem342 = iprot.ReadByte();
                    Data.Add(_elem342);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_write_raw_data_485_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Data.Count));
            foreach (sbyte _iter343 in Data)
            {
              oprot.WriteByte(_iter343);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_write_raw_data_485_args(");
      bool __first = true;
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_write_raw_data_485_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tool_write_raw_data_485_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_write_raw_data_485_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_write_raw_data_485_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_write_raw_data_485_h_args : TBase
  {
    private List<sbyte> _data;
    private List<sbyte> _head;

    public List<sbyte> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }

    public List<sbyte> Head
    {
      get
      {
        return _head;
      }
      set
      {
        __isset.head = true;
        this._head = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data;
      public bool head;
    }

    public tool_write_raw_data_485_h_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Data = new List<sbyte>();
                  TList _list344 = iprot.ReadListBegin();
                  for( int _i345 = 0; _i345 < _list344.Count; ++_i345)
                  {
                    sbyte _elem346;
                    _elem346 = iprot.ReadByte();
                    Data.Add(_elem346);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Head = new List<sbyte>();
                  TList _list347 = iprot.ReadListBegin();
                  for( int _i348 = 0; _i348 < _list347.Count; ++_i348)
                  {
                    sbyte _elem349;
                    _elem349 = iprot.ReadByte();
                    Head.Add(_elem349);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_write_raw_data_485_h_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Data.Count));
            foreach (sbyte _iter350 in Data)
            {
              oprot.WriteByte(_iter350);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Head != null && __isset.head) {
          field.Name = "head";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Head.Count));
            foreach (sbyte _iter351 in Head)
            {
              oprot.WriteByte(_iter351);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_write_raw_data_485_h_args(");
      bool __first = true;
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      if (Head != null && __isset.head) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Head: ");
        __sb.Append(Head);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_write_raw_data_485_h_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tool_write_raw_data_485_h_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_write_raw_data_485_h_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_write_raw_data_485_h_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_write_raw_data_485_ht_args : TBase
  {
    private List<sbyte> _data;
    private List<sbyte> _head;
    private List<sbyte> _tail;

    public List<sbyte> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }

    public List<sbyte> Head
    {
      get
      {
        return _head;
      }
      set
      {
        __isset.head = true;
        this._head = value;
      }
    }

    public List<sbyte> Tail
    {
      get
      {
        return _tail;
      }
      set
      {
        __isset.tail = true;
        this._tail = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data;
      public bool head;
      public bool tail;
    }

    public tool_write_raw_data_485_ht_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Data = new List<sbyte>();
                  TList _list352 = iprot.ReadListBegin();
                  for( int _i353 = 0; _i353 < _list352.Count; ++_i353)
                  {
                    sbyte _elem354;
                    _elem354 = iprot.ReadByte();
                    Data.Add(_elem354);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Head = new List<sbyte>();
                  TList _list355 = iprot.ReadListBegin();
                  for( int _i356 = 0; _i356 < _list355.Count; ++_i356)
                  {
                    sbyte _elem357;
                    _elem357 = iprot.ReadByte();
                    Head.Add(_elem357);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Tail = new List<sbyte>();
                  TList _list358 = iprot.ReadListBegin();
                  for( int _i359 = 0; _i359 < _list358.Count; ++_i359)
                  {
                    sbyte _elem360;
                    _elem360 = iprot.ReadByte();
                    Tail.Add(_elem360);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_write_raw_data_485_ht_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Data.Count));
            foreach (sbyte _iter361 in Data)
            {
              oprot.WriteByte(_iter361);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Head != null && __isset.head) {
          field.Name = "head";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Head.Count));
            foreach (sbyte _iter362 in Head)
            {
              oprot.WriteByte(_iter362);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tail != null && __isset.tail) {
          field.Name = "tail";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Tail.Count));
            foreach (sbyte _iter363 in Tail)
            {
              oprot.WriteByte(_iter363);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_write_raw_data_485_ht_args(");
      bool __first = true;
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      if (Head != null && __isset.head) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Head: ");
        __sb.Append(Head);
      }
      if (Tail != null && __isset.tail) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tail: ");
        __sb.Append(Tail);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tool_write_raw_data_485_ht_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tool_write_raw_data_485_ht_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tool_write_raw_data_485_ht_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tool_write_raw_data_485_ht_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_data_can_args : TBase
  {

    public read_data_can_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_data_can_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_data_can_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_data_can_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public read_data_can_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list364 = iprot.ReadListBegin();
                  for( int _i365 = 0; _i365 < _list364.Count; ++_i365)
                  {
                    sbyte _elem366;
                    _elem366 = iprot.ReadByte();
                    Success.Add(_elem366);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_data_can_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter367 in Success)
              {
                oprot.WriteByte(_iter367);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_data_can_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_raw_data_can_args : TBase
  {

    public read_raw_data_can_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_raw_data_can_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_raw_data_can_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_raw_data_can_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public read_raw_data_can_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list368 = iprot.ReadListBegin();
                  for( int _i369 = 0; _i369 < _list368.Count; ++_i369)
                  {
                    sbyte _elem370;
                    _elem370 = iprot.ReadByte();
                    Success.Add(_elem370);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_raw_data_can_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter371 in Success)
              {
                oprot.WriteByte(_iter371);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_raw_data_can_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_data_can_args : TBase
  {
    private int _id;
    private List<sbyte> _data;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public List<sbyte> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool data;
    }

    public write_data_can_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Data = new List<sbyte>();
                  TList _list372 = iprot.ReadListBegin();
                  for( int _i373 = 0; _i373 < _list372.Count; ++_i373)
                  {
                    sbyte _elem374;
                    _elem374 = iprot.ReadByte();
                    Data.Add(_elem374);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_data_can_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Data.Count));
            foreach (sbyte _iter375 in Data)
            {
              oprot.WriteByte(_iter375);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_data_can_args(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_data_can_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public write_data_can_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_data_can_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_data_can_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_raw_data_can_args : TBase
  {
    private int _id;
    private List<sbyte> _data;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public List<sbyte> Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool data;
    }

    public write_raw_data_can_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Data = new List<sbyte>();
                  TList _list376 = iprot.ReadListBegin();
                  for( int _i377 = 0; _i377 < _list376.Count; ++_i377)
                  {
                    sbyte _elem378;
                    _elem378 = iprot.ReadByte();
                    Data.Add(_elem378);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_raw_data_can_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Data.Count));
            foreach (sbyte _iter379 in Data)
            {
              oprot.WriteByte(_iter379);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_raw_data_can_args(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_raw_data_can_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public write_raw_data_can_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_raw_data_can_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_raw_data_can_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_function_digital_in_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_function_digital_in_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_function_digital_in_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_function_digital_in_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_function_digital_in_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_function_digital_in_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_function_digital_in_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_function_digital_in_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_function_digital_out_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_function_digital_out_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_function_digital_out_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_function_digital_out_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_function_digital_out_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_function_digital_out_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_function_digital_out_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_function_digital_out_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_bool_reg_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public read_bool_reg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_bool_reg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_bool_reg_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_bool_reg_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public read_bool_reg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_bool_reg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_bool_reg_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_word_reg_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public read_word_reg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_word_reg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_word_reg_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_word_reg_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public read_word_reg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_word_reg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_word_reg_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_float_reg_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public read_float_reg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_float_reg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_float_reg_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class read_float_reg_result : TBase
  {
    private double _success;

    public double Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public read_float_reg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Double) {
                Success = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("read_float_reg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Double;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("read_float_reg_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_bool_reg_args : TBase
  {
    private short _num;
    private bool _value;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public bool Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool @value;
    }

    public write_bool_reg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Value = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_bool_reg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_bool_reg_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_bool_reg_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public write_bool_reg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_bool_reg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_bool_reg_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_word_reg_args : TBase
  {
    private short _num;
    private int _value;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool @value;
    }

    public write_word_reg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_word_reg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_word_reg_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_word_reg_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public write_word_reg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_word_reg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_word_reg_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_float_reg_args : TBase
  {
    private short _num;
    private double _value;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public double Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool @value;
    }

    public write_float_reg_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Value = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_float_reg_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_float_reg_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class write_float_reg_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public write_float_reg_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("write_float_reg_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("write_float_reg_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_function_reg_in_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_function_reg_in_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_function_reg_in_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_function_reg_in_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_function_reg_in_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_function_reg_in_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_function_reg_in_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_function_reg_in_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_function_reg_out_args : TBase
  {
    private short _num;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
    }

    public get_function_reg_out_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_function_reg_out_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_function_reg_out_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_function_reg_out_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_function_reg_out_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_function_reg_out_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_function_reg_out_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej_args : TBase
  {
    private List<double> _joints_list;
    private double _v;
    private double _a;
    private double _r;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> Joints_list
    {
      get
      {
        return _joints_list;
      }
      set
      {
        __isset.joints_list = true;
        this._joints_list = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool joints_list;
      public bool v;
      public bool a;
      public bool r;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public movej_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Joints_list = new List<double>();
                  TList _list380 = iprot.ReadListBegin();
                  for( int _i381 = 0; _i381 < _list380.Count; ++_i381)
                  {
                    double _elem382;
                    _elem382 = iprot.ReadDouble();
                    Joints_list.Add(_elem382);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Joints_list != null && __isset.joints_list) {
          field.Name = "joints_list";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Joints_list.Count));
            foreach (double _iter383 in Joints_list)
            {
              oprot.WriteDouble(_iter383);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej_args(");
      bool __first = true;
      if (Joints_list != null && __isset.joints_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Joints_list: ");
        __sb.Append(Joints_list);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public movej_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej_pose_args : TBase
  {
    private List<double> _p;
    private double _v;
    private double _a;
    private double _r;
    private List<double> _q_near;
    private string _tool;
    private string _wobj;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> P
    {
      get
      {
        return _p;
      }
      set
      {
        __isset.p = true;
        this._p = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public List<double> Q_near
    {
      get
      {
        return _q_near;
      }
      set
      {
        __isset.q_near = true;
        this._q_near = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p;
      public bool v;
      public bool a;
      public bool r;
      public bool q_near;
      public bool tool;
      public bool wobj;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public movej_pose_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P = new List<double>();
                  TList _list384 = iprot.ReadListBegin();
                  for( int _i385 = 0; _i385 < _list384.Count; ++_i385)
                  {
                    double _elem386;
                    _elem386 = iprot.ReadDouble();
                    P.Add(_elem386);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Q_near = new List<double>();
                  TList _list387 = iprot.ReadListBegin();
                  for( int _i388 = 0; _i388 < _list387.Count; ++_i388)
                  {
                    double _elem389;
                    _elem389 = iprot.ReadDouble();
                    Q_near.Add(_elem389);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej_pose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P != null && __isset.p) {
          field.Name = "p";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P.Count));
            foreach (double _iter390 in P)
            {
              oprot.WriteDouble(_iter390);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (Q_near != null && __isset.q_near) {
          field.Name = "q_near";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Q_near.Count));
            foreach (double _iter391 in Q_near)
            {
              oprot.WriteDouble(_iter391);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej_pose_args(");
      bool __first = true;
      if (P != null && __isset.p) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P: ");
        __sb.Append(P);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (Q_near != null && __isset.q_near) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Q_near: ");
        __sb.Append(Q_near);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej_pose_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public movej_pose_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej_pose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej_pose_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej2_args : TBase
  {
    private List<double> _joints_list;
    private double _v;
    private double _a;
    private double _r;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> Joints_list
    {
      get
      {
        return _joints_list;
      }
      set
      {
        __isset.joints_list = true;
        this._joints_list = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool joints_list;
      public bool v;
      public bool a;
      public bool r;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public movej2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Joints_list = new List<double>();
                  TList _list392 = iprot.ReadListBegin();
                  for( int _i393 = 0; _i393 < _list392.Count; ++_i393)
                  {
                    double _elem394;
                    _elem394 = iprot.ReadDouble();
                    Joints_list.Add(_elem394);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Joints_list != null && __isset.joints_list) {
          field.Name = "joints_list";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Joints_list.Count));
            foreach (double _iter395 in Joints_list)
            {
              oprot.WriteDouble(_iter395);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej2_args(");
      bool __first = true;
      if (Joints_list != null && __isset.joints_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Joints_list: ");
        __sb.Append(Joints_list);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej2_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public movej2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej2_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej_pose2_args : TBase
  {
    private List<double> _p;
    private double _v;
    private double _a;
    private double _r;
    private List<double> _q_near;
    private string _tool;
    private string _wobj;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> P
    {
      get
      {
        return _p;
      }
      set
      {
        __isset.p = true;
        this._p = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public List<double> Q_near
    {
      get
      {
        return _q_near;
      }
      set
      {
        __isset.q_near = true;
        this._q_near = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p;
      public bool v;
      public bool a;
      public bool r;
      public bool q_near;
      public bool tool;
      public bool wobj;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public movej_pose2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P = new List<double>();
                  TList _list396 = iprot.ReadListBegin();
                  for( int _i397 = 0; _i397 < _list396.Count; ++_i397)
                  {
                    double _elem398;
                    _elem398 = iprot.ReadDouble();
                    P.Add(_elem398);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Q_near = new List<double>();
                  TList _list399 = iprot.ReadListBegin();
                  for( int _i400 = 0; _i400 < _list399.Count; ++_i400)
                  {
                    double _elem401;
                    _elem401 = iprot.ReadDouble();
                    Q_near.Add(_elem401);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej_pose2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P != null && __isset.p) {
          field.Name = "p";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P.Count));
            foreach (double _iter402 in P)
            {
              oprot.WriteDouble(_iter402);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (Q_near != null && __isset.q_near) {
          field.Name = "q_near";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Q_near.Count));
            foreach (double _iter403 in Q_near)
            {
              oprot.WriteDouble(_iter403);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej_pose2_args(");
      bool __first = true;
      if (P != null && __isset.p) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P: ");
        __sb.Append(P);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (Q_near != null && __isset.q_near) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Q_near: ");
        __sb.Append(Q_near);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej_pose2_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public movej_pose2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej_pose2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej_pose2_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movel_args : TBase
  {
    private List<double> _p;
    private double _v;
    private double _a;
    private double _r;
    private List<double> _q_near;
    private string _tool;
    private string _wobj;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> P
    {
      get
      {
        return _p;
      }
      set
      {
        __isset.p = true;
        this._p = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public List<double> Q_near
    {
      get
      {
        return _q_near;
      }
      set
      {
        __isset.q_near = true;
        this._q_near = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p;
      public bool v;
      public bool a;
      public bool r;
      public bool q_near;
      public bool tool;
      public bool wobj;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public movel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P = new List<double>();
                  TList _list404 = iprot.ReadListBegin();
                  for( int _i405 = 0; _i405 < _list404.Count; ++_i405)
                  {
                    double _elem406;
                    _elem406 = iprot.ReadDouble();
                    P.Add(_elem406);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Q_near = new List<double>();
                  TList _list407 = iprot.ReadListBegin();
                  for( int _i408 = 0; _i408 < _list407.Count; ++_i408)
                  {
                    double _elem409;
                    _elem409 = iprot.ReadDouble();
                    Q_near.Add(_elem409);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P != null && __isset.p) {
          field.Name = "p";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P.Count));
            foreach (double _iter410 in P)
            {
              oprot.WriteDouble(_iter410);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (Q_near != null && __isset.q_near) {
          field.Name = "q_near";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Q_near.Count));
            foreach (double _iter411 in Q_near)
            {
              oprot.WriteDouble(_iter411);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movel_args(");
      bool __first = true;
      if (P != null && __isset.p) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P: ");
        __sb.Append(P);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (Q_near != null && __isset.q_near) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Q_near: ");
        __sb.Append(Q_near);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public movel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movec_args : TBase
  {
    private List<double> _p1;
    private List<double> _p2;
    private double _v;
    private double _a;
    private double _r;
    private int _mode;
    private List<double> _q_near;
    private string _tool;
    private string _wobj;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> P1
    {
      get
      {
        return _p1;
      }
      set
      {
        __isset.p1 = true;
        this._p1 = value;
      }
    }

    public List<double> P2
    {
      get
      {
        return _p2;
      }
      set
      {
        __isset.p2 = true;
        this._p2 = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public int Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public List<double> Q_near
    {
      get
      {
        return _q_near;
      }
      set
      {
        __isset.q_near = true;
        this._q_near = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p1;
      public bool p2;
      public bool v;
      public bool a;
      public bool r;
      public bool mode;
      public bool q_near;
      public bool tool;
      public bool wobj;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public movec_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P1 = new List<double>();
                  TList _list412 = iprot.ReadListBegin();
                  for( int _i413 = 0; _i413 < _list412.Count; ++_i413)
                  {
                    double _elem414;
                    _elem414 = iprot.ReadDouble();
                    P1.Add(_elem414);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  P2 = new List<double>();
                  TList _list415 = iprot.ReadListBegin();
                  for( int _i416 = 0; _i416 < _list415.Count; ++_i416)
                  {
                    double _elem417;
                    _elem417 = iprot.ReadDouble();
                    P2.Add(_elem417);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Mode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Q_near = new List<double>();
                  TList _list418 = iprot.ReadListBegin();
                  for( int _i419 = 0; _i419 < _list418.Count; ++_i419)
                  {
                    double _elem420;
                    _elem420 = iprot.ReadDouble();
                    Q_near.Add(_elem420);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movec_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P1 != null && __isset.p1) {
          field.Name = "p1";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P1.Count));
            foreach (double _iter421 in P1)
            {
              oprot.WriteDouble(_iter421);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (P2 != null && __isset.p2) {
          field.Name = "p2";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P2.Count));
            foreach (double _iter422 in P2)
            {
              oprot.WriteDouble(_iter422);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Mode);
          oprot.WriteFieldEnd();
        }
        if (Q_near != null && __isset.q_near) {
          field.Name = "q_near";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Q_near.Count));
            foreach (double _iter423 in Q_near)
            {
              oprot.WriteDouble(_iter423);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movec_args(");
      bool __first = true;
      if (P1 != null && __isset.p1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P1: ");
        __sb.Append(P1);
      }
      if (P2 != null && __isset.p2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P2: ");
        __sb.Append(P2);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (__isset.mode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mode: ");
        __sb.Append(Mode);
      }
      if (Q_near != null && __isset.q_near) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Q_near: ");
        __sb.Append(Q_near);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movec_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public movec_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movec_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movec_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class move_circle_args : TBase
  {
    private List<double> _p1;
    private List<double> _p2;
    private double _v;
    private double _a;
    private double _r;
    private int _mode;
    private List<double> _q_near;
    private string _tool;
    private string _wobj;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> P1
    {
      get
      {
        return _p1;
      }
      set
      {
        __isset.p1 = true;
        this._p1 = value;
      }
    }

    public List<double> P2
    {
      get
      {
        return _p2;
      }
      set
      {
        __isset.p2 = true;
        this._p2 = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public int Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public List<double> Q_near
    {
      get
      {
        return _q_near;
      }
      set
      {
        __isset.q_near = true;
        this._q_near = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p1;
      public bool p2;
      public bool v;
      public bool a;
      public bool r;
      public bool mode;
      public bool q_near;
      public bool tool;
      public bool wobj;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public move_circle_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P1 = new List<double>();
                  TList _list424 = iprot.ReadListBegin();
                  for( int _i425 = 0; _i425 < _list424.Count; ++_i425)
                  {
                    double _elem426;
                    _elem426 = iprot.ReadDouble();
                    P1.Add(_elem426);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  P2 = new List<double>();
                  TList _list427 = iprot.ReadListBegin();
                  for( int _i428 = 0; _i428 < _list427.Count; ++_i428)
                  {
                    double _elem429;
                    _elem429 = iprot.ReadDouble();
                    P2.Add(_elem429);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Mode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Q_near = new List<double>();
                  TList _list430 = iprot.ReadListBegin();
                  for( int _i431 = 0; _i431 < _list430.Count; ++_i431)
                  {
                    double _elem432;
                    _elem432 = iprot.ReadDouble();
                    Q_near.Add(_elem432);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("move_circle_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P1 != null && __isset.p1) {
          field.Name = "p1";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P1.Count));
            foreach (double _iter433 in P1)
            {
              oprot.WriteDouble(_iter433);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (P2 != null && __isset.p2) {
          field.Name = "p2";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P2.Count));
            foreach (double _iter434 in P2)
            {
              oprot.WriteDouble(_iter434);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Mode);
          oprot.WriteFieldEnd();
        }
        if (Q_near != null && __isset.q_near) {
          field.Name = "q_near";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Q_near.Count));
            foreach (double _iter435 in Q_near)
            {
              oprot.WriteDouble(_iter435);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("move_circle_args(");
      bool __first = true;
      if (P1 != null && __isset.p1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P1: ");
        __sb.Append(P1);
      }
      if (P2 != null && __isset.p2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P2: ");
        __sb.Append(P2);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (__isset.mode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mode: ");
        __sb.Append(Mode);
      }
      if (Q_near != null && __isset.q_near) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Q_near: ");
        __sb.Append(Q_near);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class move_circle_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public move_circle_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("move_circle_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("move_circle_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tcp_move_args : TBase
  {
    private List<double> _pose_offset;
    private double _v;
    private double _a;
    private double _r;
    private string _tool;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> Pose_offset
    {
      get
      {
        return _pose_offset;
      }
      set
      {
        __isset.pose_offset = true;
        this._pose_offset = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pose_offset;
      public bool v;
      public bool a;
      public bool r;
      public bool tool;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public tcp_move_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Pose_offset = new List<double>();
                  TList _list436 = iprot.ReadListBegin();
                  for( int _i437 = 0; _i437 < _list436.Count; ++_i437)
                  {
                    double _elem438;
                    _elem438 = iprot.ReadDouble();
                    Pose_offset.Add(_elem438);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tcp_move_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Pose_offset != null && __isset.pose_offset) {
          field.Name = "pose_offset";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Pose_offset.Count));
            foreach (double _iter439 in Pose_offset)
            {
              oprot.WriteDouble(_iter439);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tcp_move_args(");
      bool __first = true;
      if (Pose_offset != null && __isset.pose_offset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pose_offset: ");
        __sb.Append(Pose_offset);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tcp_move_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tcp_move_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tcp_move_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tcp_move_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tcp_move_2p_args : TBase
  {
    private List<double> _p1;
    private List<double> _p2;
    private double _v;
    private double _a;
    private double _r;
    private string _tool;
    private string _wobj;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> P1
    {
      get
      {
        return _p1;
      }
      set
      {
        __isset.p1 = true;
        this._p1 = value;
      }
    }

    public List<double> P2
    {
      get
      {
        return _p2;
      }
      set
      {
        __isset.p2 = true;
        this._p2 = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p1;
      public bool p2;
      public bool v;
      public bool a;
      public bool r;
      public bool tool;
      public bool wobj;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public tcp_move_2p_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P1 = new List<double>();
                  TList _list440 = iprot.ReadListBegin();
                  for( int _i441 = 0; _i441 < _list440.Count; ++_i441)
                  {
                    double _elem442;
                    _elem442 = iprot.ReadDouble();
                    P1.Add(_elem442);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  P2 = new List<double>();
                  TList _list443 = iprot.ReadListBegin();
                  for( int _i444 = 0; _i444 < _list443.Count; ++_i444)
                  {
                    double _elem445;
                    _elem445 = iprot.ReadDouble();
                    P2.Add(_elem445);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tcp_move_2p_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P1 != null && __isset.p1) {
          field.Name = "p1";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P1.Count));
            foreach (double _iter446 in P1)
            {
              oprot.WriteDouble(_iter446);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (P2 != null && __isset.p2) {
          field.Name = "p2";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P2.Count));
            foreach (double _iter447 in P2)
            {
              oprot.WriteDouble(_iter447);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tcp_move_2p_args(");
      bool __first = true;
      if (P1 != null && __isset.p1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P1: ");
        __sb.Append(P1);
      }
      if (P2 != null && __isset.p2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P2: ");
        __sb.Append(P2);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tcp_move_2p_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tcp_move_2p_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tcp_move_2p_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tcp_move_2p_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class spline_args : TBase
  {
    private List<List<double>> _pose_list;
    private double _v;
    private double _a;
    private string _tool;
    private string _wobj;
    private bool _block;
    private Op _op;
    private double _r;
    private bool _def_acc;

    public List<List<double>> Pose_list
    {
      get
      {
        return _pose_list;
      }
      set
      {
        __isset.pose_list = true;
        this._pose_list = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pose_list;
      public bool v;
      public bool a;
      public bool tool;
      public bool wobj;
      public bool block;
      public bool op;
      public bool r;
      public bool def_acc;
    }

    public spline_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Pose_list = new List<List<double>>();
                  TList _list448 = iprot.ReadListBegin();
                  for( int _i449 = 0; _i449 < _list448.Count; ++_i449)
                  {
                    List<double> _elem450;
                    {
                      _elem450 = new List<double>();
                      TList _list451 = iprot.ReadListBegin();
                      for( int _i452 = 0; _i452 < _list451.Count; ++_i452)
                      {
                        double _elem453;
                        _elem453 = iprot.ReadDouble();
                        _elem450.Add(_elem453);
                      }
                      iprot.ReadListEnd();
                    }
                    Pose_list.Add(_elem450);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("spline_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Pose_list != null && __isset.pose_list) {
          field.Name = "pose_list";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Pose_list.Count));
            foreach (List<double> _iter454 in Pose_list)
            {
              {
                oprot.WriteListBegin(new TList(TType.Double, _iter454.Count));
                foreach (double _iter455 in _iter454)
                {
                  oprot.WriteDouble(_iter455);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("spline_args(");
      bool __first = true;
      if (Pose_list != null && __isset.pose_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pose_list: ");
        __sb.Append(Pose_list);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class spline_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public spline_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("spline_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("spline_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class speedj_args : TBase
  {
    private List<double> _joints_list;
    private double _a;
    private int _time;
    private bool _block;

    public List<double> Joints_list
    {
      get
      {
        return _joints_list;
      }
      set
      {
        __isset.joints_list = true;
        this._joints_list = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public int Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool joints_list;
      public bool a;
      public bool time;
      public bool block;
    }

    public speedj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Joints_list = new List<double>();
                  TList _list456 = iprot.ReadListBegin();
                  for( int _i457 = 0; _i457 < _list456.Count; ++_i457)
                  {
                    double _elem458;
                    _elem458 = iprot.ReadDouble();
                    Joints_list.Add(_elem458);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Time = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("speedj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Joints_list != null && __isset.joints_list) {
          field.Name = "joints_list";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Joints_list.Count));
            foreach (double _iter459 in Joints_list)
            {
              oprot.WriteDouble(_iter459);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Time);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("speedj_args(");
      bool __first = true;
      if (Joints_list != null && __isset.joints_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Joints_list: ");
        __sb.Append(Joints_list);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class speedj_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public speedj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("speedj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("speedj_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class speedl_args : TBase
  {
    private List<double> _pose_list;
    private double _a;
    private int _time;
    private bool _block;

    public List<double> Pose_list
    {
      get
      {
        return _pose_list;
      }
      set
      {
        __isset.pose_list = true;
        this._pose_list = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public int Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pose_list;
      public bool a;
      public bool time;
      public bool block;
    }

    public speedl_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Pose_list = new List<double>();
                  TList _list460 = iprot.ReadListBegin();
                  for( int _i461 = 0; _i461 < _list460.Count; ++_i461)
                  {
                    double _elem462;
                    _elem462 = iprot.ReadDouble();
                    Pose_list.Add(_elem462);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Time = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("speedl_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Pose_list != null && __isset.pose_list) {
          field.Name = "pose_list";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Pose_list.Count));
            foreach (double _iter463 in Pose_list)
            {
              oprot.WriteDouble(_iter463);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Time);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("speedl_args(");
      bool __first = true;
      if (Pose_list != null && __isset.pose_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pose_list: ");
        __sb.Append(Pose_list);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class speedl_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public speedl_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("speedl_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("speedl_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class speed_stop_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public speed_stop_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("speed_stop_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("speed_stop_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class speed_stop_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public speed_stop_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("speed_stop_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("speed_stop_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class servoj_args : TBase
  {
    private List<double> _joints_list;
    private double _v;
    private double _a;
    private bool _block;
    private double _kp;
    private double _kd;

    public List<double> Joints_list
    {
      get
      {
        return _joints_list;
      }
      set
      {
        __isset.joints_list = true;
        this._joints_list = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public double Kp
    {
      get
      {
        return _kp;
      }
      set
      {
        __isset.kp = true;
        this._kp = value;
      }
    }

    public double Kd
    {
      get
      {
        return _kd;
      }
      set
      {
        __isset.kd = true;
        this._kd = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool joints_list;
      public bool v;
      public bool a;
      public bool block;
      public bool kp;
      public bool kd;
    }

    public servoj_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Joints_list = new List<double>();
                  TList _list464 = iprot.ReadListBegin();
                  for( int _i465 = 0; _i465 < _list464.Count; ++_i465)
                  {
                    double _elem466;
                    _elem466 = iprot.ReadDouble();
                    Joints_list.Add(_elem466);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                Kp = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                Kd = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("servoj_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Joints_list != null && __isset.joints_list) {
          field.Name = "joints_list";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Joints_list.Count));
            foreach (double _iter467 in Joints_list)
            {
              oprot.WriteDouble(_iter467);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (__isset.kp) {
          field.Name = "kp";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Kp);
          oprot.WriteFieldEnd();
        }
        if (__isset.kd) {
          field.Name = "kd";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Kd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("servoj_args(");
      bool __first = true;
      if (Joints_list != null && __isset.joints_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Joints_list: ");
        __sb.Append(Joints_list);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (__isset.kp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Kp: ");
        __sb.Append(Kp);
      }
      if (__isset.kd) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Kd: ");
        __sb.Append(Kd);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class servoj_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public servoj_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("servoj_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("servoj_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class servoj_pose_args : TBase
  {
    private List<double> _pose_list;
    private double _v;
    private double _a;
    private List<double> _q_near;
    private string _tool;
    private string _wobj;
    private bool _block;
    private double _kp;
    private double _kd;

    public List<double> Pose_list
    {
      get
      {
        return _pose_list;
      }
      set
      {
        __isset.pose_list = true;
        this._pose_list = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public List<double> Q_near
    {
      get
      {
        return _q_near;
      }
      set
      {
        __isset.q_near = true;
        this._q_near = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public double Kp
    {
      get
      {
        return _kp;
      }
      set
      {
        __isset.kp = true;
        this._kp = value;
      }
    }

    public double Kd
    {
      get
      {
        return _kd;
      }
      set
      {
        __isset.kd = true;
        this._kd = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pose_list;
      public bool v;
      public bool a;
      public bool q_near;
      public bool tool;
      public bool wobj;
      public bool block;
      public bool kp;
      public bool kd;
    }

    public servoj_pose_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Pose_list = new List<double>();
                  TList _list468 = iprot.ReadListBegin();
                  for( int _i469 = 0; _i469 < _list468.Count; ++_i469)
                  {
                    double _elem470;
                    _elem470 = iprot.ReadDouble();
                    Pose_list.Add(_elem470);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Q_near = new List<double>();
                  TList _list471 = iprot.ReadListBegin();
                  for( int _i472 = 0; _i472 < _list471.Count; ++_i472)
                  {
                    double _elem473;
                    _elem473 = iprot.ReadDouble();
                    Q_near.Add(_elem473);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Double) {
                Kp = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Double) {
                Kd = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("servoj_pose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Pose_list != null && __isset.pose_list) {
          field.Name = "pose_list";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Pose_list.Count));
            foreach (double _iter474 in Pose_list)
            {
              oprot.WriteDouble(_iter474);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (Q_near != null && __isset.q_near) {
          field.Name = "q_near";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Q_near.Count));
            foreach (double _iter475 in Q_near)
            {
              oprot.WriteDouble(_iter475);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (__isset.kp) {
          field.Name = "kp";
          field.Type = TType.Double;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Kp);
          oprot.WriteFieldEnd();
        }
        if (__isset.kd) {
          field.Name = "kd";
          field.Type = TType.Double;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Kd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("servoj_pose_args(");
      bool __first = true;
      if (Pose_list != null && __isset.pose_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pose_list: ");
        __sb.Append(Pose_list);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (Q_near != null && __isset.q_near) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Q_near: ");
        __sb.Append(Q_near);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (__isset.kp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Kp: ");
        __sb.Append(Kp);
      }
      if (__isset.kd) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Kd: ");
        __sb.Append(Kd);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class servoj_pose_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public servoj_pose_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("servoj_pose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("servoj_pose_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class servo_tcp_args : TBase
  {
    private List<double> _pose_offset;
    private double _v;
    private double _a;
    private string _tool;
    private bool _block;
    private double _kp;
    private double _kd;

    public List<double> Pose_offset
    {
      get
      {
        return _pose_offset;
      }
      set
      {
        __isset.pose_offset = true;
        this._pose_offset = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public double Kp
    {
      get
      {
        return _kp;
      }
      set
      {
        __isset.kp = true;
        this._kp = value;
      }
    }

    public double Kd
    {
      get
      {
        return _kd;
      }
      set
      {
        __isset.kd = true;
        this._kd = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pose_offset;
      public bool v;
      public bool a;
      public bool tool;
      public bool block;
      public bool kp;
      public bool kd;
    }

    public servo_tcp_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Pose_offset = new List<double>();
                  TList _list476 = iprot.ReadListBegin();
                  for( int _i477 = 0; _i477 < _list476.Count; ++_i477)
                  {
                    double _elem478;
                    _elem478 = iprot.ReadDouble();
                    Pose_offset.Add(_elem478);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                Kp = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Double) {
                Kd = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("servo_tcp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Pose_offset != null && __isset.pose_offset) {
          field.Name = "pose_offset";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Pose_offset.Count));
            foreach (double _iter479 in Pose_offset)
            {
              oprot.WriteDouble(_iter479);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (__isset.kp) {
          field.Name = "kp";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Kp);
          oprot.WriteFieldEnd();
        }
        if (__isset.kd) {
          field.Name = "kd";
          field.Type = TType.Double;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Kd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("servo_tcp_args(");
      bool __first = true;
      if (Pose_offset != null && __isset.pose_offset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pose_offset: ");
        __sb.Append(Pose_offset);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (__isset.kp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Kp: ");
        __sb.Append(Kp);
      }
      if (__isset.kd) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Kd: ");
        __sb.Append(Kd);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class servo_tcp_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public servo_tcp_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("servo_tcp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("servo_tcp_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class teach_mode_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public teach_mode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("teach_mode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("teach_mode_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class teach_mode_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public teach_mode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("teach_mode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("teach_mode_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class end_teach_mode_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public end_teach_mode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("end_teach_mode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("end_teach_mode_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class end_teach_mode_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public end_teach_mode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("end_teach_mode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("end_teach_mode_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_add_signal_args : TBase
  {
    private string _ip;
    private int _slave_number;
    private int _signal_address;
    private int _signal_type;
    private string _signal_name;

    public string Ip
    {
      get
      {
        return _ip;
      }
      set
      {
        __isset.ip = true;
        this._ip = value;
      }
    }

    public int Slave_number
    {
      get
      {
        return _slave_number;
      }
      set
      {
        __isset.slave_number = true;
        this._slave_number = value;
      }
    }

    public int Signal_address
    {
      get
      {
        return _signal_address;
      }
      set
      {
        __isset.signal_address = true;
        this._signal_address = value;
      }
    }

    public int Signal_type
    {
      get
      {
        return _signal_type;
      }
      set
      {
        __isset.signal_type = true;
        this._signal_type = value;
      }
    }

    public string Signal_name
    {
      get
      {
        return _signal_name;
      }
      set
      {
        __isset.signal_name = true;
        this._signal_name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ip;
      public bool slave_number;
      public bool signal_address;
      public bool signal_type;
      public bool signal_name;
    }

    public modbus_add_signal_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ip = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Slave_number = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Signal_address = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Signal_type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Signal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_add_signal_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ip != null && __isset.ip) {
          field.Name = "ip";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ip);
          oprot.WriteFieldEnd();
        }
        if (__isset.slave_number) {
          field.Name = "slave_number";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Slave_number);
          oprot.WriteFieldEnd();
        }
        if (__isset.signal_address) {
          field.Name = "signal_address";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Signal_address);
          oprot.WriteFieldEnd();
        }
        if (__isset.signal_type) {
          field.Name = "signal_type";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Signal_type);
          oprot.WriteFieldEnd();
        }
        if (Signal_name != null && __isset.signal_name) {
          field.Name = "signal_name";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Signal_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_add_signal_args(");
      bool __first = true;
      if (Ip != null && __isset.ip) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ip: ");
        __sb.Append(Ip);
      }
      if (__isset.slave_number) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Slave_number: ");
        __sb.Append(Slave_number);
      }
      if (__isset.signal_address) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signal_address: ");
        __sb.Append(Signal_address);
      }
      if (__isset.signal_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signal_type: ");
        __sb.Append(Signal_type);
      }
      if (Signal_name != null && __isset.signal_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signal_name: ");
        __sb.Append(Signal_name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_add_signal_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public modbus_add_signal_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_add_signal_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_add_signal_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_delete_signal_args : TBase
  {
    private string _signal_name;

    public string Signal_name
    {
      get
      {
        return _signal_name;
      }
      set
      {
        __isset.signal_name = true;
        this._signal_name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool signal_name;
    }

    public modbus_delete_signal_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Signal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_delete_signal_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Signal_name != null && __isset.signal_name) {
          field.Name = "signal_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Signal_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_delete_signal_args(");
      bool __first = true;
      if (Signal_name != null && __isset.signal_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signal_name: ");
        __sb.Append(Signal_name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_delete_signal_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public modbus_delete_signal_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_delete_signal_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_delete_signal_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_read_args : TBase
  {
    private string _signal_name;

    public string Signal_name
    {
      get
      {
        return _signal_name;
      }
      set
      {
        __isset.signal_name = true;
        this._signal_name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool signal_name;
    }

    public modbus_read_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Signal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_read_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Signal_name != null && __isset.signal_name) {
          field.Name = "signal_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Signal_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_read_args(");
      bool __first = true;
      if (Signal_name != null && __isset.signal_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signal_name: ");
        __sb.Append(Signal_name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_read_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public modbus_read_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_read_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_read_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_write_args : TBase
  {
    private string _signal_name;
    private int _value;

    public string Signal_name
    {
      get
      {
        return _signal_name;
      }
      set
      {
        __isset.signal_name = true;
        this._signal_name = value;
      }
    }

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool signal_name;
      public bool @value;
    }

    public modbus_write_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Signal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_write_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Signal_name != null && __isset.signal_name) {
          field.Name = "signal_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Signal_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_write_args(");
      bool __first = true;
      if (Signal_name != null && __isset.signal_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signal_name: ");
        __sb.Append(Signal_name);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_write_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public modbus_write_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_write_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_write_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_set_frequency_args : TBase
  {
    private string _signal_name;
    private int _frequence;

    public string Signal_name
    {
      get
      {
        return _signal_name;
      }
      set
      {
        __isset.signal_name = true;
        this._signal_name = value;
      }
    }

    public int Frequence
    {
      get
      {
        return _frequence;
      }
      set
      {
        __isset.frequence = true;
        this._frequence = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool signal_name;
      public bool frequence;
    }

    public modbus_set_frequency_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Signal_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Frequence = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_set_frequency_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Signal_name != null && __isset.signal_name) {
          field.Name = "signal_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Signal_name);
          oprot.WriteFieldEnd();
        }
        if (__isset.frequence) {
          field.Name = "frequence";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Frequence);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_set_frequency_args(");
      bool __first = true;
      if (Signal_name != null && __isset.signal_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signal_name: ");
        __sb.Append(Signal_name);
      }
      if (__isset.frequence) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Frequence: ");
        __sb.Append(Frequence);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_set_frequency_result : TBase
  {

    public modbus_set_frequency_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_set_frequency_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_set_frequency_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_last_error_args : TBase
  {

    public get_last_error_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_last_error_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_last_error_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_last_error_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_last_error_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list480 = iprot.ReadListBegin();
                  for( int _i481 = 0; _i481 < _list480.Count; ++_i481)
                  {
                    string _elem482;
                    _elem482 = iprot.ReadString();
                    Success.Add(_elem482);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_last_error_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter483 in Success)
              {
                oprot.WriteString(_iter483);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_last_error_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_noneblock_taskstate_args : TBase
  {
    private int _id;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public get_noneblock_taskstate_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_noneblock_taskstate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_noneblock_taskstate_args(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_noneblock_taskstate_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_noneblock_taskstate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_noneblock_taskstate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_noneblock_taskstate_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class log_info_args : TBase
  {
    private string _message;

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool message;
    }

    public log_info_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Message = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("log_info_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Message);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("log_info_args(");
      bool __first = true;
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class log_info_result : TBase
  {

    public log_info_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("log_info_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("log_info_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class log_error_args : TBase
  {
    private string _message;

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool message;
    }

    public log_error_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Message = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("log_error_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Message);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("log_error_args(");
      bool __first = true;
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class log_error_result : TBase
  {

    public log_error_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("log_error_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("log_error_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class simulation_args : TBase
  {
    private bool _sim;
    private bool _block;

    public bool Sim
    {
      get
      {
        return _sim;
      }
      set
      {
        __isset.sim = true;
        this._sim = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sim;
      public bool block;
    }

    public simulation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Sim = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("simulation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sim) {
          field.Name = "sim";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Sim);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("simulation_args(");
      bool __first = true;
      if (__isset.sim) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sim: ");
        __sb.Append(Sim);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class simulation_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public simulation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("simulation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("simulation_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class speed_args : TBase
  {
    private double _val;

    public double Val
    {
      get
      {
        return _val;
      }
      set
      {
        __isset.val = true;
        this._val = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool val;
    }

    public speed_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double) {
                Val = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("speed_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.val) {
          field.Name = "val";
          field.Type = TType.Double;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Val);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("speed_args(");
      bool __first = true;
      if (__isset.val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Val: ");
        __sb.Append(Val);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class speed_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public speed_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("speed_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("speed_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_robot_state_args : TBase
  {

    public get_robot_state_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_robot_state_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_robot_state_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_robot_state_result : TBase
  {
    private List<sbyte> _success;

    public List<sbyte> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_robot_state_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<sbyte>();
                  TList _list484 = iprot.ReadListBegin();
                  for( int _i485 = 0; _i485 < _list484.Count; ++_i485)
                  {
                    sbyte _elem486;
                    _elem486 = iprot.ReadByte();
                    Success.Add(_elem486);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_robot_state_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Byte, Success.Count));
              foreach (sbyte _iter487 in Success)
              {
                oprot.WriteByte(_iter487);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_robot_state_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_flange_pose_args : TBase
  {

    public get_flange_pose_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_flange_pose_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_flange_pose_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_flange_pose_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_flange_pose_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list488 = iprot.ReadListBegin();
                  for( int _i489 = 0; _i489 < _list488.Count; ++_i489)
                  {
                    double _elem490;
                    _elem490 = iprot.ReadDouble();
                    Success.Add(_elem490);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_flange_pose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter491 in Success)
              {
                oprot.WriteDouble(_iter491);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_flange_pose_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_flange_speed_args : TBase
  {

    public get_flange_speed_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_flange_speed_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_flange_speed_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_flange_speed_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_flange_speed_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list492 = iprot.ReadListBegin();
                  for( int _i493 = 0; _i493 < _list492.Count; ++_i493)
                  {
                    double _elem494;
                    _elem494 = iprot.ReadDouble();
                    Success.Add(_elem494);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_flange_speed_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter495 in Success)
              {
                oprot.WriteDouble(_iter495);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_flange_speed_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_flange_acceleration_args : TBase
  {

    public get_flange_acceleration_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_flange_acceleration_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_flange_acceleration_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_flange_acceleration_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_flange_acceleration_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list496 = iprot.ReadListBegin();
                  for( int _i497 = 0; _i497 < _list496.Count; ++_i497)
                  {
                    double _elem498;
                    _elem498 = iprot.ReadDouble();
                    Success.Add(_elem498);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_flange_acceleration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter499 in Success)
              {
                oprot.WriteDouble(_iter499);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_flange_acceleration_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_pose_args : TBase
  {

    public get_tcp_pose_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_pose_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_pose_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_pose_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tcp_pose_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list500 = iprot.ReadListBegin();
                  for( int _i501 = 0; _i501 < _list500.Count; ++_i501)
                  {
                    double _elem502;
                    _elem502 = iprot.ReadDouble();
                    Success.Add(_elem502);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_pose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter503 in Success)
              {
                oprot.WriteDouble(_iter503);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_pose_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_speed_args : TBase
  {

    public get_tcp_speed_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_speed_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_speed_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_speed_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tcp_speed_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list504 = iprot.ReadListBegin();
                  for( int _i505 = 0; _i505 < _list504.Count; ++_i505)
                  {
                    double _elem506;
                    _elem506 = iprot.ReadDouble();
                    Success.Add(_elem506);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_speed_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter507 in Success)
              {
                oprot.WriteDouble(_iter507);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_speed_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_acceleration_args : TBase
  {

    public get_tcp_acceleration_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_acceleration_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_acceleration_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_acceleration_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tcp_acceleration_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list508 = iprot.ReadListBegin();
                  for( int _i509 = 0; _i509 < _list508.Count; ++_i509)
                  {
                    double _elem510;
                    _elem510 = iprot.ReadDouble();
                    Success.Add(_elem510);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_acceleration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter511 in Success)
              {
                oprot.WriteDouble(_iter511);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_acceleration_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_force_args : TBase
  {

    public get_tcp_force_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_force_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_force_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_force_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tcp_force_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list512 = iprot.ReadListBegin();
                  for( int _i513 = 0; _i513 < _list512.Count; ++_i513)
                  {
                    double _elem514;
                    _elem514 = iprot.ReadDouble();
                    Success.Add(_elem514);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_force_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter515 in Success)
              {
                oprot.WriteDouble(_iter515);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_force_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_actual_joints_position_args : TBase
  {

    public get_actual_joints_position_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_actual_joints_position_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_actual_joints_position_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_actual_joints_position_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_actual_joints_position_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list516 = iprot.ReadListBegin();
                  for( int _i517 = 0; _i517 < _list516.Count; ++_i517)
                  {
                    double _elem518;
                    _elem518 = iprot.ReadDouble();
                    Success.Add(_elem518);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_actual_joints_position_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter519 in Success)
              {
                oprot.WriteDouble(_iter519);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_actual_joints_position_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_target_joints_position_args : TBase
  {

    public get_target_joints_position_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_target_joints_position_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_target_joints_position_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_target_joints_position_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_target_joints_position_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list520 = iprot.ReadListBegin();
                  for( int _i521 = 0; _i521 < _list520.Count; ++_i521)
                  {
                    double _elem522;
                    _elem522 = iprot.ReadDouble();
                    Success.Add(_elem522);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_target_joints_position_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter523 in Success)
              {
                oprot.WriteDouble(_iter523);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_target_joints_position_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_actual_joints_speed_args : TBase
  {

    public get_actual_joints_speed_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_actual_joints_speed_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_actual_joints_speed_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_actual_joints_speed_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_actual_joints_speed_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list524 = iprot.ReadListBegin();
                  for( int _i525 = 0; _i525 < _list524.Count; ++_i525)
                  {
                    double _elem526;
                    _elem526 = iprot.ReadDouble();
                    Success.Add(_elem526);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_actual_joints_speed_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter527 in Success)
              {
                oprot.WriteDouble(_iter527);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_actual_joints_speed_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_target_joints_speed_args : TBase
  {

    public get_target_joints_speed_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_target_joints_speed_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_target_joints_speed_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_target_joints_speed_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_target_joints_speed_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list528 = iprot.ReadListBegin();
                  for( int _i529 = 0; _i529 < _list528.Count; ++_i529)
                  {
                    double _elem530;
                    _elem530 = iprot.ReadDouble();
                    Success.Add(_elem530);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_target_joints_speed_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter531 in Success)
              {
                oprot.WriteDouble(_iter531);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_target_joints_speed_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_actual_joints_acceleration_args : TBase
  {

    public get_actual_joints_acceleration_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_actual_joints_acceleration_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_actual_joints_acceleration_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_actual_joints_acceleration_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_actual_joints_acceleration_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list532 = iprot.ReadListBegin();
                  for( int _i533 = 0; _i533 < _list532.Count; ++_i533)
                  {
                    double _elem534;
                    _elem534 = iprot.ReadDouble();
                    Success.Add(_elem534);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_actual_joints_acceleration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter535 in Success)
              {
                oprot.WriteDouble(_iter535);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_actual_joints_acceleration_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_target_joints_acceleration_args : TBase
  {

    public get_target_joints_acceleration_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_target_joints_acceleration_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_target_joints_acceleration_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_target_joints_acceleration_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_target_joints_acceleration_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list536 = iprot.ReadListBegin();
                  for( int _i537 = 0; _i537 < _list536.Count; ++_i537)
                  {
                    double _elem538;
                    _elem538 = iprot.ReadDouble();
                    Success.Add(_elem538);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_target_joints_acceleration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter539 in Success)
              {
                oprot.WriteDouble(_iter539);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_target_joints_acceleration_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_actual_joints_torque_args : TBase
  {

    public get_actual_joints_torque_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_actual_joints_torque_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_actual_joints_torque_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_actual_joints_torque_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_actual_joints_torque_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list540 = iprot.ReadListBegin();
                  for( int _i541 = 0; _i541 < _list540.Count; ++_i541)
                  {
                    double _elem542;
                    _elem542 = iprot.ReadDouble();
                    Success.Add(_elem542);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_actual_joints_torque_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter543 in Success)
              {
                oprot.WriteDouble(_iter543);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_actual_joints_torque_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_target_joints_torque_args : TBase
  {

    public get_target_joints_torque_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_target_joints_torque_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_target_joints_torque_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_target_joints_torque_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_target_joints_torque_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list544 = iprot.ReadListBegin();
                  for( int _i545 = 0; _i545 < _list544.Count; ++_i545)
                  {
                    double _elem546;
                    _elem546 = iprot.ReadDouble();
                    Success.Add(_elem546);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_target_joints_torque_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter547 in Success)
              {
                oprot.WriteDouble(_iter547);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_target_joints_torque_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class stop_record_track_args : TBase
  {

    public stop_record_track_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("stop_record_track_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("stop_record_track_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class stop_record_track_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public stop_record_track_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("stop_record_track_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("stop_record_track_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class start_record_track_args : TBase
  {
    private string _name;
    private int _mode;
    private string _tool;
    private string _wobj;
    private double _interval;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public double Interval
    {
      get
      {
        return _interval;
      }
      set
      {
        __isset.interval = true;
        this._interval = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool mode;
      public bool tool;
      public bool wobj;
      public bool interval;
    }

    public start_record_track_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Mode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                Interval = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("start_record_track_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Mode);
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.interval) {
          field.Name = "interval";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Interval);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("start_record_track_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.mode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mode: ");
        __sb.Append(Mode);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.interval) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Interval: ");
        __sb.Append(Interval);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class start_record_track_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public start_record_track_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("start_record_track_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("start_record_track_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class collision_detect_args : TBase
  {
    private int _value;

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool @value;
    }

    public collision_detect_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("collision_detect_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("collision_detect_args(");
      bool __first = true;
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class collision_detect_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public collision_detect_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("collision_detect_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("collision_detect_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class replay_args : TBase
  {
    private string _name;
    private int _value;
    private int _mode;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public int Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool @value;
      public bool mode;
    }

    public replay_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Mode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("replay_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Value);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Mode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("replay_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (__isset.mode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mode: ");
        __sb.Append(Mode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class replay_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public replay_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("replay_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("replay_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_load_data_args : TBase
  {
    private List<double> _value;

    public List<double> Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool @value;
    }

    public set_load_data_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Value = new List<double>();
                  TList _list548 = iprot.ReadListBegin();
                  for( int _i549 = 0; _i549 < _list548.Count; ++_i549)
                  {
                    double _elem550;
                    _elem550 = iprot.ReadDouble();
                    Value.Add(_elem550);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_load_data_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Value.Count));
            foreach (double _iter551 in Value)
            {
              oprot.WriteDouble(_iter551);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_load_data_args(");
      bool __first = true;
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_load_data_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_load_data_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_load_data_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_load_data_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_start_args : TBase
  {

    public fc_start_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_start_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_start_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_start_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_start_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_start_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_start_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_stop_args : TBase
  {

    public fc_stop_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_stop_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_stop_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_stop_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_stop_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_stop_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_stop_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_config_args : TBase
  {
    private List<bool> _direction;
    private List<double> _ref_ft;
    private List<double> _damp;
    private List<double> _max_vel;
    private List<double> _number_list;
    private string _tool;
    private string _wobj;
    private int _value;

    public List<bool> Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        this._direction = value;
      }
    }

    public List<double> Ref_ft
    {
      get
      {
        return _ref_ft;
      }
      set
      {
        __isset.ref_ft = true;
        this._ref_ft = value;
      }
    }

    public List<double> Damp
    {
      get
      {
        return _damp;
      }
      set
      {
        __isset.damp = true;
        this._damp = value;
      }
    }

    public List<double> Max_vel
    {
      get
      {
        return _max_vel;
      }
      set
      {
        __isset.max_vel = true;
        this._max_vel = value;
      }
    }

    public List<double> Number_list
    {
      get
      {
        return _number_list;
      }
      set
      {
        __isset.number_list = true;
        this._number_list = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool direction;
      public bool ref_ft;
      public bool damp;
      public bool max_vel;
      public bool number_list;
      public bool tool;
      public bool wobj;
      public bool @value;
    }

    public fc_config_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Direction = new List<bool>();
                  TList _list552 = iprot.ReadListBegin();
                  for( int _i553 = 0; _i553 < _list552.Count; ++_i553)
                  {
                    bool _elem554;
                    _elem554 = iprot.ReadBool();
                    Direction.Add(_elem554);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Ref_ft = new List<double>();
                  TList _list555 = iprot.ReadListBegin();
                  for( int _i556 = 0; _i556 < _list555.Count; ++_i556)
                  {
                    double _elem557;
                    _elem557 = iprot.ReadDouble();
                    Ref_ft.Add(_elem557);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Damp = new List<double>();
                  TList _list558 = iprot.ReadListBegin();
                  for( int _i559 = 0; _i559 < _list558.Count; ++_i559)
                  {
                    double _elem560;
                    _elem560 = iprot.ReadDouble();
                    Damp.Add(_elem560);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Max_vel = new List<double>();
                  TList _list561 = iprot.ReadListBegin();
                  for( int _i562 = 0; _i562 < _list561.Count; ++_i562)
                  {
                    double _elem563;
                    _elem563 = iprot.ReadDouble();
                    Max_vel.Add(_elem563);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Number_list = new List<double>();
                  TList _list564 = iprot.ReadListBegin();
                  for( int _i565 = 0; _i565 < _list564.Count; ++_i565)
                  {
                    double _elem566;
                    _elem566 = iprot.ReadDouble();
                    Number_list.Add(_elem566);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                Value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_config_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Direction != null && __isset.direction) {
          field.Name = "direction";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Bool, Direction.Count));
            foreach (bool _iter567 in Direction)
            {
              oprot.WriteBool(_iter567);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Ref_ft != null && __isset.ref_ft) {
          field.Name = "ref_ft";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Ref_ft.Count));
            foreach (double _iter568 in Ref_ft)
            {
              oprot.WriteDouble(_iter568);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Damp != null && __isset.damp) {
          field.Name = "damp";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Damp.Count));
            foreach (double _iter569 in Damp)
            {
              oprot.WriteDouble(_iter569);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Max_vel != null && __isset.max_vel) {
          field.Name = "max_vel";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Max_vel.Count));
            foreach (double _iter570 in Max_vel)
            {
              oprot.WriteDouble(_iter570);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Number_list != null && __isset.number_list) {
          field.Name = "number_list";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Number_list.Count));
            foreach (double _iter571 in Number_list)
            {
              oprot.WriteDouble(_iter571);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_config_args(");
      bool __first = true;
      if (Direction != null && __isset.direction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Direction: ");
        __sb.Append(Direction);
      }
      if (Ref_ft != null && __isset.ref_ft) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ref_ft: ");
        __sb.Append(Ref_ft);
      }
      if (Damp != null && __isset.damp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Damp: ");
        __sb.Append(Damp);
      }
      if (Max_vel != null && __isset.max_vel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Max_vel: ");
        __sb.Append(Max_vel);
      }
      if (Number_list != null && __isset.number_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Number_list: ");
        __sb.Append(Number_list);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_config_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_config_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_config_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_config_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_move_args : TBase
  {

    public fc_move_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_move_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_move_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_move_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_move_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_move_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_move_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_guard_act_args : TBase
  {
    private List<bool> _direction;
    private List<double> _ref_ft;
    private string _tool;
    private string _wobj;
    private int _type;
    private int _force_property;

    public List<bool> Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        this._direction = value;
      }
    }

    public List<double> Ref_ft
    {
      get
      {
        return _ref_ft;
      }
      set
      {
        __isset.ref_ft = true;
        this._ref_ft = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Force_property
    {
      get
      {
        return _force_property;
      }
      set
      {
        __isset.force_property = true;
        this._force_property = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool direction;
      public bool ref_ft;
      public bool tool;
      public bool wobj;
      public bool type;
      public bool force_property;
    }

    public fc_guard_act_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Direction = new List<bool>();
                  TList _list572 = iprot.ReadListBegin();
                  for( int _i573 = 0; _i573 < _list572.Count; ++_i573)
                  {
                    bool _elem574;
                    _elem574 = iprot.ReadBool();
                    Direction.Add(_elem574);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Ref_ft = new List<double>();
                  TList _list575 = iprot.ReadListBegin();
                  for( int _i576 = 0; _i576 < _list575.Count; ++_i576)
                  {
                    double _elem577;
                    _elem577 = iprot.ReadDouble();
                    Ref_ft.Add(_elem577);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Force_property = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_guard_act_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Direction != null && __isset.direction) {
          field.Name = "direction";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Bool, Direction.Count));
            foreach (bool _iter578 in Direction)
            {
              oprot.WriteBool(_iter578);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Ref_ft != null && __isset.ref_ft) {
          field.Name = "ref_ft";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Ref_ft.Count));
            foreach (double _iter579 in Ref_ft)
            {
              oprot.WriteDouble(_iter579);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.force_property) {
          field.Name = "force_property";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Force_property);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_guard_act_args(");
      bool __first = true;
      if (Direction != null && __isset.direction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Direction: ");
        __sb.Append(Direction);
      }
      if (Ref_ft != null && __isset.ref_ft) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ref_ft: ");
        __sb.Append(Ref_ft);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.force_property) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Force_property: ");
        __sb.Append(Force_property);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_guard_act_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_guard_act_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_guard_act_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_guard_act_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_guard_deact_args : TBase
  {

    public fc_guard_deact_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_guard_deact_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_guard_deact_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_guard_deact_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_guard_deact_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_guard_deact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_guard_deact_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_force_set_value_args : TBase
  {
    private List<bool> _direction;
    private List<double> _ref_ft;

    public List<bool> Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        this._direction = value;
      }
    }

    public List<double> Ref_ft
    {
      get
      {
        return _ref_ft;
      }
      set
      {
        __isset.ref_ft = true;
        this._ref_ft = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool direction;
      public bool ref_ft;
    }

    public fc_force_set_value_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Direction = new List<bool>();
                  TList _list580 = iprot.ReadListBegin();
                  for( int _i581 = 0; _i581 < _list580.Count; ++_i581)
                  {
                    bool _elem582;
                    _elem582 = iprot.ReadBool();
                    Direction.Add(_elem582);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Ref_ft = new List<double>();
                  TList _list583 = iprot.ReadListBegin();
                  for( int _i584 = 0; _i584 < _list583.Count; ++_i584)
                  {
                    double _elem585;
                    _elem585 = iprot.ReadDouble();
                    Ref_ft.Add(_elem585);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_force_set_value_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Direction != null && __isset.direction) {
          field.Name = "direction";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Bool, Direction.Count));
            foreach (bool _iter586 in Direction)
            {
              oprot.WriteBool(_iter586);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Ref_ft != null && __isset.ref_ft) {
          field.Name = "ref_ft";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Ref_ft.Count));
            foreach (double _iter587 in Ref_ft)
            {
              oprot.WriteDouble(_iter587);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_force_set_value_args(");
      bool __first = true;
      if (Direction != null && __isset.direction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Direction: ");
        __sb.Append(Direction);
      }
      if (Ref_ft != null && __isset.ref_ft) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ref_ft: ");
        __sb.Append(Ref_ft);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_force_set_value_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_force_set_value_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_force_set_value_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_force_set_value_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_wait_pos_args : TBase
  {
    private List<double> _middle;
    private List<double> _range;
    private bool _absolute;
    private int _duration;
    private int _timeout;

    public List<double> Middle
    {
      get
      {
        return _middle;
      }
      set
      {
        __isset.middle = true;
        this._middle = value;
      }
    }

    public List<double> Range
    {
      get
      {
        return _range;
      }
      set
      {
        __isset.range = true;
        this._range = value;
      }
    }

    public bool Absolute
    {
      get
      {
        return _absolute;
      }
      set
      {
        __isset.absolute = true;
        this._absolute = value;
      }
    }

    public int Duration
    {
      get
      {
        return _duration;
      }
      set
      {
        __isset.duration = true;
        this._duration = value;
      }
    }

    public int Timeout
    {
      get
      {
        return _timeout;
      }
      set
      {
        __isset.timeout = true;
        this._timeout = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool middle;
      public bool range;
      public bool absolute;
      public bool duration;
      public bool timeout;
    }

    public fc_wait_pos_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Middle = new List<double>();
                  TList _list588 = iprot.ReadListBegin();
                  for( int _i589 = 0; _i589 < _list588.Count; ++_i589)
                  {
                    double _elem590;
                    _elem590 = iprot.ReadDouble();
                    Middle.Add(_elem590);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Range = new List<double>();
                  TList _list591 = iprot.ReadListBegin();
                  for( int _i592 = 0; _i592 < _list591.Count; ++_i592)
                  {
                    double _elem593;
                    _elem593 = iprot.ReadDouble();
                    Range.Add(_elem593);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Absolute = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Duration = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_wait_pos_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Middle != null && __isset.middle) {
          field.Name = "middle";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Middle.Count));
            foreach (double _iter594 in Middle)
            {
              oprot.WriteDouble(_iter594);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Range != null && __isset.range) {
          field.Name = "range";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Range.Count));
            foreach (double _iter595 in Range)
            {
              oprot.WriteDouble(_iter595);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.absolute) {
          field.Name = "absolute";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Absolute);
          oprot.WriteFieldEnd();
        }
        if (__isset.duration) {
          field.Name = "duration";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Duration);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_wait_pos_args(");
      bool __first = true;
      if (Middle != null && __isset.middle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Middle: ");
        __sb.Append(Middle);
      }
      if (Range != null && __isset.range) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Range: ");
        __sb.Append(Range);
      }
      if (__isset.absolute) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Absolute: ");
        __sb.Append(Absolute);
      }
      if (__isset.duration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Duration: ");
        __sb.Append(Duration);
      }
      if (__isset.timeout) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timeout: ");
        __sb.Append(Timeout);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_wait_pos_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_wait_pos_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_wait_pos_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_wait_pos_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_wait_vel_args : TBase
  {
    private List<double> _middle;
    private List<double> _range;
    private bool _absolute;
    private int _duration;
    private int _timeout;

    public List<double> Middle
    {
      get
      {
        return _middle;
      }
      set
      {
        __isset.middle = true;
        this._middle = value;
      }
    }

    public List<double> Range
    {
      get
      {
        return _range;
      }
      set
      {
        __isset.range = true;
        this._range = value;
      }
    }

    public bool Absolute
    {
      get
      {
        return _absolute;
      }
      set
      {
        __isset.absolute = true;
        this._absolute = value;
      }
    }

    public int Duration
    {
      get
      {
        return _duration;
      }
      set
      {
        __isset.duration = true;
        this._duration = value;
      }
    }

    public int Timeout
    {
      get
      {
        return _timeout;
      }
      set
      {
        __isset.timeout = true;
        this._timeout = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool middle;
      public bool range;
      public bool absolute;
      public bool duration;
      public bool timeout;
    }

    public fc_wait_vel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Middle = new List<double>();
                  TList _list596 = iprot.ReadListBegin();
                  for( int _i597 = 0; _i597 < _list596.Count; ++_i597)
                  {
                    double _elem598;
                    _elem598 = iprot.ReadDouble();
                    Middle.Add(_elem598);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Range = new List<double>();
                  TList _list599 = iprot.ReadListBegin();
                  for( int _i600 = 0; _i600 < _list599.Count; ++_i600)
                  {
                    double _elem601;
                    _elem601 = iprot.ReadDouble();
                    Range.Add(_elem601);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Absolute = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Duration = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_wait_vel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Middle != null && __isset.middle) {
          field.Name = "middle";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Middle.Count));
            foreach (double _iter602 in Middle)
            {
              oprot.WriteDouble(_iter602);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Range != null && __isset.range) {
          field.Name = "range";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Range.Count));
            foreach (double _iter603 in Range)
            {
              oprot.WriteDouble(_iter603);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.absolute) {
          field.Name = "absolute";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Absolute);
          oprot.WriteFieldEnd();
        }
        if (__isset.duration) {
          field.Name = "duration";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Duration);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_wait_vel_args(");
      bool __first = true;
      if (Middle != null && __isset.middle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Middle: ");
        __sb.Append(Middle);
      }
      if (Range != null && __isset.range) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Range: ");
        __sb.Append(Range);
      }
      if (__isset.absolute) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Absolute: ");
        __sb.Append(Absolute);
      }
      if (__isset.duration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Duration: ");
        __sb.Append(Duration);
      }
      if (__isset.timeout) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timeout: ");
        __sb.Append(Timeout);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_wait_vel_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_wait_vel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_wait_vel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_wait_vel_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_wait_ft_args : TBase
  {
    private List<double> _middle;
    private List<double> _range;
    private bool _absolute;
    private int _duration;
    private int _timeout;

    public List<double> Middle
    {
      get
      {
        return _middle;
      }
      set
      {
        __isset.middle = true;
        this._middle = value;
      }
    }

    public List<double> Range
    {
      get
      {
        return _range;
      }
      set
      {
        __isset.range = true;
        this._range = value;
      }
    }

    public bool Absolute
    {
      get
      {
        return _absolute;
      }
      set
      {
        __isset.absolute = true;
        this._absolute = value;
      }
    }

    public int Duration
    {
      get
      {
        return _duration;
      }
      set
      {
        __isset.duration = true;
        this._duration = value;
      }
    }

    public int Timeout
    {
      get
      {
        return _timeout;
      }
      set
      {
        __isset.timeout = true;
        this._timeout = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool middle;
      public bool range;
      public bool absolute;
      public bool duration;
      public bool timeout;
    }

    public fc_wait_ft_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Middle = new List<double>();
                  TList _list604 = iprot.ReadListBegin();
                  for( int _i605 = 0; _i605 < _list604.Count; ++_i605)
                  {
                    double _elem606;
                    _elem606 = iprot.ReadDouble();
                    Middle.Add(_elem606);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Range = new List<double>();
                  TList _list607 = iprot.ReadListBegin();
                  for( int _i608 = 0; _i608 < _list607.Count; ++_i608)
                  {
                    double _elem609;
                    _elem609 = iprot.ReadDouble();
                    Range.Add(_elem609);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Absolute = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Duration = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_wait_ft_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Middle != null && __isset.middle) {
          field.Name = "middle";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Middle.Count));
            foreach (double _iter610 in Middle)
            {
              oprot.WriteDouble(_iter610);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Range != null && __isset.range) {
          field.Name = "range";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Range.Count));
            foreach (double _iter611 in Range)
            {
              oprot.WriteDouble(_iter611);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.absolute) {
          field.Name = "absolute";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Absolute);
          oprot.WriteFieldEnd();
        }
        if (__isset.duration) {
          field.Name = "duration";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Duration);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_wait_ft_args(");
      bool __first = true;
      if (Middle != null && __isset.middle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Middle: ");
        __sb.Append(Middle);
      }
      if (Range != null && __isset.range) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Range: ");
        __sb.Append(Range);
      }
      if (__isset.absolute) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Absolute: ");
        __sb.Append(Absolute);
      }
      if (__isset.duration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Duration: ");
        __sb.Append(Duration);
      }
      if (__isset.timeout) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timeout: ");
        __sb.Append(Timeout);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_wait_ft_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_wait_ft_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_wait_ft_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_wait_ft_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_wait_logic_args : TBase
  {
    private List<int> _value;

    public List<int> Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool @value;
    }

    public fc_wait_logic_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Value = new List<int>();
                  TList _list612 = iprot.ReadListBegin();
                  for( int _i613 = 0; _i613 < _list612.Count; ++_i613)
                  {
                    int _elem614;
                    _elem614 = iprot.ReadI32();
                    Value.Add(_elem614);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_wait_logic_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Value.Count));
            foreach (int _iter615 in Value)
            {
              oprot.WriteI32(_iter615);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_wait_logic_args(");
      bool __first = true;
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_wait_logic_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_wait_logic_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_wait_logic_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_wait_logic_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_get_ft_args : TBase
  {

    public fc_get_ft_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_get_ft_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_get_ft_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_get_ft_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_get_ft_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list616 = iprot.ReadListBegin();
                  for( int _i617 = 0; _i617 < _list616.Count; ++_i617)
                  {
                    double _elem618;
                    _elem618 = iprot.ReadDouble();
                    Success.Add(_elem618);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_get_ft_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter619 in Success)
              {
                oprot.WriteDouble(_iter619);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_get_ft_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_mode_is_active_args : TBase
  {

    public fc_mode_is_active_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_mode_is_active_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_mode_is_active_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fc_mode_is_active_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public fc_mode_is_active_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fc_mode_is_active_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fc_mode_is_active_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class start_realtime_mode_args : TBase
  {
    private int _mode;
    private double _fileter_bandwidth;
    private double _com_lost_time;

    public int Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public double Fileter_bandwidth
    {
      get
      {
        return _fileter_bandwidth;
      }
      set
      {
        __isset.fileter_bandwidth = true;
        this._fileter_bandwidth = value;
      }
    }

    public double Com_lost_time
    {
      get
      {
        return _com_lost_time;
      }
      set
      {
        __isset.com_lost_time = true;
        this._com_lost_time = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mode;
      public bool fileter_bandwidth;
      public bool com_lost_time;
    }

    public start_realtime_mode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Mode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Fileter_bandwidth = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                Com_lost_time = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("start_realtime_mode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Mode);
          oprot.WriteFieldEnd();
        }
        if (__isset.fileter_bandwidth) {
          field.Name = "fileter_bandwidth";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Fileter_bandwidth);
          oprot.WriteFieldEnd();
        }
        if (__isset.com_lost_time) {
          field.Name = "com_lost_time";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Com_lost_time);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("start_realtime_mode_args(");
      bool __first = true;
      if (__isset.mode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mode: ");
        __sb.Append(Mode);
      }
      if (__isset.fileter_bandwidth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fileter_bandwidth: ");
        __sb.Append(Fileter_bandwidth);
      }
      if (__isset.com_lost_time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Com_lost_time: ");
        __sb.Append(Com_lost_time);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class start_realtime_mode_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public start_realtime_mode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("start_realtime_mode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("start_realtime_mode_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class end_realtime_mode_args : TBase
  {

    public end_realtime_mode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("end_realtime_mode_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("end_realtime_mode_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class end_realtime_mode_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public end_realtime_mode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("end_realtime_mode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("end_realtime_mode_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class realtime_data_enqueue_args : TBase
  {
    private List<RealTimeControlData> _realtime_data;
    private bool _block;

    public List<RealTimeControlData> Realtime_data
    {
      get
      {
        return _realtime_data;
      }
      set
      {
        __isset.realtime_data = true;
        this._realtime_data = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool realtime_data;
      public bool block;
    }

    public realtime_data_enqueue_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Realtime_data = new List<RealTimeControlData>();
                  TList _list620 = iprot.ReadListBegin();
                  for( int _i621 = 0; _i621 < _list620.Count; ++_i621)
                  {
                    RealTimeControlData _elem622;
                    _elem622 = new RealTimeControlData();
                    _elem622.Read(iprot);
                    Realtime_data.Add(_elem622);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("realtime_data_enqueue_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Realtime_data != null && __isset.realtime_data) {
          field.Name = "realtime_data";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Realtime_data.Count));
            foreach (RealTimeControlData _iter623 in Realtime_data)
            {
              _iter623.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("realtime_data_enqueue_args(");
      bool __first = true;
      if (Realtime_data != null && __isset.realtime_data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Realtime_data: ");
        __sb.Append(Realtime_data);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class realtime_data_enqueue_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public realtime_data_enqueue_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("realtime_data_enqueue_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("realtime_data_enqueue_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class clear_realtime_data_queue_args : TBase
  {

    public clear_realtime_data_queue_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("clear_realtime_data_queue_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("clear_realtime_data_queue_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class clear_realtime_data_queue_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public clear_realtime_data_queue_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("clear_realtime_data_queue_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("clear_realtime_data_queue_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_realtime_data_queue_size_args : TBase
  {

    public get_realtime_data_queue_size_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_realtime_data_queue_size_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_realtime_data_queue_size_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_realtime_data_queue_size_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_realtime_data_queue_size_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_realtime_data_queue_size_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_realtime_data_queue_size_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_speed_optimization_args : TBase
  {

    public enable_speed_optimization_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_speed_optimization_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_speed_optimization_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_speed_optimization_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public enable_speed_optimization_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_speed_optimization_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_speed_optimization_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_speed_optimization_args : TBase
  {

    public disable_speed_optimization_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_speed_optimization_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_speed_optimization_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_speed_optimization_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public disable_speed_optimization_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_speed_optimization_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_speed_optimization_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class change_recipe_args : TBase
  {

    public change_recipe_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("change_recipe_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("change_recipe_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class change_recipe_result : TBase
  {

    public change_recipe_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("change_recipe_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("change_recipe_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_system_value_bool_args : TBase
  {
    private string _name;
    private bool _value;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public bool Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool @value;
    }

    public set_system_value_bool_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Value = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_system_value_bool_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_system_value_bool_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_system_value_bool_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_system_value_bool_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_system_value_bool_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_system_value_bool_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_system_value_double_args : TBase
  {
    private string _name;
    private double _value;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public double Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool @value;
    }

    public set_system_value_double_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Value = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_system_value_double_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_system_value_double_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_system_value_double_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_system_value_double_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_system_value_double_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_system_value_double_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_system_value_str_args : TBase
  {
    private string _name;
    private string _value;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool @value;
    }

    public set_system_value_str_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_system_value_str_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_system_value_str_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_system_value_str_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_system_value_str_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_system_value_str_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_system_value_str_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_system_value_list_args : TBase
  {
    private string _name;
    private List<double> _value;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public List<double> Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool @value;
    }

    public set_system_value_list_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Value = new List<double>();
                  TList _list624 = iprot.ReadListBegin();
                  for( int _i625 = 0; _i625 < _list624.Count; ++_i625)
                  {
                    double _elem626;
                    _elem626 = iprot.ReadDouble();
                    Value.Add(_elem626);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_system_value_list_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Value.Count));
            foreach (double _iter627 in Value)
            {
              oprot.WriteDouble(_iter627);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_system_value_list_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_system_value_list_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_system_value_list_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_system_value_list_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_system_value_list_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_system_value_bool_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public get_system_value_bool_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_system_value_bool_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_system_value_bool_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_system_value_bool_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_system_value_bool_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_system_value_bool_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_system_value_bool_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_system_value_double_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public get_system_value_double_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_system_value_double_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_system_value_double_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_system_value_double_result : TBase
  {
    private double _success;

    public double Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_system_value_double_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Double) {
                Success = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_system_value_double_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Double;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_system_value_double_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_system_value_str_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public get_system_value_str_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_system_value_str_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_system_value_str_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_system_value_str_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_system_value_str_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_system_value_str_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_system_value_str_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_system_value_list_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public get_system_value_list_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_system_value_list_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_system_value_list_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_system_value_list_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_system_value_list_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list628 = iprot.ReadListBegin();
                  for( int _i629 = 0; _i629 < _list628.Count; ++_i629)
                  {
                    double _elem630;
                    _elem630 = iprot.ReadDouble();
                    Success.Add(_elem630);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_system_value_list_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter631 in Success)
              {
                oprot.WriteDouble(_iter631);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_system_value_list_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class trackEnqueue_args : TBase
  {
    private List<List<double>> _track;
    private bool _block;

    public List<List<double>> Track
    {
      get
      {
        return _track;
      }
      set
      {
        __isset.track = true;
        this._track = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool track;
      public bool block;
    }

    public trackEnqueue_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Track = new List<List<double>>();
                  TList _list632 = iprot.ReadListBegin();
                  for( int _i633 = 0; _i633 < _list632.Count; ++_i633)
                  {
                    List<double> _elem634;
                    {
                      _elem634 = new List<double>();
                      TList _list635 = iprot.ReadListBegin();
                      for( int _i636 = 0; _i636 < _list635.Count; ++_i636)
                      {
                        double _elem637;
                        _elem637 = iprot.ReadDouble();
                        _elem634.Add(_elem637);
                      }
                      iprot.ReadListEnd();
                    }
                    Track.Add(_elem634);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("trackEnqueue_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Track != null && __isset.track) {
          field.Name = "track";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Track.Count));
            foreach (List<double> _iter638 in Track)
            {
              {
                oprot.WriteListBegin(new TList(TType.Double, _iter638.Count));
                foreach (double _iter639 in _iter638)
                {
                  oprot.WriteDouble(_iter639);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("trackEnqueue_args(");
      bool __first = true;
      if (Track != null && __isset.track) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Track: ");
        __sb.Append(Track);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class trackEnqueue_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public trackEnqueue_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("trackEnqueue_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("trackEnqueue_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class trackClearQueue_args : TBase
  {

    public trackClearQueue_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("trackClearQueue_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("trackClearQueue_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class trackClearQueue_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public trackClearQueue_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("trackClearQueue_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("trackClearQueue_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getQueueSize_args : TBase
  {

    public getQueueSize_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getQueueSize_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getQueueSize_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getQueueSize_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getQueueSize_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getQueueSize_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getQueueSize_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class trackJointMotion_args : TBase
  {
    private double _speed;
    private double _acc;
    private bool _block;

    public double Speed
    {
      get
      {
        return _speed;
      }
      set
      {
        __isset.speed = true;
        this._speed = value;
      }
    }

    public double Acc
    {
      get
      {
        return _acc;
      }
      set
      {
        __isset.acc = true;
        this._acc = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool speed;
      public bool acc;
      public bool block;
    }

    public trackJointMotion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double) {
                Speed = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Acc = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("trackJointMotion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.speed) {
          field.Name = "speed";
          field.Type = TType.Double;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Speed);
          oprot.WriteFieldEnd();
        }
        if (__isset.acc) {
          field.Name = "acc";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Acc);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("trackJointMotion_args(");
      bool __first = true;
      if (__isset.speed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Speed: ");
        __sb.Append(Speed);
      }
      if (__isset.acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Acc: ");
        __sb.Append(Acc);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class trackJointMotion_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public trackJointMotion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("trackJointMotion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("trackJointMotion_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class trackCartMotion_args : TBase
  {
    private double _speed;
    private double _acc;
    private bool _block;
    private string _tool;
    private string _wobj;
    private double _radius;

    public double Speed
    {
      get
      {
        return _speed;
      }
      set
      {
        __isset.speed = true;
        this._speed = value;
      }
    }

    public double Acc
    {
      get
      {
        return _acc;
      }
      set
      {
        __isset.acc = true;
        this._acc = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public double Radius
    {
      get
      {
        return _radius;
      }
      set
      {
        __isset.radius = true;
        this._radius = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool speed;
      public bool acc;
      public bool block;
      public bool tool;
      public bool wobj;
      public bool radius;
    }

    public trackCartMotion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double) {
                Speed = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Acc = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                Radius = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("trackCartMotion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.speed) {
          field.Name = "speed";
          field.Type = TType.Double;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Speed);
          oprot.WriteFieldEnd();
        }
        if (__isset.acc) {
          field.Name = "acc";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Acc);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.radius) {
          field.Name = "radius";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Radius);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("trackCartMotion_args(");
      bool __first = true;
      if (__isset.speed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Speed: ");
        __sb.Append(Speed);
      }
      if (__isset.acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Acc: ");
        __sb.Append(Acc);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.radius) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Radius: ");
        __sb.Append(Radius);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class trackCartMotion_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public trackCartMotion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("trackCartMotion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("trackCartMotion_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rpc_heartbeat_args : TBase
  {
    private int _time;

    public int Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool time;
    }

    public rpc_heartbeat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Time = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("rpc_heartbeat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Time);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rpc_heartbeat_args(");
      bool __first = true;
      if (__isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rpc_heartbeat_result : TBase
  {

    public rpc_heartbeat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("rpc_heartbeat_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rpc_heartbeat_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class move_spiral_args : TBase
  {
    private List<double> _p1;
    private List<double> _p2;
    private double _rev;
    private double _len;
    private double _r;
    private int _mode;
    private double _v;
    private double _a;
    private List<double> _q_near;
    private string _tool;
    private string _wobj;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> P1
    {
      get
      {
        return _p1;
      }
      set
      {
        __isset.p1 = true;
        this._p1 = value;
      }
    }

    public List<double> P2
    {
      get
      {
        return _p2;
      }
      set
      {
        __isset.p2 = true;
        this._p2 = value;
      }
    }

    public double Rev
    {
      get
      {
        return _rev;
      }
      set
      {
        __isset.rev = true;
        this._rev = value;
      }
    }

    public double Len
    {
      get
      {
        return _len;
      }
      set
      {
        __isset.len = true;
        this._len = value;
      }
    }

    public double R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public int Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public List<double> Q_near
    {
      get
      {
        return _q_near;
      }
      set
      {
        __isset.q_near = true;
        this._q_near = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p1;
      public bool p2;
      public bool rev;
      public bool len;
      public bool r;
      public bool mode;
      public bool v;
      public bool a;
      public bool q_near;
      public bool tool;
      public bool wobj;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public move_spiral_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P1 = new List<double>();
                  TList _list640 = iprot.ReadListBegin();
                  for( int _i641 = 0; _i641 < _list640.Count; ++_i641)
                  {
                    double _elem642;
                    _elem642 = iprot.ReadDouble();
                    P1.Add(_elem642);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  P2 = new List<double>();
                  TList _list643 = iprot.ReadListBegin();
                  for( int _i644 = 0; _i644 < _list643.Count; ++_i644)
                  {
                    double _elem645;
                    _elem645 = iprot.ReadDouble();
                    P2.Add(_elem645);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                Rev = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                Len = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                R = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Mode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Q_near = new List<double>();
                  TList _list646 = iprot.ReadListBegin();
                  for( int _i647 = 0; _i647 < _list646.Count; ++_i647)
                  {
                    double _elem648;
                    _elem648 = iprot.ReadDouble();
                    Q_near.Add(_elem648);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("move_spiral_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P1 != null && __isset.p1) {
          field.Name = "p1";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P1.Count));
            foreach (double _iter649 in P1)
            {
              oprot.WriteDouble(_iter649);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (P2 != null && __isset.p2) {
          field.Name = "p2";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P2.Count));
            foreach (double _iter650 in P2)
            {
              oprot.WriteDouble(_iter650);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.rev) {
          field.Name = "rev";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Rev);
          oprot.WriteFieldEnd();
        }
        if (__isset.len) {
          field.Name = "len";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Len);
          oprot.WriteFieldEnd();
        }
        if (__isset.r) {
          field.Name = "r";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(R);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Mode);
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (Q_near != null && __isset.q_near) {
          field.Name = "q_near";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Q_near.Count));
            foreach (double _iter651 in Q_near)
            {
              oprot.WriteDouble(_iter651);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("move_spiral_args(");
      bool __first = true;
      if (P1 != null && __isset.p1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P1: ");
        __sb.Append(P1);
      }
      if (P2 != null && __isset.p2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P2: ");
        __sb.Append(P2);
      }
      if (__isset.rev) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rev: ");
        __sb.Append(Rev);
      }
      if (__isset.len) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Len: ");
        __sb.Append(Len);
      }
      if (__isset.r) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("R: ");
        __sb.Append(R);
      }
      if (__isset.mode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mode: ");
        __sb.Append(Mode);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (Q_near != null && __isset.q_near) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Q_near: ");
        __sb.Append(Q_near);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class move_spiral_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public move_spiral_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("move_spiral_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("move_spiral_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_acc_optimization_args : TBase
  {

    public enable_acc_optimization_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_acc_optimization_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_acc_optimization_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_acc_optimization_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public enable_acc_optimization_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_acc_optimization_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_acc_optimization_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_acc_optimization_args : TBase
  {

    public disable_acc_optimization_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_acc_optimization_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_acc_optimization_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_acc_optimization_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public disable_acc_optimization_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_acc_optimization_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_acc_optimization_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_baudrate_485_args : TBase
  {
    private int _value;
    private bool _block;

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool @value;
      public bool block;
    }

    public set_baudrate_485_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_baudrate_485_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Value);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_baudrate_485_args(");
      bool __first = true;
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_baudrate_485_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_baudrate_485_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_baudrate_485_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_baudrate_485_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_baudrate_can_args : TBase
  {
    private int _value;
    private bool _block;

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool @value;
      public bool block;
    }

    public set_baudrate_can_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_baudrate_can_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Value);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_baudrate_can_args(");
      bool __first = true;
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_baudrate_can_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_baudrate_can_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_baudrate_can_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_baudrate_can_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_analog_output_mode_args : TBase
  {
    private short _num;
    private int _mode;
    private bool _block;

    public short Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public int Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool mode;
      public bool block;
    }

    public set_analog_output_mode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Num = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Mode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_analog_output_mode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.mode) {
          field.Name = "mode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Mode);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_analog_output_mode_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.mode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mode: ");
        __sb.Append(Mode);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_analog_output_mode_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_analog_output_mode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_analog_output_mode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_analog_output_mode_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class robotmoving_args : TBase
  {

    public robotmoving_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("robotmoving_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("robotmoving_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class robotmoving_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public robotmoving_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("robotmoving_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("robotmoving_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_write_multiple_coils_args : TBase
  {
    private int _slave_num;
    private string _name;
    private int _len;
    private List<sbyte> _byte_list;

    public int Slave_num
    {
      get
      {
        return _slave_num;
      }
      set
      {
        __isset.slave_num = true;
        this._slave_num = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Len
    {
      get
      {
        return _len;
      }
      set
      {
        __isset.len = true;
        this._len = value;
      }
    }

    public List<sbyte> Byte_list
    {
      get
      {
        return _byte_list;
      }
      set
      {
        __isset.byte_list = true;
        this._byte_list = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool slave_num;
      public bool name;
      public bool len;
      public bool byte_list;
    }

    public modbus_write_multiple_coils_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Slave_num = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Len = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Byte_list = new List<sbyte>();
                  TList _list652 = iprot.ReadListBegin();
                  for( int _i653 = 0; _i653 < _list652.Count; ++_i653)
                  {
                    sbyte _elem654;
                    _elem654 = iprot.ReadByte();
                    Byte_list.Add(_elem654);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_write_multiple_coils_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.slave_num) {
          field.Name = "slave_num";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Slave_num);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.len) {
          field.Name = "len";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Len);
          oprot.WriteFieldEnd();
        }
        if (Byte_list != null && __isset.byte_list) {
          field.Name = "byte_list";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Byte_list.Count));
            foreach (sbyte _iter655 in Byte_list)
            {
              oprot.WriteByte(_iter655);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_write_multiple_coils_args(");
      bool __first = true;
      if (__isset.slave_num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Slave_num: ");
        __sb.Append(Slave_num);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.len) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Len: ");
        __sb.Append(Len);
      }
      if (Byte_list != null && __isset.byte_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Byte_list: ");
        __sb.Append(Byte_list);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_write_multiple_coils_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public modbus_write_multiple_coils_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_write_multiple_coils_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_write_multiple_coils_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_write_multiple_regs_args : TBase
  {
    private int _slave_num;
    private string _name;
    private int _len;
    private List<short> _word_list;

    public int Slave_num
    {
      get
      {
        return _slave_num;
      }
      set
      {
        __isset.slave_num = true;
        this._slave_num = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Len
    {
      get
      {
        return _len;
      }
      set
      {
        __isset.len = true;
        this._len = value;
      }
    }

    public List<short> Word_list
    {
      get
      {
        return _word_list;
      }
      set
      {
        __isset.word_list = true;
        this._word_list = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool slave_num;
      public bool name;
      public bool len;
      public bool word_list;
    }

    public modbus_write_multiple_regs_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Slave_num = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Len = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Word_list = new List<short>();
                  TList _list656 = iprot.ReadListBegin();
                  for( int _i657 = 0; _i657 < _list656.Count; ++_i657)
                  {
                    short _elem658;
                    _elem658 = iprot.ReadI16();
                    Word_list.Add(_elem658);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_write_multiple_regs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.slave_num) {
          field.Name = "slave_num";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Slave_num);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.len) {
          field.Name = "len";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Len);
          oprot.WriteFieldEnd();
        }
        if (Word_list != null && __isset.word_list) {
          field.Name = "word_list";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I16, Word_list.Count));
            foreach (short _iter659 in Word_list)
            {
              oprot.WriteI16(_iter659);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_write_multiple_regs_args(");
      bool __first = true;
      if (__isset.slave_num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Slave_num: ");
        __sb.Append(Slave_num);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.len) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Len: ");
        __sb.Append(Len);
      }
      if (Word_list != null && __isset.word_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Word_list: ");
        __sb.Append(Word_list);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class modbus_write_multiple_regs_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public modbus_write_multiple_regs_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("modbus_write_multiple_regs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("modbus_write_multiple_regs_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_current_project_args : TBase
  {

    public get_current_project_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_current_project_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_current_project_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_current_project_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_current_project_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_current_project_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_current_project_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_files_list_args : TBase
  {
    private string _path;

    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool path;
    }

    public get_files_list_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_files_list_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_files_list_args(");
      bool __first = true;
      if (Path != null && __isset.path) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Path: ");
        __sb.Append(Path);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_files_list_result : TBase
  {
    private Dictionary<string, int> _success;

    public Dictionary<string, int> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_files_list_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, int>();
                  TMap _map660 = iprot.ReadMapBegin();
                  for( int _i661 = 0; _i661 < _map660.Count; ++_i661)
                  {
                    string _key662;
                    int _val663;
                    _key662 = iprot.ReadString();
                    _val663 = iprot.ReadI32();
                    Success[_key662] = _val663;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_files_list_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.I32, Success.Count));
              foreach (string _iter664 in Success.Keys)
              {
                oprot.WriteString(_iter664);
                oprot.WriteI32(Success[_iter664]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_files_list_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRobotStatus_args : TBase
  {

    public getRobotStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRobotStatus_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRobotStatus_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRobotStatus_result : TBase
  {
    private RobotStatus _success;

    public RobotStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getRobotStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RobotStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRobotStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRobotStatus_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRobotIOStatus_args : TBase
  {

    public getRobotIOStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRobotIOStatus_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRobotIOStatus_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRobotIOStatus_result : TBase
  {
    private IOStatus _success;

    public IOStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getRobotIOStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new IOStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRobotIOStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRobotIOStatus_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_pose_coord_args : TBase
  {
    private string _tool;
    private string _wobj;

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tool;
      public bool wobj;
    }

    public get_tcp_pose_coord_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_pose_coord_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_pose_coord_args(");
      bool __first = true;
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_pose_coord_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tcp_pose_coord_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list665 = iprot.ReadListBegin();
                  for( int _i666 = 0; _i666 < _list665.Count; ++_i666)
                  {
                    double _elem667;
                    _elem667 = iprot.ReadDouble();
                    Success.Add(_elem667);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_pose_coord_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter668 in Success)
              {
                oprot.WriteDouble(_iter668);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_pose_coord_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_force_tool_args : TBase
  {
    private string _tool;

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tool;
    }

    public get_tcp_force_tool_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_force_tool_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_force_tool_args(");
      bool __first = true;
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_tcp_force_tool_result : TBase
  {
    private List<double> _success;

    public List<double> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_tcp_force_tool_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list669 = iprot.ReadListBegin();
                  for( int _i670 = 0; _i670 < _list669.Count; ++_i670)
                  {
                    double _elem671;
                    _elem671 = iprot.ReadDouble();
                    Success.Add(_elem671);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_tcp_force_tool_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter672 in Success)
              {
                oprot.WriteDouble(_iter672);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_tcp_force_tool_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class restart_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public restart_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("restart_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("restart_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class restart_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public restart_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("restart_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("restart_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_servo_config_args : TBase
  {
    private int _axis_num;
    private int _id;
    private int _value;
    private int _qfmt;
    private bool _block;

    public int Axis_num
    {
      get
      {
        return _axis_num;
      }
      set
      {
        __isset.axis_num = true;
        this._axis_num = value;
      }
    }

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public int Qfmt
    {
      get
      {
        return _qfmt;
      }
      set
      {
        __isset.qfmt = true;
        this._qfmt = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool axis_num;
      public bool id;
      public bool @value;
      public bool qfmt;
      public bool block;
    }

    public set_servo_config_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Axis_num = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Qfmt = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_servo_config_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.axis_num) {
          field.Name = "axis_num";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Axis_num);
          oprot.WriteFieldEnd();
        }
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Value);
          oprot.WriteFieldEnd();
        }
        if (__isset.qfmt) {
          field.Name = "qfmt";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Qfmt);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_servo_config_args(");
      bool __first = true;
      if (__isset.axis_num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Axis_num: ");
        __sb.Append(Axis_num);
      }
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (__isset.qfmt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qfmt: ");
        __sb.Append(Qfmt);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_servo_config_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_servo_config_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_servo_config_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_servo_config_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class apply_servo_config_args : TBase
  {
    private int _axis_num;
    private bool _block;

    public int Axis_num
    {
      get
      {
        return _axis_num;
      }
      set
      {
        __isset.axis_num = true;
        this._axis_num = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool axis_num;
      public bool block;
    }

    public apply_servo_config_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Axis_num = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("apply_servo_config_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.axis_num) {
          field.Name = "axis_num";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Axis_num);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("apply_servo_config_args(");
      bool __first = true;
      if (__isset.axis_num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Axis_num: ");
        __sb.Append(Axis_num);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class apply_servo_config_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public apply_servo_config_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("apply_servo_config_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("apply_servo_config_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_motor_pole_pair_number_args : TBase
  {

    public get_motor_pole_pair_number_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_motor_pole_pair_number_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_motor_pole_pair_number_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_motor_pole_pair_number_result : TBase
  {
    private List<short> _success;

    public List<short> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_motor_pole_pair_number_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<short>();
                  TList _list673 = iprot.ReadListBegin();
                  for( int _i674 = 0; _i674 < _list673.Count; ++_i674)
                  {
                    short _elem675;
                    _elem675 = iprot.ReadI16();
                    Success.Add(_elem675);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_motor_pole_pair_number_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I16, Success.Count));
              foreach (short _iter676 in Success)
              {
                oprot.WriteI16(_iter676);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_motor_pole_pair_number_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_motor_stator_slots_args : TBase
  {

    public get_motor_stator_slots_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_motor_stator_slots_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_motor_stator_slots_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_motor_stator_slots_result : TBase
  {
    private List<short> _success;

    public List<short> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_motor_stator_slots_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<short>();
                  TList _list677 = iprot.ReadListBegin();
                  for( int _i678 = 0; _i678 < _list677.Count; ++_i678)
                  {
                    short _elem679;
                    _elem679 = iprot.ReadI16();
                    Success.Add(_elem679);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_motor_stator_slots_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I16, Success.Count));
              foreach (short _iter680 in Success)
              {
                oprot.WriteI16(_iter680);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_motor_stator_slots_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_axis_ratio_args : TBase
  {

    public get_axis_ratio_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_axis_ratio_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_axis_ratio_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_axis_ratio_result : TBase
  {
    private List<short> _success;

    public List<short> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_axis_ratio_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<short>();
                  TList _list681 = iprot.ReadListBegin();
                  for( int _i682 = 0; _i682 < _list681.Count; ++_i682)
                  {
                    short _elem683;
                    _elem683 = iprot.ReadI16();
                    Success.Add(_elem683);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_axis_ratio_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I16, Success.Count));
              foreach (short _iter684 in Success)
              {
                oprot.WriteI16(_iter684);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_axis_ratio_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class collision_detection_reset_args : TBase
  {

    public collision_detection_reset_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("collision_detection_reset_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("collision_detection_reset_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class collision_detection_reset_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public collision_detection_reset_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("collision_detection_reset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("collision_detection_reset_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_servo_file_params_args : TBase
  {
    private int _axis_num;
    private int _id;
    private string _name;
    private double _value;
    private double _qfmt;

    public int Axis_num
    {
      get
      {
        return _axis_num;
      }
      set
      {
        __isset.axis_num = true;
        this._axis_num = value;
      }
    }

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public double Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public double Qfmt
    {
      get
      {
        return _qfmt;
      }
      set
      {
        __isset.qfmt = true;
        this._qfmt = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool axis_num;
      public bool id;
      public bool name;
      public bool @value;
      public bool qfmt;
    }

    public set_servo_file_params_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Axis_num = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                Value = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                Qfmt = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_servo_file_params_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.axis_num) {
          field.Name = "axis_num";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Axis_num);
          oprot.WriteFieldEnd();
        }
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.@value) {
          field.Name = "value";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Value);
          oprot.WriteFieldEnd();
        }
        if (__isset.qfmt) {
          field.Name = "qfmt";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Qfmt);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_servo_file_params_args(");
      bool __first = true;
      if (__isset.axis_num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Axis_num: ");
        __sb.Append(Axis_num);
      }
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (__isset.qfmt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qfmt: ");
        __sb.Append(Qfmt);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_servo_file_params_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_servo_file_params_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_servo_file_params_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_servo_file_params_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class combine_motion_config_args : TBase
  {
    private int _type;
    private int _ref_plane;
    private int _fq;
    private int _amp;
    private int _el_offset;
    private int _az_offset;
    private int _up_height;
    private List<int> _time;
    private List<Op> _op_list;

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Ref_plane
    {
      get
      {
        return _ref_plane;
      }
      set
      {
        __isset.ref_plane = true;
        this._ref_plane = value;
      }
    }

    public int Fq
    {
      get
      {
        return _fq;
      }
      set
      {
        __isset.fq = true;
        this._fq = value;
      }
    }

    public int Amp
    {
      get
      {
        return _amp;
      }
      set
      {
        __isset.amp = true;
        this._amp = value;
      }
    }

    public int El_offset
    {
      get
      {
        return _el_offset;
      }
      set
      {
        __isset.el_offset = true;
        this._el_offset = value;
      }
    }

    public int Az_offset
    {
      get
      {
        return _az_offset;
      }
      set
      {
        __isset.az_offset = true;
        this._az_offset = value;
      }
    }

    public int Up_height
    {
      get
      {
        return _up_height;
      }
      set
      {
        __isset.up_height = true;
        this._up_height = value;
      }
    }

    public List<int> Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    public List<Op> Op_list
    {
      get
      {
        return _op_list;
      }
      set
      {
        __isset.op_list = true;
        this._op_list = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool ref_plane;
      public bool fq;
      public bool amp;
      public bool el_offset;
      public bool az_offset;
      public bool up_height;
      public bool time;
      public bool op_list;
    }

    public combine_motion_config_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Ref_plane = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Fq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Amp = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                El_offset = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Az_offset = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                Up_height = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  Time = new List<int>();
                  TList _list685 = iprot.ReadListBegin();
                  for( int _i686 = 0; _i686 < _list685.Count; ++_i686)
                  {
                    int _elem687;
                    _elem687 = iprot.ReadI32();
                    Time.Add(_elem687);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Op_list = new List<Op>();
                  TList _list688 = iprot.ReadListBegin();
                  for( int _i689 = 0; _i689 < _list688.Count; ++_i689)
                  {
                    Op _elem690;
                    _elem690 = new Op();
                    _elem690.Read(iprot);
                    Op_list.Add(_elem690);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("combine_motion_config_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.ref_plane) {
          field.Name = "ref_plane";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Ref_plane);
          oprot.WriteFieldEnd();
        }
        if (__isset.fq) {
          field.Name = "fq";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Fq);
          oprot.WriteFieldEnd();
        }
        if (__isset.amp) {
          field.Name = "amp";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Amp);
          oprot.WriteFieldEnd();
        }
        if (__isset.el_offset) {
          field.Name = "el_offset";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(El_offset);
          oprot.WriteFieldEnd();
        }
        if (__isset.az_offset) {
          field.Name = "az_offset";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Az_offset);
          oprot.WriteFieldEnd();
        }
        if (__isset.up_height) {
          field.Name = "up_height";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Up_height);
          oprot.WriteFieldEnd();
        }
        if (Time != null && __isset.time) {
          field.Name = "time";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Time.Count));
            foreach (int _iter691 in Time)
            {
              oprot.WriteI32(_iter691);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Op_list != null && __isset.op_list) {
          field.Name = "op_list";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Op_list.Count));
            foreach (Op _iter692 in Op_list)
            {
              _iter692.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("combine_motion_config_args(");
      bool __first = true;
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.ref_plane) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ref_plane: ");
        __sb.Append(Ref_plane);
      }
      if (__isset.fq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fq: ");
        __sb.Append(Fq);
      }
      if (__isset.amp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Amp: ");
        __sb.Append(Amp);
      }
      if (__isset.el_offset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("El_offset: ");
        __sb.Append(El_offset);
      }
      if (__isset.az_offset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Az_offset: ");
        __sb.Append(Az_offset);
      }
      if (__isset.up_height) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Up_height: ");
        __sb.Append(Up_height);
      }
      if (Time != null && __isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      if (Op_list != null && __isset.op_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op_list: ");
        __sb.Append(Op_list);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class combine_motion_config_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public combine_motion_config_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("combine_motion_config_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("combine_motion_config_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_eaxis_param_args : TBase
  {
    private int _num;
    private EAxisParam _param;
    private bool _block;

    public int Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public EAxisParam Param
    {
      get
      {
        return _param;
      }
      set
      {
        __isset.param = true;
        this._param = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool param;
      public bool block;
    }

    public set_eaxis_param_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Num = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Param = new EAxisParam();
                Param.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_eaxis_param_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Num);
          oprot.WriteFieldEnd();
        }
        if (Param != null && __isset.param) {
          field.Name = "param";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Param.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_eaxis_param_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (Param != null && __isset.param) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Param: ");
        __sb.Append(Param== null ? "<null>" : Param.ToString());
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_eaxis_param_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_eaxis_param_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_eaxis_param_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_eaxis_param_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class add_eaxis_scheme_args : TBase
  {
    private int _num;
    private bool _block;

    public int Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool block;
    }

    public add_eaxis_scheme_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Num = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("add_eaxis_scheme_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("add_eaxis_scheme_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class add_eaxis_scheme_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public add_eaxis_scheme_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("add_eaxis_scheme_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("add_eaxis_scheme_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class delete_eaxis_scheme_args : TBase
  {
    private int _num;
    private bool _block;

    public int Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool block;
    }

    public delete_eaxis_scheme_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Num = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("delete_eaxis_scheme_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Num);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("delete_eaxis_scheme_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class delete_eaxis_scheme_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public delete_eaxis_scheme_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("delete_eaxis_scheme_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("delete_eaxis_scheme_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_eaxis_scheme_args : TBase
  {
    private string _scheme_name;

    public string Scheme_name
    {
      get
      {
        return _scheme_name;
      }
      set
      {
        __isset.scheme_name = true;
        this._scheme_name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool scheme_name;
    }

    public enable_eaxis_scheme_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Scheme_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_eaxis_scheme_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Scheme_name != null && __isset.scheme_name) {
          field.Name = "scheme_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Scheme_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_eaxis_scheme_args(");
      bool __first = true;
      if (Scheme_name != null && __isset.scheme_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scheme_name: ");
        __sb.Append(Scheme_name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_eaxis_scheme_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public enable_eaxis_scheme_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_eaxis_scheme_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_eaxis_scheme_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_eaxis_scheme_args : TBase
  {
    private string _scheme_name;

    public string Scheme_name
    {
      get
      {
        return _scheme_name;
      }
      set
      {
        __isset.scheme_name = true;
        this._scheme_name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool scheme_name;
    }

    public disable_eaxis_scheme_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Scheme_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_eaxis_scheme_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Scheme_name != null && __isset.scheme_name) {
          field.Name = "scheme_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Scheme_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_eaxis_scheme_args(");
      bool __first = true;
      if (Scheme_name != null && __isset.scheme_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scheme_name: ");
        __sb.Append(Scheme_name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_eaxis_scheme_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public disable_eaxis_scheme_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_eaxis_scheme_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_eaxis_scheme_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_eaxiss_scheme_param_args : TBase
  {
    private int _num;
    private EAxisSchemeParam _param;
    private bool _block;

    public int Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }

    public EAxisSchemeParam Param
    {
      get
      {
        return _param;
      }
      set
      {
        __isset.param = true;
        this._param = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num;
      public bool param;
      public bool block;
    }

    public set_eaxiss_scheme_param_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Num = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Param = new EAxisSchemeParam();
                Param.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_eaxiss_scheme_param_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Num);
          oprot.WriteFieldEnd();
        }
        if (Param != null && __isset.param) {
          field.Name = "param";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Param.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_eaxiss_scheme_param_args(");
      bool __first = true;
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      if (Param != null && __isset.param) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Param: ");
        __sb.Append(Param== null ? "<null>" : Param.ToString());
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_eaxiss_scheme_param_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_eaxiss_scheme_param_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_eaxiss_scheme_param_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_eaxiss_scheme_param_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class move_jog_args : TBase
  {
    private MoveJogTaskParam _param;
    private bool _block;

    public MoveJogTaskParam Param
    {
      get
      {
        return _param;
      }
      set
      {
        __isset.param = true;
        this._param = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool param;
      public bool block;
    }

    public move_jog_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Param = new MoveJogTaskParam();
                Param.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("move_jog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Param != null && __isset.param) {
          field.Name = "param";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Param.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("move_jog_args(");
      bool __first = true;
      if (Param != null && __isset.param) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Param: ");
        __sb.Append(Param== null ? "<null>" : Param.ToString());
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class move_jog_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public move_jog_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("move_jog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("move_jog_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class stop_manual_move_args : TBase
  {
    private bool _block;

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool block;
    }

    public stop_manual_move_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("stop_manual_move_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("stop_manual_move_args(");
      bool __first = true;
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class stop_manual_move_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public stop_manual_move_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("stop_manual_move_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("stop_manual_move_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_robot_version_args : TBase
  {

    public get_robot_version_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_robot_version_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_robot_version_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_robot_version_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_robot_version_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_robot_version_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_robot_version_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_teach_pendant_args : TBase
  {
    private bool _enable;

    public bool Enable
    {
      get
      {
        return _enable;
      }
      set
      {
        __isset.enable = true;
        this._enable = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool enable;
    }

    public set_teach_pendant_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Enable = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_teach_pendant_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.enable) {
          field.Name = "enable";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Enable);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_teach_pendant_args(");
      bool __first = true;
      if (__isset.enable) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Enable: ");
        __sb.Append(Enable);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_teach_pendant_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_teach_pendant_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_teach_pendant_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_teach_pendant_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_teach_speed_args : TBase
  {

    public get_teach_speed_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_teach_speed_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_teach_speed_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_teach_speed_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_teach_speed_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_teach_speed_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_teach_speed_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_global_speed_args : TBase
  {

    public get_global_speed_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_global_speed_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_global_speed_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_global_speed_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_global_speed_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_global_speed_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_global_speed_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_teach_speed_args : TBase
  {
    private int _v;

    public int V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool v;
    }

    public set_teach_speed_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                V = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_teach_speed_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(V);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_teach_speed_args(");
      bool __first = true;
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_teach_speed_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_teach_speed_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_teach_speed_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_teach_speed_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_combine_motion_args : TBase
  {

    public enable_combine_motion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_combine_motion_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_combine_motion_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_combine_motion_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public enable_combine_motion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_combine_motion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_combine_motion_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_combine_motion_args : TBase
  {

    public disable_combine_motion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_combine_motion_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_combine_motion_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_combine_motion_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public disable_combine_motion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_combine_motion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_combine_motion_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_singularity_control_args : TBase
  {

    public enable_singularity_control_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_singularity_control_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_singularity_control_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_singularity_control_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public enable_singularity_control_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_singularity_control_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_singularity_control_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_singularity_control_args : TBase
  {

    public disable_singularity_control_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_singularity_control_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_singularity_control_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_singularity_control_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public disable_singularity_control_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_singularity_control_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_singularity_control_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_vibration_control_args : TBase
  {

    public enable_vibration_control_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_vibration_control_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_vibration_control_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class enable_vibration_control_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public enable_vibration_control_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("enable_vibration_control_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("enable_vibration_control_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_vibration_control_args : TBase
  {

    public disable_vibration_control_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_vibration_control_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_vibration_control_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disable_vibration_control_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public disable_vibration_control_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disable_vibration_control_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disable_vibration_control_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class move_eaxis_args : TBase
  {
    private string _scheme_name;
    private List<double> _epose;
    private double _v;
    private bool _block;
    private Op _op;

    public string Scheme_name
    {
      get
      {
        return _scheme_name;
      }
      set
      {
        __isset.scheme_name = true;
        this._scheme_name = value;
      }
    }

    public List<double> Epose
    {
      get
      {
        return _epose;
      }
      set
      {
        __isset.epose = true;
        this._epose = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool scheme_name;
      public bool epose;
      public bool v;
      public bool block;
      public bool op;
    }

    public move_eaxis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Scheme_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Epose = new List<double>();
                  TList _list693 = iprot.ReadListBegin();
                  for( int _i694 = 0; _i694 < _list693.Count; ++_i694)
                  {
                    double _elem695;
                    _elem695 = iprot.ReadDouble();
                    Epose.Add(_elem695);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("move_eaxis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Scheme_name != null && __isset.scheme_name) {
          field.Name = "scheme_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Scheme_name);
          oprot.WriteFieldEnd();
        }
        if (Epose != null && __isset.epose) {
          field.Name = "epose";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Epose.Count));
            foreach (double _iter696 in Epose)
            {
              oprot.WriteDouble(_iter696);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("move_eaxis_args(");
      bool __first = true;
      if (Scheme_name != null && __isset.scheme_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scheme_name: ");
        __sb.Append(Scheme_name);
      }
      if (Epose != null && __isset.epose) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Epose: ");
        __sb.Append(Epose);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class move_eaxis_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public move_eaxis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("move_eaxis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("move_eaxis_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej2_eaxis_args : TBase
  {
    private List<double> _joints_list;
    private double _v;
    private double _a;
    private double _rad;
    private string _scheme_name;
    private List<double> _epose;
    private double _eaxis_v;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> Joints_list
    {
      get
      {
        return _joints_list;
      }
      set
      {
        __isset.joints_list = true;
        this._joints_list = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double Rad
    {
      get
      {
        return _rad;
      }
      set
      {
        __isset.rad = true;
        this._rad = value;
      }
    }

    public string Scheme_name
    {
      get
      {
        return _scheme_name;
      }
      set
      {
        __isset.scheme_name = true;
        this._scheme_name = value;
      }
    }

    public List<double> Epose
    {
      get
      {
        return _epose;
      }
      set
      {
        __isset.epose = true;
        this._epose = value;
      }
    }

    public double Eaxis_v
    {
      get
      {
        return _eaxis_v;
      }
      set
      {
        __isset.eaxis_v = true;
        this._eaxis_v = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool joints_list;
      public bool v;
      public bool a;
      public bool rad;
      public bool scheme_name;
      public bool epose;
      public bool eaxis_v;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public movej2_eaxis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Joints_list = new List<double>();
                  TList _list697 = iprot.ReadListBegin();
                  for( int _i698 = 0; _i698 < _list697.Count; ++_i698)
                  {
                    double _elem699;
                    _elem699 = iprot.ReadDouble();
                    Joints_list.Add(_elem699);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                Rad = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Scheme_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  Epose = new List<double>();
                  TList _list700 = iprot.ReadListBegin();
                  for( int _i701 = 0; _i701 < _list700.Count; ++_i701)
                  {
                    double _elem702;
                    _elem702 = iprot.ReadDouble();
                    Epose.Add(_elem702);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Double) {
                Eaxis_v = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej2_eaxis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Joints_list != null && __isset.joints_list) {
          field.Name = "joints_list";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Joints_list.Count));
            foreach (double _iter703 in Joints_list)
            {
              oprot.WriteDouble(_iter703);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.rad) {
          field.Name = "rad";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Rad);
          oprot.WriteFieldEnd();
        }
        if (Scheme_name != null && __isset.scheme_name) {
          field.Name = "scheme_name";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Scheme_name);
          oprot.WriteFieldEnd();
        }
        if (Epose != null && __isset.epose) {
          field.Name = "epose";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Epose.Count));
            foreach (double _iter704 in Epose)
            {
              oprot.WriteDouble(_iter704);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.eaxis_v) {
          field.Name = "eaxis_v";
          field.Type = TType.Double;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Eaxis_v);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej2_eaxis_args(");
      bool __first = true;
      if (Joints_list != null && __isset.joints_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Joints_list: ");
        __sb.Append(Joints_list);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.rad) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rad: ");
        __sb.Append(Rad);
      }
      if (Scheme_name != null && __isset.scheme_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scheme_name: ");
        __sb.Append(Scheme_name);
      }
      if (Epose != null && __isset.epose) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Epose: ");
        __sb.Append(Epose);
      }
      if (__isset.eaxis_v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eaxis_v: ");
        __sb.Append(Eaxis_v);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej2_eaxis_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public movej2_eaxis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej2_eaxis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej2_eaxis_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej2_pose_eaxis_args : TBase
  {
    private List<double> _p;
    private double _v;
    private double _a;
    private double _rad;
    private List<double> _qnear;
    private string _tool;
    private string _wobj;
    private string _scheme_name;
    private List<double> _epose;
    private double _eaxis_v;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> P
    {
      get
      {
        return _p;
      }
      set
      {
        __isset.p = true;
        this._p = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double Rad
    {
      get
      {
        return _rad;
      }
      set
      {
        __isset.rad = true;
        this._rad = value;
      }
    }

    public List<double> Qnear
    {
      get
      {
        return _qnear;
      }
      set
      {
        __isset.qnear = true;
        this._qnear = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public string Scheme_name
    {
      get
      {
        return _scheme_name;
      }
      set
      {
        __isset.scheme_name = true;
        this._scheme_name = value;
      }
    }

    public List<double> Epose
    {
      get
      {
        return _epose;
      }
      set
      {
        __isset.epose = true;
        this._epose = value;
      }
    }

    public double Eaxis_v
    {
      get
      {
        return _eaxis_v;
      }
      set
      {
        __isset.eaxis_v = true;
        this._eaxis_v = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p;
      public bool v;
      public bool a;
      public bool rad;
      public bool qnear;
      public bool tool;
      public bool wobj;
      public bool scheme_name;
      public bool epose;
      public bool eaxis_v;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public movej2_pose_eaxis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P = new List<double>();
                  TList _list705 = iprot.ReadListBegin();
                  for( int _i706 = 0; _i706 < _list705.Count; ++_i706)
                  {
                    double _elem707;
                    _elem707 = iprot.ReadDouble();
                    P.Add(_elem707);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                Rad = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Qnear = new List<double>();
                  TList _list708 = iprot.ReadListBegin();
                  for( int _i709 = 0; _i709 < _list708.Count; ++_i709)
                  {
                    double _elem710;
                    _elem710 = iprot.ReadDouble();
                    Qnear.Add(_elem710);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Scheme_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Epose = new List<double>();
                  TList _list711 = iprot.ReadListBegin();
                  for( int _i712 = 0; _i712 < _list711.Count; ++_i712)
                  {
                    double _elem713;
                    _elem713 = iprot.ReadDouble();
                    Epose.Add(_elem713);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Double) {
                Eaxis_v = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej2_pose_eaxis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P != null && __isset.p) {
          field.Name = "p";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P.Count));
            foreach (double _iter714 in P)
            {
              oprot.WriteDouble(_iter714);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.rad) {
          field.Name = "rad";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Rad);
          oprot.WriteFieldEnd();
        }
        if (Qnear != null && __isset.qnear) {
          field.Name = "qnear";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Qnear.Count));
            foreach (double _iter715 in Qnear)
            {
              oprot.WriteDouble(_iter715);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (Scheme_name != null && __isset.scheme_name) {
          field.Name = "scheme_name";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Scheme_name);
          oprot.WriteFieldEnd();
        }
        if (Epose != null && __isset.epose) {
          field.Name = "epose";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Epose.Count));
            foreach (double _iter716 in Epose)
            {
              oprot.WriteDouble(_iter716);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.eaxis_v) {
          field.Name = "eaxis_v";
          field.Type = TType.Double;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Eaxis_v);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej2_pose_eaxis_args(");
      bool __first = true;
      if (P != null && __isset.p) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P: ");
        __sb.Append(P);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.rad) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rad: ");
        __sb.Append(Rad);
      }
      if (Qnear != null && __isset.qnear) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qnear: ");
        __sb.Append(Qnear);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (Scheme_name != null && __isset.scheme_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scheme_name: ");
        __sb.Append(Scheme_name);
      }
      if (Epose != null && __isset.epose) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Epose: ");
        __sb.Append(Epose);
      }
      if (__isset.eaxis_v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eaxis_v: ");
        __sb.Append(Eaxis_v);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movej2_pose_eaxis_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public movej2_pose_eaxis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movej2_pose_eaxis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movej2_pose_eaxis_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movel_eaxis_args : TBase
  {
    private List<double> _p;
    private double _v;
    private double _a;
    private double _rad;
    private List<double> _qnear;
    private string _tool;
    private string _wobj;
    private string _scheme_name;
    private List<double> _epose;
    private double _eaxis_v;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> P
    {
      get
      {
        return _p;
      }
      set
      {
        __isset.p = true;
        this._p = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double Rad
    {
      get
      {
        return _rad;
      }
      set
      {
        __isset.rad = true;
        this._rad = value;
      }
    }

    public List<double> Qnear
    {
      get
      {
        return _qnear;
      }
      set
      {
        __isset.qnear = true;
        this._qnear = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public string Scheme_name
    {
      get
      {
        return _scheme_name;
      }
      set
      {
        __isset.scheme_name = true;
        this._scheme_name = value;
      }
    }

    public List<double> Epose
    {
      get
      {
        return _epose;
      }
      set
      {
        __isset.epose = true;
        this._epose = value;
      }
    }

    public double Eaxis_v
    {
      get
      {
        return _eaxis_v;
      }
      set
      {
        __isset.eaxis_v = true;
        this._eaxis_v = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p;
      public bool v;
      public bool a;
      public bool rad;
      public bool qnear;
      public bool tool;
      public bool wobj;
      public bool scheme_name;
      public bool epose;
      public bool eaxis_v;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public movel_eaxis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P = new List<double>();
                  TList _list717 = iprot.ReadListBegin();
                  for( int _i718 = 0; _i718 < _list717.Count; ++_i718)
                  {
                    double _elem719;
                    _elem719 = iprot.ReadDouble();
                    P.Add(_elem719);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                Rad = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Qnear = new List<double>();
                  TList _list720 = iprot.ReadListBegin();
                  for( int _i721 = 0; _i721 < _list720.Count; ++_i721)
                  {
                    double _elem722;
                    _elem722 = iprot.ReadDouble();
                    Qnear.Add(_elem722);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Scheme_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Epose = new List<double>();
                  TList _list723 = iprot.ReadListBegin();
                  for( int _i724 = 0; _i724 < _list723.Count; ++_i724)
                  {
                    double _elem725;
                    _elem725 = iprot.ReadDouble();
                    Epose.Add(_elem725);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Double) {
                Eaxis_v = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movel_eaxis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P != null && __isset.p) {
          field.Name = "p";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P.Count));
            foreach (double _iter726 in P)
            {
              oprot.WriteDouble(_iter726);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.rad) {
          field.Name = "rad";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Rad);
          oprot.WriteFieldEnd();
        }
        if (Qnear != null && __isset.qnear) {
          field.Name = "qnear";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Qnear.Count));
            foreach (double _iter727 in Qnear)
            {
              oprot.WriteDouble(_iter727);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (Scheme_name != null && __isset.scheme_name) {
          field.Name = "scheme_name";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Scheme_name);
          oprot.WriteFieldEnd();
        }
        if (Epose != null && __isset.epose) {
          field.Name = "epose";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Epose.Count));
            foreach (double _iter728 in Epose)
            {
              oprot.WriteDouble(_iter728);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.eaxis_v) {
          field.Name = "eaxis_v";
          field.Type = TType.Double;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Eaxis_v);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movel_eaxis_args(");
      bool __first = true;
      if (P != null && __isset.p) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P: ");
        __sb.Append(P);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.rad) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rad: ");
        __sb.Append(Rad);
      }
      if (Qnear != null && __isset.qnear) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qnear: ");
        __sb.Append(Qnear);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (Scheme_name != null && __isset.scheme_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scheme_name: ");
        __sb.Append(Scheme_name);
      }
      if (Epose != null && __isset.epose) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Epose: ");
        __sb.Append(Epose);
      }
      if (__isset.eaxis_v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eaxis_v: ");
        __sb.Append(Eaxis_v);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movel_eaxis_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public movel_eaxis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movel_eaxis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movel_eaxis_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movec_eaxis_args : TBase
  {
    private List<double> _p1;
    private List<double> _p2;
    private double _v;
    private double _a;
    private double _rad;
    private List<double> _qnear;
    private string _tool;
    private string _wobj;
    private string _scheme_name;
    private List<double> _epose;
    private double _eaxis_v;
    private bool _block;
    private Op _op;
    private bool _def_acc;

    public List<double> P1
    {
      get
      {
        return _p1;
      }
      set
      {
        __isset.p1 = true;
        this._p1 = value;
      }
    }

    public List<double> P2
    {
      get
      {
        return _p2;
      }
      set
      {
        __isset.p2 = true;
        this._p2 = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double A
    {
      get
      {
        return _a;
      }
      set
      {
        __isset.a = true;
        this._a = value;
      }
    }

    public double Rad
    {
      get
      {
        return _rad;
      }
      set
      {
        __isset.rad = true;
        this._rad = value;
      }
    }

    public List<double> Qnear
    {
      get
      {
        return _qnear;
      }
      set
      {
        __isset.qnear = true;
        this._qnear = value;
      }
    }

    public string Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public string Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public string Scheme_name
    {
      get
      {
        return _scheme_name;
      }
      set
      {
        __isset.scheme_name = true;
        this._scheme_name = value;
      }
    }

    public List<double> Epose
    {
      get
      {
        return _epose;
      }
      set
      {
        __isset.epose = true;
        this._epose = value;
      }
    }

    public double Eaxis_v
    {
      get
      {
        return _eaxis_v;
      }
      set
      {
        __isset.eaxis_v = true;
        this._eaxis_v = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }

    public Op Op
    {
      get
      {
        return _op;
      }
      set
      {
        __isset.op = true;
        this._op = value;
      }
    }

    public bool Def_acc
    {
      get
      {
        return _def_acc;
      }
      set
      {
        __isset.def_acc = true;
        this._def_acc = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool p1;
      public bool p2;
      public bool v;
      public bool a;
      public bool rad;
      public bool qnear;
      public bool tool;
      public bool wobj;
      public bool scheme_name;
      public bool epose;
      public bool eaxis_v;
      public bool block;
      public bool op;
      public bool def_acc;
    }

    public movec_eaxis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  P1 = new List<double>();
                  TList _list729 = iprot.ReadListBegin();
                  for( int _i730 = 0; _i730 < _list729.Count; ++_i730)
                  {
                    double _elem731;
                    _elem731 = iprot.ReadDouble();
                    P1.Add(_elem731);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  P2 = new List<double>();
                  TList _list732 = iprot.ReadListBegin();
                  for( int _i733 = 0; _i733 < _list732.Count; ++_i733)
                  {
                    double _elem734;
                    _elem734 = iprot.ReadDouble();
                    P2.Add(_elem734);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                A = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                Rad = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  Qnear = new List<double>();
                  TList _list735 = iprot.ReadListBegin();
                  for( int _i736 = 0; _i736 < _list735.Count; ++_i736)
                  {
                    double _elem737;
                    _elem737 = iprot.ReadDouble();
                    Qnear.Add(_elem737);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Tool = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Wobj = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Scheme_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.List) {
                {
                  Epose = new List<double>();
                  TList _list738 = iprot.ReadListBegin();
                  for( int _i739 = 0; _i739 < _list738.Count; ++_i739)
                  {
                    double _elem740;
                    _elem740 = iprot.ReadDouble();
                    Epose.Add(_elem740);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Double) {
                Eaxis_v = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Struct) {
                Op = new Op();
                Op.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Bool) {
                Def_acc = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movec_eaxis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (P1 != null && __isset.p1) {
          field.Name = "p1";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P1.Count));
            foreach (double _iter741 in P1)
            {
              oprot.WriteDouble(_iter741);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (P2 != null && __isset.p2) {
          field.Name = "p2";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, P2.Count));
            foreach (double _iter742 in P2)
            {
              oprot.WriteDouble(_iter742);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.a) {
          field.Name = "a";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(A);
          oprot.WriteFieldEnd();
        }
        if (__isset.rad) {
          field.Name = "rad";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Rad);
          oprot.WriteFieldEnd();
        }
        if (Qnear != null && __isset.qnear) {
          field.Name = "qnear";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Qnear.Count));
            foreach (double _iter743 in Qnear)
            {
              oprot.WriteDouble(_iter743);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tool);
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Wobj);
          oprot.WriteFieldEnd();
        }
        if (Scheme_name != null && __isset.scheme_name) {
          field.Name = "scheme_name";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Scheme_name);
          oprot.WriteFieldEnd();
        }
        if (Epose != null && __isset.epose) {
          field.Name = "epose";
          field.Type = TType.List;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Epose.Count));
            foreach (double _iter744 in Epose)
            {
              oprot.WriteDouble(_iter744);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.eaxis_v) {
          field.Name = "eaxis_v";
          field.Type = TType.Double;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Eaxis_v);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        if (Op != null && __isset.op) {
          field.Name = "op";
          field.Type = TType.Struct;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          Op.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.def_acc) {
          field.Name = "def_acc";
          field.Type = TType.Bool;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Def_acc);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movec_eaxis_args(");
      bool __first = true;
      if (P1 != null && __isset.p1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P1: ");
        __sb.Append(P1);
      }
      if (P2 != null && __isset.p2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P2: ");
        __sb.Append(P2);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.a) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A: ");
        __sb.Append(A);
      }
      if (__isset.rad) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rad: ");
        __sb.Append(Rad);
      }
      if (Qnear != null && __isset.qnear) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Qnear: ");
        __sb.Append(Qnear);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (Scheme_name != null && __isset.scheme_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scheme_name: ");
        __sb.Append(Scheme_name);
      }
      if (Epose != null && __isset.epose) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Epose: ");
        __sb.Append(Epose);
      }
      if (__isset.eaxis_v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Eaxis_v: ");
        __sb.Append(Eaxis_v);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      if (Op != null && __isset.op) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Op: ");
        __sb.Append(Op== null ? "<null>" : Op.ToString());
      }
      if (__isset.def_acc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def_acc: ");
        __sb.Append(Def_acc);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class movec_eaxis_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public movec_eaxis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("movec_eaxis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("movec_eaxis_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reach_check_args : TBase
  {
    private List<double> _base;
    private List<double> _wobj;
    private List<double> _tool;
    private List<double> _ref_pos;
    private List<List<double>> _check_points;

    public List<double> Base
    {
      get
      {
        return _base;
      }
      set
      {
        __isset.@base = true;
        this._base = value;
      }
    }

    public List<double> Wobj
    {
      get
      {
        return _wobj;
      }
      set
      {
        __isset.wobj = true;
        this._wobj = value;
      }
    }

    public List<double> Tool
    {
      get
      {
        return _tool;
      }
      set
      {
        __isset.tool = true;
        this._tool = value;
      }
    }

    public List<double> Ref_pos
    {
      get
      {
        return _ref_pos;
      }
      set
      {
        __isset.ref_pos = true;
        this._ref_pos = value;
      }
    }

    public List<List<double>> Check_points
    {
      get
      {
        return _check_points;
      }
      set
      {
        __isset.check_points = true;
        this._check_points = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool @base;
      public bool wobj;
      public bool tool;
      public bool ref_pos;
      public bool check_points;
    }

    public reach_check_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Base = new List<double>();
                  TList _list745 = iprot.ReadListBegin();
                  for( int _i746 = 0; _i746 < _list745.Count; ++_i746)
                  {
                    double _elem747;
                    _elem747 = iprot.ReadDouble();
                    Base.Add(_elem747);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Wobj = new List<double>();
                  TList _list748 = iprot.ReadListBegin();
                  for( int _i749 = 0; _i749 < _list748.Count; ++_i749)
                  {
                    double _elem750;
                    _elem750 = iprot.ReadDouble();
                    Wobj.Add(_elem750);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Tool = new List<double>();
                  TList _list751 = iprot.ReadListBegin();
                  for( int _i752 = 0; _i752 < _list751.Count; ++_i752)
                  {
                    double _elem753;
                    _elem753 = iprot.ReadDouble();
                    Tool.Add(_elem753);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Ref_pos = new List<double>();
                  TList _list754 = iprot.ReadListBegin();
                  for( int _i755 = 0; _i755 < _list754.Count; ++_i755)
                  {
                    double _elem756;
                    _elem756 = iprot.ReadDouble();
                    Ref_pos.Add(_elem756);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Check_points = new List<List<double>>();
                  TList _list757 = iprot.ReadListBegin();
                  for( int _i758 = 0; _i758 < _list757.Count; ++_i758)
                  {
                    List<double> _elem759;
                    {
                      _elem759 = new List<double>();
                      TList _list760 = iprot.ReadListBegin();
                      for( int _i761 = 0; _i761 < _list760.Count; ++_i761)
                      {
                        double _elem762;
                        _elem762 = iprot.ReadDouble();
                        _elem759.Add(_elem762);
                      }
                      iprot.ReadListEnd();
                    }
                    Check_points.Add(_elem759);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reach_check_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Base != null && __isset.@base) {
          field.Name = "base";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Base.Count));
            foreach (double _iter763 in Base)
            {
              oprot.WriteDouble(_iter763);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Wobj != null && __isset.wobj) {
          field.Name = "wobj";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Wobj.Count));
            foreach (double _iter764 in Wobj)
            {
              oprot.WriteDouble(_iter764);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tool != null && __isset.tool) {
          field.Name = "tool";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Tool.Count));
            foreach (double _iter765 in Tool)
            {
              oprot.WriteDouble(_iter765);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Ref_pos != null && __isset.ref_pos) {
          field.Name = "ref_pos";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Ref_pos.Count));
            foreach (double _iter766 in Ref_pos)
            {
              oprot.WriteDouble(_iter766);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Check_points != null && __isset.check_points) {
          field.Name = "check_points";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Check_points.Count));
            foreach (List<double> _iter767 in Check_points)
            {
              {
                oprot.WriteListBegin(new TList(TType.Double, _iter767.Count));
                foreach (double _iter768 in _iter767)
                {
                  oprot.WriteDouble(_iter768);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reach_check_args(");
      bool __first = true;
      if (Base != null && __isset.@base) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Base: ");
        __sb.Append(Base);
      }
      if (Wobj != null && __isset.wobj) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Wobj: ");
        __sb.Append(Wobj);
      }
      if (Tool != null && __isset.tool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tool: ");
        __sb.Append(Tool);
      }
      if (Ref_pos != null && __isset.ref_pos) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ref_pos: ");
        __sb.Append(Ref_pos);
      }
      if (Check_points != null && __isset.check_points) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Check_points: ");
        __sb.Append(Check_points);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reach_check_result : TBase
  {
    private ReachabilityParam _success;

    public ReachabilityParam Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public reach_check_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReachabilityParam();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reach_check_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reach_check_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class move_jog_eaxis_args : TBase
  {
    private string _name;
    private int _direction;
    private double _vel;
    private bool _block;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        this._direction = value;
      }
    }

    public double Vel
    {
      get
      {
        return _vel;
      }
      set
      {
        __isset.vel = true;
        this._vel = value;
      }
    }

    public bool Block
    {
      get
      {
        return _block;
      }
      set
      {
        __isset.block = true;
        this._block = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool direction;
      public bool vel;
      public bool block;
    }

    public move_jog_eaxis_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Direction = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                Vel = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Block = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("move_jog_eaxis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.direction) {
          field.Name = "direction";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Direction);
          oprot.WriteFieldEnd();
        }
        if (__isset.vel) {
          field.Name = "vel";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Vel);
          oprot.WriteFieldEnd();
        }
        if (__isset.block) {
          field.Name = "block";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Block);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("move_jog_eaxis_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.direction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Direction: ");
        __sb.Append(Direction);
      }
      if (__isset.vel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Vel: ");
        __sb.Append(Vel);
      }
      if (__isset.block) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Block: ");
        __sb.Append(Block);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class move_jog_eaxis_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public move_jog_eaxis_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("move_jog_eaxis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("move_jog_eaxis_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_eaxis_info_args : TBase
  {

    public get_eaxis_info_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_eaxis_info_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_eaxis_info_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_eaxis_info_result : TBase
  {
    private List<EAxissInfo> _success;

    public List<EAxissInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public get_eaxis_info_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<EAxissInfo>();
                  TList _list769 = iprot.ReadListBegin();
                  for( int _i770 = 0; _i770 < _list769.Count; ++_i770)
                  {
                    EAxissInfo _elem771;
                    _elem771 = new EAxissInfo();
                    _elem771.Read(iprot);
                    Success.Add(_elem771);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("get_eaxis_info_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (EAxissInfo _iter772 in Success)
              {
                _iter772.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("get_eaxis_info_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_hand_teach_parameter_args : TBase
  {
    private int _space;
    private int _joint_scale;
    private int _cart_scale;
    private int _coord_type;
    private List<bool> _direction;

    public int Space
    {
      get
      {
        return _space;
      }
      set
      {
        __isset.space = true;
        this._space = value;
      }
    }

    public int Joint_scale
    {
      get
      {
        return _joint_scale;
      }
      set
      {
        __isset.joint_scale = true;
        this._joint_scale = value;
      }
    }

    public int Cart_scale
    {
      get
      {
        return _cart_scale;
      }
      set
      {
        __isset.cart_scale = true;
        this._cart_scale = value;
      }
    }

    public int Coord_type
    {
      get
      {
        return _coord_type;
      }
      set
      {
        __isset.coord_type = true;
        this._coord_type = value;
      }
    }

    public List<bool> Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        this._direction = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool space;
      public bool joint_scale;
      public bool cart_scale;
      public bool coord_type;
      public bool direction;
    }

    public set_hand_teach_parameter_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Space = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Joint_scale = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Cart_scale = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Coord_type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Direction = new List<bool>();
                  TList _list773 = iprot.ReadListBegin();
                  for( int _i774 = 0; _i774 < _list773.Count; ++_i774)
                  {
                    bool _elem775;
                    _elem775 = iprot.ReadBool();
                    Direction.Add(_elem775);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_hand_teach_parameter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.space) {
          field.Name = "space";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Space);
          oprot.WriteFieldEnd();
        }
        if (__isset.joint_scale) {
          field.Name = "joint_scale";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Joint_scale);
          oprot.WriteFieldEnd();
        }
        if (__isset.cart_scale) {
          field.Name = "cart_scale";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Cart_scale);
          oprot.WriteFieldEnd();
        }
        if (__isset.coord_type) {
          field.Name = "coord_type";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Coord_type);
          oprot.WriteFieldEnd();
        }
        if (Direction != null && __isset.direction) {
          field.Name = "direction";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Bool, Direction.Count));
            foreach (bool _iter776 in Direction)
            {
              oprot.WriteBool(_iter776);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_hand_teach_parameter_args(");
      bool __first = true;
      if (__isset.space) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Space: ");
        __sb.Append(Space);
      }
      if (__isset.joint_scale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Joint_scale: ");
        __sb.Append(Joint_scale);
      }
      if (__isset.cart_scale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cart_scale: ");
        __sb.Append(Cart_scale);
      }
      if (__isset.coord_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Coord_type: ");
        __sb.Append(Coord_type);
      }
      if (Direction != null && __isset.direction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Direction: ");
        __sb.Append(Direction);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_hand_teach_parameter_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_hand_teach_parameter_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_hand_teach_parameter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_hand_teach_parameter_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_pendant_type_args : TBase
  {
    private int _type;

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
    }

    public set_pendant_type_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_pendant_type_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_pendant_type_args(");
      bool __first = true;
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_pendant_type_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_pendant_type_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_pendant_type_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_pendant_type_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_blend_ahead_args : TBase
  {
    private int _per;

    public int Per
    {
      get
      {
        return _per;
      }
      set
      {
        __isset.per = true;
        this._per = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool per;
    }

    public set_blend_ahead_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Per = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_blend_ahead_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.per) {
          field.Name = "per";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Per);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_blend_ahead_args(");
      bool __first = true;
      if (__isset.per) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Per: ");
        __sb.Append(Per);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class set_blend_ahead_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public set_blend_ahead_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("set_blend_ahead_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("set_blend_ahead_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
