/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ReachabilityParam : TBase
{

  public bool Result { get; set; }

  public List<List<double>> Joints_pos { get; set; }

  public ReachabilityParam() {
  }

  public ReachabilityParam(bool result, List<List<double>> joints_pos) : this() {
    this.Result = result;
    this.Joints_pos = joints_pos;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_result = false;
      bool isset_joints_pos = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Result = iprot.ReadBool();
              isset_result = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Joints_pos = new List<List<double>>();
                TList _list152 = iprot.ReadListBegin();
                for( int _i153 = 0; _i153 < _list152.Count; ++_i153)
                {
                  List<double> _elem154;
                  {
                    _elem154 = new List<double>();
                    TList _list155 = iprot.ReadListBegin();
                    for( int _i156 = 0; _i156 < _list155.Count; ++_i156)
                    {
                      double _elem157;
                      _elem157 = iprot.ReadDouble();
                      _elem154.Add(_elem157);
                    }
                    iprot.ReadListEnd();
                  }
                  Joints_pos.Add(_elem154);
                }
                iprot.ReadListEnd();
              }
              isset_joints_pos = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_result)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Result not set");
      if (!isset_joints_pos)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Joints_pos not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ReachabilityParam");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "result";
      field.Type = TType.Bool;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Result);
      oprot.WriteFieldEnd();
      if (Joints_pos == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Joints_pos not set");
      field.Name = "joints_pos";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.List, Joints_pos.Count));
        foreach (List<double> _iter158 in Joints_pos)
        {
          {
            oprot.WriteListBegin(new TList(TType.Double, _iter158.Count));
            foreach (double _iter159 in _iter158)
            {
              oprot.WriteDouble(_iter159);
            }
            oprot.WriteListEnd();
          }
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ReachabilityParam(");
    __sb.Append(", Result: ");
    __sb.Append(Result);
    __sb.Append(", Joints_pos: ");
    __sb.Append(Joints_pos);
    __sb.Append(")");
    return __sb.ToString();
  }

}

