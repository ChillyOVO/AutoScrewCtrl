/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class RobotStatus : TBase
{

  public List<double> JointExpectPosition { get; set; }

  public List<double> JointExpectVelocity { get; set; }

  public List<double> JointExpectAccelera { get; set; }

  public List<double> JointActualPosition { get; set; }

  public List<double> JointActualVelocity { get; set; }

  public List<double> JointActualAccelera { get; set; }

  public List<double> JointActualCurrent { get; set; }

  public List<double> JointTemperature { get; set; }

  public List<double> DriverTemperature { get; set; }

  public List<double> CartExpectPosition { get; set; }

  public List<double> CartExpectVelocity { get; set; }

  public List<double> CartExpectAccelera { get; set; }

  public List<double> CartActualPosition { get; set; }

  public List<double> CartActualVelocity { get; set; }

  public List<double> CartActualAccelera { get; set; }

  public List<bool> SlaveReady { get; set; }

  public bool Collision { get; set; }

  public sbyte CollisionAxis { get; set; }

  public bool EmcStopSignal { get; set; }

  public sbyte RobotState { get; set; }

  public int RobotError { get; set; }

  public RobotStatus() {
  }

  public RobotStatus(List<double> jointExpectPosition, List<double> jointExpectVelocity, List<double> jointExpectAccelera, List<double> jointActualPosition, List<double> jointActualVelocity, List<double> jointActualAccelera, List<double> jointActualCurrent, List<double> jointTemperature, List<double> driverTemperature, List<double> cartExpectPosition, List<double> cartExpectVelocity, List<double> cartExpectAccelera, List<double> cartActualPosition, List<double> cartActualVelocity, List<double> cartActualAccelera, List<bool> slaveReady, bool collision, sbyte collisionAxis, bool emcStopSignal, sbyte robotState, int robotError) : this() {
    this.JointExpectPosition = jointExpectPosition;
    this.JointExpectVelocity = jointExpectVelocity;
    this.JointExpectAccelera = jointExpectAccelera;
    this.JointActualPosition = jointActualPosition;
    this.JointActualVelocity = jointActualVelocity;
    this.JointActualAccelera = jointActualAccelera;
    this.JointActualCurrent = jointActualCurrent;
    this.JointTemperature = jointTemperature;
    this.DriverTemperature = driverTemperature;
    this.CartExpectPosition = cartExpectPosition;
    this.CartExpectVelocity = cartExpectVelocity;
    this.CartExpectAccelera = cartExpectAccelera;
    this.CartActualPosition = cartActualPosition;
    this.CartActualVelocity = cartActualVelocity;
    this.CartActualAccelera = cartActualAccelera;
    this.SlaveReady = slaveReady;
    this.Collision = collision;
    this.CollisionAxis = collisionAxis;
    this.EmcStopSignal = emcStopSignal;
    this.RobotState = robotState;
    this.RobotError = robotError;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_jointExpectPosition = false;
      bool isset_jointExpectVelocity = false;
      bool isset_jointExpectAccelera = false;
      bool isset_jointActualPosition = false;
      bool isset_jointActualVelocity = false;
      bool isset_jointActualAccelera = false;
      bool isset_jointActualCurrent = false;
      bool isset_jointTemperature = false;
      bool isset_driverTemperature = false;
      bool isset_cartExpectPosition = false;
      bool isset_cartExpectVelocity = false;
      bool isset_cartExpectAccelera = false;
      bool isset_cartActualPosition = false;
      bool isset_cartActualVelocity = false;
      bool isset_cartActualAccelera = false;
      bool isset_slaveReady = false;
      bool isset_collision = false;
      bool isset_collisionAxis = false;
      bool isset_emcStopSignal = false;
      bool isset_robotState = false;
      bool isset_robotError = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                JointExpectPosition = new List<double>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  double _elem2;
                  _elem2 = iprot.ReadDouble();
                  JointExpectPosition.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
              isset_jointExpectPosition = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                JointExpectVelocity = new List<double>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  double _elem5;
                  _elem5 = iprot.ReadDouble();
                  JointExpectVelocity.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
              isset_jointExpectVelocity = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                JointExpectAccelera = new List<double>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  double _elem8;
                  _elem8 = iprot.ReadDouble();
                  JointExpectAccelera.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
              isset_jointExpectAccelera = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                JointActualPosition = new List<double>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  double _elem11;
                  _elem11 = iprot.ReadDouble();
                  JointActualPosition.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
              isset_jointActualPosition = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                JointActualVelocity = new List<double>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  double _elem14;
                  _elem14 = iprot.ReadDouble();
                  JointActualVelocity.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
              isset_jointActualVelocity = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                JointActualAccelera = new List<double>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  double _elem17;
                  _elem17 = iprot.ReadDouble();
                  JointActualAccelera.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
              isset_jointActualAccelera = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                JointActualCurrent = new List<double>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  double _elem20;
                  _elem20 = iprot.ReadDouble();
                  JointActualCurrent.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
              isset_jointActualCurrent = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                JointTemperature = new List<double>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  double _elem23;
                  _elem23 = iprot.ReadDouble();
                  JointTemperature.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
              isset_jointTemperature = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                DriverTemperature = new List<double>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  double _elem26;
                  _elem26 = iprot.ReadDouble();
                  DriverTemperature.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
              isset_driverTemperature = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                CartExpectPosition = new List<double>();
                TList _list27 = iprot.ReadListBegin();
                for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                {
                  double _elem29;
                  _elem29 = iprot.ReadDouble();
                  CartExpectPosition.Add(_elem29);
                }
                iprot.ReadListEnd();
              }
              isset_cartExpectPosition = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                CartExpectVelocity = new List<double>();
                TList _list30 = iprot.ReadListBegin();
                for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                {
                  double _elem32;
                  _elem32 = iprot.ReadDouble();
                  CartExpectVelocity.Add(_elem32);
                }
                iprot.ReadListEnd();
              }
              isset_cartExpectVelocity = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                CartExpectAccelera = new List<double>();
                TList _list33 = iprot.ReadListBegin();
                for( int _i34 = 0; _i34 < _list33.Count; ++_i34)
                {
                  double _elem35;
                  _elem35 = iprot.ReadDouble();
                  CartExpectAccelera.Add(_elem35);
                }
                iprot.ReadListEnd();
              }
              isset_cartExpectAccelera = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                CartActualPosition = new List<double>();
                TList _list36 = iprot.ReadListBegin();
                for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                {
                  double _elem38;
                  _elem38 = iprot.ReadDouble();
                  CartActualPosition.Add(_elem38);
                }
                iprot.ReadListEnd();
              }
              isset_cartActualPosition = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.List) {
              {
                CartActualVelocity = new List<double>();
                TList _list39 = iprot.ReadListBegin();
                for( int _i40 = 0; _i40 < _list39.Count; ++_i40)
                {
                  double _elem41;
                  _elem41 = iprot.ReadDouble();
                  CartActualVelocity.Add(_elem41);
                }
                iprot.ReadListEnd();
              }
              isset_cartActualVelocity = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.List) {
              {
                CartActualAccelera = new List<double>();
                TList _list42 = iprot.ReadListBegin();
                for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                {
                  double _elem44;
                  _elem44 = iprot.ReadDouble();
                  CartActualAccelera.Add(_elem44);
                }
                iprot.ReadListEnd();
              }
              isset_cartActualAccelera = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.List) {
              {
                SlaveReady = new List<bool>();
                TList _list45 = iprot.ReadListBegin();
                for( int _i46 = 0; _i46 < _list45.Count; ++_i46)
                {
                  bool _elem47;
                  _elem47 = iprot.ReadBool();
                  SlaveReady.Add(_elem47);
                }
                iprot.ReadListEnd();
              }
              isset_slaveReady = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Bool) {
              Collision = iprot.ReadBool();
              isset_collision = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Byte) {
              CollisionAxis = iprot.ReadByte();
              isset_collisionAxis = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Bool) {
              EmcStopSignal = iprot.ReadBool();
              isset_emcStopSignal = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Byte) {
              RobotState = iprot.ReadByte();
              isset_robotState = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I32) {
              RobotError = iprot.ReadI32();
              isset_robotError = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_jointExpectPosition)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointExpectPosition not set");
      if (!isset_jointExpectVelocity)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointExpectVelocity not set");
      if (!isset_jointExpectAccelera)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointExpectAccelera not set");
      if (!isset_jointActualPosition)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointActualPosition not set");
      if (!isset_jointActualVelocity)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointActualVelocity not set");
      if (!isset_jointActualAccelera)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointActualAccelera not set");
      if (!isset_jointActualCurrent)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointActualCurrent not set");
      if (!isset_jointTemperature)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointTemperature not set");
      if (!isset_driverTemperature)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DriverTemperature not set");
      if (!isset_cartExpectPosition)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartExpectPosition not set");
      if (!isset_cartExpectVelocity)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartExpectVelocity not set");
      if (!isset_cartExpectAccelera)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartExpectAccelera not set");
      if (!isset_cartActualPosition)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartActualPosition not set");
      if (!isset_cartActualVelocity)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartActualVelocity not set");
      if (!isset_cartActualAccelera)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartActualAccelera not set");
      if (!isset_slaveReady)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SlaveReady not set");
      if (!isset_collision)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Collision not set");
      if (!isset_collisionAxis)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CollisionAxis not set");
      if (!isset_emcStopSignal)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field EmcStopSignal not set");
      if (!isset_robotState)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field RobotState not set");
      if (!isset_robotError)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field RobotError not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("RobotStatus");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (JointExpectPosition == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointExpectPosition not set");
      field.Name = "jointExpectPosition";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, JointExpectPosition.Count));
        foreach (double _iter48 in JointExpectPosition)
        {
          oprot.WriteDouble(_iter48);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (JointExpectVelocity == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointExpectVelocity not set");
      field.Name = "jointExpectVelocity";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, JointExpectVelocity.Count));
        foreach (double _iter49 in JointExpectVelocity)
        {
          oprot.WriteDouble(_iter49);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (JointExpectAccelera == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointExpectAccelera not set");
      field.Name = "jointExpectAccelera";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, JointExpectAccelera.Count));
        foreach (double _iter50 in JointExpectAccelera)
        {
          oprot.WriteDouble(_iter50);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (JointActualPosition == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointActualPosition not set");
      field.Name = "jointActualPosition";
      field.Type = TType.List;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, JointActualPosition.Count));
        foreach (double _iter51 in JointActualPosition)
        {
          oprot.WriteDouble(_iter51);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (JointActualVelocity == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointActualVelocity not set");
      field.Name = "jointActualVelocity";
      field.Type = TType.List;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, JointActualVelocity.Count));
        foreach (double _iter52 in JointActualVelocity)
        {
          oprot.WriteDouble(_iter52);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (JointActualAccelera == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointActualAccelera not set");
      field.Name = "jointActualAccelera";
      field.Type = TType.List;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, JointActualAccelera.Count));
        foreach (double _iter53 in JointActualAccelera)
        {
          oprot.WriteDouble(_iter53);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (JointActualCurrent == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointActualCurrent not set");
      field.Name = "jointActualCurrent";
      field.Type = TType.List;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, JointActualCurrent.Count));
        foreach (double _iter54 in JointActualCurrent)
        {
          oprot.WriteDouble(_iter54);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (JointTemperature == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field JointTemperature not set");
      field.Name = "jointTemperature";
      field.Type = TType.List;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, JointTemperature.Count));
        foreach (double _iter55 in JointTemperature)
        {
          oprot.WriteDouble(_iter55);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (DriverTemperature == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DriverTemperature not set");
      field.Name = "driverTemperature";
      field.Type = TType.List;
      field.ID = 9;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, DriverTemperature.Count));
        foreach (double _iter56 in DriverTemperature)
        {
          oprot.WriteDouble(_iter56);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (CartExpectPosition == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartExpectPosition not set");
      field.Name = "cartExpectPosition";
      field.Type = TType.List;
      field.ID = 10;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, CartExpectPosition.Count));
        foreach (double _iter57 in CartExpectPosition)
        {
          oprot.WriteDouble(_iter57);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (CartExpectVelocity == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartExpectVelocity not set");
      field.Name = "cartExpectVelocity";
      field.Type = TType.List;
      field.ID = 11;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, CartExpectVelocity.Count));
        foreach (double _iter58 in CartExpectVelocity)
        {
          oprot.WriteDouble(_iter58);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (CartExpectAccelera == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartExpectAccelera not set");
      field.Name = "cartExpectAccelera";
      field.Type = TType.List;
      field.ID = 12;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, CartExpectAccelera.Count));
        foreach (double _iter59 in CartExpectAccelera)
        {
          oprot.WriteDouble(_iter59);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (CartActualPosition == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartActualPosition not set");
      field.Name = "cartActualPosition";
      field.Type = TType.List;
      field.ID = 13;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, CartActualPosition.Count));
        foreach (double _iter60 in CartActualPosition)
        {
          oprot.WriteDouble(_iter60);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (CartActualVelocity == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartActualVelocity not set");
      field.Name = "cartActualVelocity";
      field.Type = TType.List;
      field.ID = 14;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, CartActualVelocity.Count));
        foreach (double _iter61 in CartActualVelocity)
        {
          oprot.WriteDouble(_iter61);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (CartActualAccelera == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CartActualAccelera not set");
      field.Name = "cartActualAccelera";
      field.Type = TType.List;
      field.ID = 15;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, CartActualAccelera.Count));
        foreach (double _iter62 in CartActualAccelera)
        {
          oprot.WriteDouble(_iter62);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (SlaveReady == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SlaveReady not set");
      field.Name = "slaveReady";
      field.Type = TType.List;
      field.ID = 16;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Bool, SlaveReady.Count));
        foreach (bool _iter63 in SlaveReady)
        {
          oprot.WriteBool(_iter63);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "collision";
      field.Type = TType.Bool;
      field.ID = 17;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Collision);
      oprot.WriteFieldEnd();
      field.Name = "collisionAxis";
      field.Type = TType.Byte;
      field.ID = 18;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(CollisionAxis);
      oprot.WriteFieldEnd();
      field.Name = "emcStopSignal";
      field.Type = TType.Bool;
      field.ID = 19;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(EmcStopSignal);
      oprot.WriteFieldEnd();
      field.Name = "robotState";
      field.Type = TType.Byte;
      field.ID = 20;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(RobotState);
      oprot.WriteFieldEnd();
      field.Name = "robotError";
      field.Type = TType.I32;
      field.ID = 21;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(RobotError);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("RobotStatus(");
    __sb.Append(", JointExpectPosition: ");
    __sb.Append(JointExpectPosition);
    __sb.Append(", JointExpectVelocity: ");
    __sb.Append(JointExpectVelocity);
    __sb.Append(", JointExpectAccelera: ");
    __sb.Append(JointExpectAccelera);
    __sb.Append(", JointActualPosition: ");
    __sb.Append(JointActualPosition);
    __sb.Append(", JointActualVelocity: ");
    __sb.Append(JointActualVelocity);
    __sb.Append(", JointActualAccelera: ");
    __sb.Append(JointActualAccelera);
    __sb.Append(", JointActualCurrent: ");
    __sb.Append(JointActualCurrent);
    __sb.Append(", JointTemperature: ");
    __sb.Append(JointTemperature);
    __sb.Append(", DriverTemperature: ");
    __sb.Append(DriverTemperature);
    __sb.Append(", CartExpectPosition: ");
    __sb.Append(CartExpectPosition);
    __sb.Append(", CartExpectVelocity: ");
    __sb.Append(CartExpectVelocity);
    __sb.Append(", CartExpectAccelera: ");
    __sb.Append(CartExpectAccelera);
    __sb.Append(", CartActualPosition: ");
    __sb.Append(CartActualPosition);
    __sb.Append(", CartActualVelocity: ");
    __sb.Append(CartActualVelocity);
    __sb.Append(", CartActualAccelera: ");
    __sb.Append(CartActualAccelera);
    __sb.Append(", SlaveReady: ");
    __sb.Append(SlaveReady);
    __sb.Append(", Collision: ");
    __sb.Append(Collision);
    __sb.Append(", CollisionAxis: ");
    __sb.Append(CollisionAxis);
    __sb.Append(", EmcStopSignal: ");
    __sb.Append(EmcStopSignal);
    __sb.Append(", RobotState: ");
    __sb.Append(RobotState);
    __sb.Append(", RobotError: ");
    __sb.Append(RobotError);
    __sb.Append(")");
    return __sb.ToString();
  }

}

