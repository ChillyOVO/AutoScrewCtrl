/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-01-19")
public class RobotStatus implements org.apache.thrift.TBase<RobotStatus, RobotStatus._Fields>, java.io.Serializable, Cloneable, Comparable<RobotStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RobotStatus");

  private static final org.apache.thrift.protocol.TField JOINT_EXPECT_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("jointExpectPosition", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField JOINT_EXPECT_VELOCITY_FIELD_DESC = new org.apache.thrift.protocol.TField("jointExpectVelocity", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField JOINT_EXPECT_ACCELERA_FIELD_DESC = new org.apache.thrift.protocol.TField("jointExpectAccelera", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField JOINT_ACTUAL_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("jointActualPosition", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField JOINT_ACTUAL_VELOCITY_FIELD_DESC = new org.apache.thrift.protocol.TField("jointActualVelocity", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField JOINT_ACTUAL_ACCELERA_FIELD_DESC = new org.apache.thrift.protocol.TField("jointActualAccelera", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField JOINT_ACTUAL_CURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("jointActualCurrent", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField JOINT_TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("jointTemperature", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DRIVER_TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("driverTemperature", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField CART_EXPECT_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("cartExpectPosition", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField CART_EXPECT_VELOCITY_FIELD_DESC = new org.apache.thrift.protocol.TField("cartExpectVelocity", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField CART_EXPECT_ACCELERA_FIELD_DESC = new org.apache.thrift.protocol.TField("cartExpectAccelera", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField CART_ACTUAL_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("cartActualPosition", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField CART_ACTUAL_VELOCITY_FIELD_DESC = new org.apache.thrift.protocol.TField("cartActualVelocity", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField CART_ACTUAL_ACCELERA_FIELD_DESC = new org.apache.thrift.protocol.TField("cartActualAccelera", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField SLAVE_READY_FIELD_DESC = new org.apache.thrift.protocol.TField("slaveReady", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField COLLISION_FIELD_DESC = new org.apache.thrift.protocol.TField("collision", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField COLLISION_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("collisionAxis", org.apache.thrift.protocol.TType.BYTE, (short)18);
  private static final org.apache.thrift.protocol.TField EMC_STOP_SIGNAL_FIELD_DESC = new org.apache.thrift.protocol.TField("emcStopSignal", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField ROBOT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("robotState", org.apache.thrift.protocol.TType.BYTE, (short)20);
  private static final org.apache.thrift.protocol.TField ROBOT_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("robotError", org.apache.thrift.protocol.TType.I32, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RobotStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RobotStatusTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointExpectPosition; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointExpectVelocity; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointExpectAccelera; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointActualPosition; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointActualVelocity; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointActualAccelera; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointActualCurrent; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointTemperature; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> driverTemperature; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartExpectPosition; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartExpectVelocity; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartExpectAccelera; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartActualPosition; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartActualVelocity; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartActualAccelera; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> slaveReady; // required
  public boolean collision; // required
  public byte collisionAxis; // required
  public boolean emcStopSignal; // required
  public byte robotState; // required
  public int robotError; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOINT_EXPECT_POSITION((short)1, "jointExpectPosition"),
    JOINT_EXPECT_VELOCITY((short)2, "jointExpectVelocity"),
    JOINT_EXPECT_ACCELERA((short)3, "jointExpectAccelera"),
    JOINT_ACTUAL_POSITION((short)4, "jointActualPosition"),
    JOINT_ACTUAL_VELOCITY((short)5, "jointActualVelocity"),
    JOINT_ACTUAL_ACCELERA((short)6, "jointActualAccelera"),
    JOINT_ACTUAL_CURRENT((short)7, "jointActualCurrent"),
    JOINT_TEMPERATURE((short)8, "jointTemperature"),
    DRIVER_TEMPERATURE((short)9, "driverTemperature"),
    CART_EXPECT_POSITION((short)10, "cartExpectPosition"),
    CART_EXPECT_VELOCITY((short)11, "cartExpectVelocity"),
    CART_EXPECT_ACCELERA((short)12, "cartExpectAccelera"),
    CART_ACTUAL_POSITION((short)13, "cartActualPosition"),
    CART_ACTUAL_VELOCITY((short)14, "cartActualVelocity"),
    CART_ACTUAL_ACCELERA((short)15, "cartActualAccelera"),
    SLAVE_READY((short)16, "slaveReady"),
    COLLISION((short)17, "collision"),
    COLLISION_AXIS((short)18, "collisionAxis"),
    EMC_STOP_SIGNAL((short)19, "emcStopSignal"),
    ROBOT_STATE((short)20, "robotState"),
    ROBOT_ERROR((short)21, "robotError");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOINT_EXPECT_POSITION
          return JOINT_EXPECT_POSITION;
        case 2: // JOINT_EXPECT_VELOCITY
          return JOINT_EXPECT_VELOCITY;
        case 3: // JOINT_EXPECT_ACCELERA
          return JOINT_EXPECT_ACCELERA;
        case 4: // JOINT_ACTUAL_POSITION
          return JOINT_ACTUAL_POSITION;
        case 5: // JOINT_ACTUAL_VELOCITY
          return JOINT_ACTUAL_VELOCITY;
        case 6: // JOINT_ACTUAL_ACCELERA
          return JOINT_ACTUAL_ACCELERA;
        case 7: // JOINT_ACTUAL_CURRENT
          return JOINT_ACTUAL_CURRENT;
        case 8: // JOINT_TEMPERATURE
          return JOINT_TEMPERATURE;
        case 9: // DRIVER_TEMPERATURE
          return DRIVER_TEMPERATURE;
        case 10: // CART_EXPECT_POSITION
          return CART_EXPECT_POSITION;
        case 11: // CART_EXPECT_VELOCITY
          return CART_EXPECT_VELOCITY;
        case 12: // CART_EXPECT_ACCELERA
          return CART_EXPECT_ACCELERA;
        case 13: // CART_ACTUAL_POSITION
          return CART_ACTUAL_POSITION;
        case 14: // CART_ACTUAL_VELOCITY
          return CART_ACTUAL_VELOCITY;
        case 15: // CART_ACTUAL_ACCELERA
          return CART_ACTUAL_ACCELERA;
        case 16: // SLAVE_READY
          return SLAVE_READY;
        case 17: // COLLISION
          return COLLISION;
        case 18: // COLLISION_AXIS
          return COLLISION_AXIS;
        case 19: // EMC_STOP_SIGNAL
          return EMC_STOP_SIGNAL;
        case 20: // ROBOT_STATE
          return ROBOT_STATE;
        case 21: // ROBOT_ERROR
          return ROBOT_ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLLISION_ISSET_ID = 0;
  private static final int __COLLISIONAXIS_ISSET_ID = 1;
  private static final int __EMCSTOPSIGNAL_ISSET_ID = 2;
  private static final int __ROBOTSTATE_ISSET_ID = 3;
  private static final int __ROBOTERROR_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOINT_EXPECT_POSITION, new org.apache.thrift.meta_data.FieldMetaData("jointExpectPosition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.JOINT_EXPECT_VELOCITY, new org.apache.thrift.meta_data.FieldMetaData("jointExpectVelocity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.JOINT_EXPECT_ACCELERA, new org.apache.thrift.meta_data.FieldMetaData("jointExpectAccelera", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.JOINT_ACTUAL_POSITION, new org.apache.thrift.meta_data.FieldMetaData("jointActualPosition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.JOINT_ACTUAL_VELOCITY, new org.apache.thrift.meta_data.FieldMetaData("jointActualVelocity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.JOINT_ACTUAL_ACCELERA, new org.apache.thrift.meta_data.FieldMetaData("jointActualAccelera", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.JOINT_ACTUAL_CURRENT, new org.apache.thrift.meta_data.FieldMetaData("jointActualCurrent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.JOINT_TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("jointTemperature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.DRIVER_TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("driverTemperature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CART_EXPECT_POSITION, new org.apache.thrift.meta_data.FieldMetaData("cartExpectPosition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CART_EXPECT_VELOCITY, new org.apache.thrift.meta_data.FieldMetaData("cartExpectVelocity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CART_EXPECT_ACCELERA, new org.apache.thrift.meta_data.FieldMetaData("cartExpectAccelera", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CART_ACTUAL_POSITION, new org.apache.thrift.meta_data.FieldMetaData("cartActualPosition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CART_ACTUAL_VELOCITY, new org.apache.thrift.meta_data.FieldMetaData("cartActualVelocity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CART_ACTUAL_ACCELERA, new org.apache.thrift.meta_data.FieldMetaData("cartActualAccelera", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.SLAVE_READY, new org.apache.thrift.meta_data.FieldMetaData("slaveReady", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.COLLISION, new org.apache.thrift.meta_data.FieldMetaData("collision", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COLLISION_AXIS, new org.apache.thrift.meta_data.FieldMetaData("collisionAxis", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.EMC_STOP_SIGNAL, new org.apache.thrift.meta_data.FieldMetaData("emcStopSignal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ROBOT_STATE, new org.apache.thrift.meta_data.FieldMetaData("robotState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ROBOT_ERROR, new org.apache.thrift.meta_data.FieldMetaData("robotError", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RobotStatus.class, metaDataMap);
  }

  public RobotStatus() {
  }

  public RobotStatus(
    java.util.List<java.lang.Double> jointExpectPosition,
    java.util.List<java.lang.Double> jointExpectVelocity,
    java.util.List<java.lang.Double> jointExpectAccelera,
    java.util.List<java.lang.Double> jointActualPosition,
    java.util.List<java.lang.Double> jointActualVelocity,
    java.util.List<java.lang.Double> jointActualAccelera,
    java.util.List<java.lang.Double> jointActualCurrent,
    java.util.List<java.lang.Double> jointTemperature,
    java.util.List<java.lang.Double> driverTemperature,
    java.util.List<java.lang.Double> cartExpectPosition,
    java.util.List<java.lang.Double> cartExpectVelocity,
    java.util.List<java.lang.Double> cartExpectAccelera,
    java.util.List<java.lang.Double> cartActualPosition,
    java.util.List<java.lang.Double> cartActualVelocity,
    java.util.List<java.lang.Double> cartActualAccelera,
    java.util.List<java.lang.Boolean> slaveReady,
    boolean collision,
    byte collisionAxis,
    boolean emcStopSignal,
    byte robotState,
    int robotError)
  {
    this();
    this.jointExpectPosition = jointExpectPosition;
    this.jointExpectVelocity = jointExpectVelocity;
    this.jointExpectAccelera = jointExpectAccelera;
    this.jointActualPosition = jointActualPosition;
    this.jointActualVelocity = jointActualVelocity;
    this.jointActualAccelera = jointActualAccelera;
    this.jointActualCurrent = jointActualCurrent;
    this.jointTemperature = jointTemperature;
    this.driverTemperature = driverTemperature;
    this.cartExpectPosition = cartExpectPosition;
    this.cartExpectVelocity = cartExpectVelocity;
    this.cartExpectAccelera = cartExpectAccelera;
    this.cartActualPosition = cartActualPosition;
    this.cartActualVelocity = cartActualVelocity;
    this.cartActualAccelera = cartActualAccelera;
    this.slaveReady = slaveReady;
    this.collision = collision;
    setCollisionIsSet(true);
    this.collisionAxis = collisionAxis;
    setCollisionAxisIsSet(true);
    this.emcStopSignal = emcStopSignal;
    setEmcStopSignalIsSet(true);
    this.robotState = robotState;
    setRobotStateIsSet(true);
    this.robotError = robotError;
    setRobotErrorIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RobotStatus(RobotStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJointExpectPosition()) {
      java.util.List<java.lang.Double> __this__jointExpectPosition = new java.util.ArrayList<java.lang.Double>(other.jointExpectPosition);
      this.jointExpectPosition = __this__jointExpectPosition;
    }
    if (other.isSetJointExpectVelocity()) {
      java.util.List<java.lang.Double> __this__jointExpectVelocity = new java.util.ArrayList<java.lang.Double>(other.jointExpectVelocity);
      this.jointExpectVelocity = __this__jointExpectVelocity;
    }
    if (other.isSetJointExpectAccelera()) {
      java.util.List<java.lang.Double> __this__jointExpectAccelera = new java.util.ArrayList<java.lang.Double>(other.jointExpectAccelera);
      this.jointExpectAccelera = __this__jointExpectAccelera;
    }
    if (other.isSetJointActualPosition()) {
      java.util.List<java.lang.Double> __this__jointActualPosition = new java.util.ArrayList<java.lang.Double>(other.jointActualPosition);
      this.jointActualPosition = __this__jointActualPosition;
    }
    if (other.isSetJointActualVelocity()) {
      java.util.List<java.lang.Double> __this__jointActualVelocity = new java.util.ArrayList<java.lang.Double>(other.jointActualVelocity);
      this.jointActualVelocity = __this__jointActualVelocity;
    }
    if (other.isSetJointActualAccelera()) {
      java.util.List<java.lang.Double> __this__jointActualAccelera = new java.util.ArrayList<java.lang.Double>(other.jointActualAccelera);
      this.jointActualAccelera = __this__jointActualAccelera;
    }
    if (other.isSetJointActualCurrent()) {
      java.util.List<java.lang.Double> __this__jointActualCurrent = new java.util.ArrayList<java.lang.Double>(other.jointActualCurrent);
      this.jointActualCurrent = __this__jointActualCurrent;
    }
    if (other.isSetJointTemperature()) {
      java.util.List<java.lang.Double> __this__jointTemperature = new java.util.ArrayList<java.lang.Double>(other.jointTemperature);
      this.jointTemperature = __this__jointTemperature;
    }
    if (other.isSetDriverTemperature()) {
      java.util.List<java.lang.Double> __this__driverTemperature = new java.util.ArrayList<java.lang.Double>(other.driverTemperature);
      this.driverTemperature = __this__driverTemperature;
    }
    if (other.isSetCartExpectPosition()) {
      java.util.List<java.lang.Double> __this__cartExpectPosition = new java.util.ArrayList<java.lang.Double>(other.cartExpectPosition);
      this.cartExpectPosition = __this__cartExpectPosition;
    }
    if (other.isSetCartExpectVelocity()) {
      java.util.List<java.lang.Double> __this__cartExpectVelocity = new java.util.ArrayList<java.lang.Double>(other.cartExpectVelocity);
      this.cartExpectVelocity = __this__cartExpectVelocity;
    }
    if (other.isSetCartExpectAccelera()) {
      java.util.List<java.lang.Double> __this__cartExpectAccelera = new java.util.ArrayList<java.lang.Double>(other.cartExpectAccelera);
      this.cartExpectAccelera = __this__cartExpectAccelera;
    }
    if (other.isSetCartActualPosition()) {
      java.util.List<java.lang.Double> __this__cartActualPosition = new java.util.ArrayList<java.lang.Double>(other.cartActualPosition);
      this.cartActualPosition = __this__cartActualPosition;
    }
    if (other.isSetCartActualVelocity()) {
      java.util.List<java.lang.Double> __this__cartActualVelocity = new java.util.ArrayList<java.lang.Double>(other.cartActualVelocity);
      this.cartActualVelocity = __this__cartActualVelocity;
    }
    if (other.isSetCartActualAccelera()) {
      java.util.List<java.lang.Double> __this__cartActualAccelera = new java.util.ArrayList<java.lang.Double>(other.cartActualAccelera);
      this.cartActualAccelera = __this__cartActualAccelera;
    }
    if (other.isSetSlaveReady()) {
      java.util.List<java.lang.Boolean> __this__slaveReady = new java.util.ArrayList<java.lang.Boolean>(other.slaveReady);
      this.slaveReady = __this__slaveReady;
    }
    this.collision = other.collision;
    this.collisionAxis = other.collisionAxis;
    this.emcStopSignal = other.emcStopSignal;
    this.robotState = other.robotState;
    this.robotError = other.robotError;
  }

  public RobotStatus deepCopy() {
    return new RobotStatus(this);
  }

  @Override
  public void clear() {
    this.jointExpectPosition = null;
    this.jointExpectVelocity = null;
    this.jointExpectAccelera = null;
    this.jointActualPosition = null;
    this.jointActualVelocity = null;
    this.jointActualAccelera = null;
    this.jointActualCurrent = null;
    this.jointTemperature = null;
    this.driverTemperature = null;
    this.cartExpectPosition = null;
    this.cartExpectVelocity = null;
    this.cartExpectAccelera = null;
    this.cartActualPosition = null;
    this.cartActualVelocity = null;
    this.cartActualAccelera = null;
    this.slaveReady = null;
    setCollisionIsSet(false);
    this.collision = false;
    setCollisionAxisIsSet(false);
    this.collisionAxis = 0;
    setEmcStopSignalIsSet(false);
    this.emcStopSignal = false;
    setRobotStateIsSet(false);
    this.robotState = 0;
    setRobotErrorIsSet(false);
    this.robotError = 0;
  }

  public int getJointExpectPositionSize() {
    return (this.jointExpectPosition == null) ? 0 : this.jointExpectPosition.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getJointExpectPositionIterator() {
    return (this.jointExpectPosition == null) ? null : this.jointExpectPosition.iterator();
  }

  public void addToJointExpectPosition(double elem) {
    if (this.jointExpectPosition == null) {
      this.jointExpectPosition = new java.util.ArrayList<java.lang.Double>();
    }
    this.jointExpectPosition.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getJointExpectPosition() {
    return this.jointExpectPosition;
  }

  public RobotStatus setJointExpectPosition(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointExpectPosition) {
    this.jointExpectPosition = jointExpectPosition;
    return this;
  }

  public void unsetJointExpectPosition() {
    this.jointExpectPosition = null;
  }

  /** Returns true if field jointExpectPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetJointExpectPosition() {
    return this.jointExpectPosition != null;
  }

  public void setJointExpectPositionIsSet(boolean value) {
    if (!value) {
      this.jointExpectPosition = null;
    }
  }

  public int getJointExpectVelocitySize() {
    return (this.jointExpectVelocity == null) ? 0 : this.jointExpectVelocity.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getJointExpectVelocityIterator() {
    return (this.jointExpectVelocity == null) ? null : this.jointExpectVelocity.iterator();
  }

  public void addToJointExpectVelocity(double elem) {
    if (this.jointExpectVelocity == null) {
      this.jointExpectVelocity = new java.util.ArrayList<java.lang.Double>();
    }
    this.jointExpectVelocity.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getJointExpectVelocity() {
    return this.jointExpectVelocity;
  }

  public RobotStatus setJointExpectVelocity(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointExpectVelocity) {
    this.jointExpectVelocity = jointExpectVelocity;
    return this;
  }

  public void unsetJointExpectVelocity() {
    this.jointExpectVelocity = null;
  }

  /** Returns true if field jointExpectVelocity is set (has been assigned a value) and false otherwise */
  public boolean isSetJointExpectVelocity() {
    return this.jointExpectVelocity != null;
  }

  public void setJointExpectVelocityIsSet(boolean value) {
    if (!value) {
      this.jointExpectVelocity = null;
    }
  }

  public int getJointExpectAcceleraSize() {
    return (this.jointExpectAccelera == null) ? 0 : this.jointExpectAccelera.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getJointExpectAcceleraIterator() {
    return (this.jointExpectAccelera == null) ? null : this.jointExpectAccelera.iterator();
  }

  public void addToJointExpectAccelera(double elem) {
    if (this.jointExpectAccelera == null) {
      this.jointExpectAccelera = new java.util.ArrayList<java.lang.Double>();
    }
    this.jointExpectAccelera.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getJointExpectAccelera() {
    return this.jointExpectAccelera;
  }

  public RobotStatus setJointExpectAccelera(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointExpectAccelera) {
    this.jointExpectAccelera = jointExpectAccelera;
    return this;
  }

  public void unsetJointExpectAccelera() {
    this.jointExpectAccelera = null;
  }

  /** Returns true if field jointExpectAccelera is set (has been assigned a value) and false otherwise */
  public boolean isSetJointExpectAccelera() {
    return this.jointExpectAccelera != null;
  }

  public void setJointExpectAcceleraIsSet(boolean value) {
    if (!value) {
      this.jointExpectAccelera = null;
    }
  }

  public int getJointActualPositionSize() {
    return (this.jointActualPosition == null) ? 0 : this.jointActualPosition.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getJointActualPositionIterator() {
    return (this.jointActualPosition == null) ? null : this.jointActualPosition.iterator();
  }

  public void addToJointActualPosition(double elem) {
    if (this.jointActualPosition == null) {
      this.jointActualPosition = new java.util.ArrayList<java.lang.Double>();
    }
    this.jointActualPosition.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getJointActualPosition() {
    return this.jointActualPosition;
  }

  public RobotStatus setJointActualPosition(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointActualPosition) {
    this.jointActualPosition = jointActualPosition;
    return this;
  }

  public void unsetJointActualPosition() {
    this.jointActualPosition = null;
  }

  /** Returns true if field jointActualPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetJointActualPosition() {
    return this.jointActualPosition != null;
  }

  public void setJointActualPositionIsSet(boolean value) {
    if (!value) {
      this.jointActualPosition = null;
    }
  }

  public int getJointActualVelocitySize() {
    return (this.jointActualVelocity == null) ? 0 : this.jointActualVelocity.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getJointActualVelocityIterator() {
    return (this.jointActualVelocity == null) ? null : this.jointActualVelocity.iterator();
  }

  public void addToJointActualVelocity(double elem) {
    if (this.jointActualVelocity == null) {
      this.jointActualVelocity = new java.util.ArrayList<java.lang.Double>();
    }
    this.jointActualVelocity.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getJointActualVelocity() {
    return this.jointActualVelocity;
  }

  public RobotStatus setJointActualVelocity(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointActualVelocity) {
    this.jointActualVelocity = jointActualVelocity;
    return this;
  }

  public void unsetJointActualVelocity() {
    this.jointActualVelocity = null;
  }

  /** Returns true if field jointActualVelocity is set (has been assigned a value) and false otherwise */
  public boolean isSetJointActualVelocity() {
    return this.jointActualVelocity != null;
  }

  public void setJointActualVelocityIsSet(boolean value) {
    if (!value) {
      this.jointActualVelocity = null;
    }
  }

  public int getJointActualAcceleraSize() {
    return (this.jointActualAccelera == null) ? 0 : this.jointActualAccelera.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getJointActualAcceleraIterator() {
    return (this.jointActualAccelera == null) ? null : this.jointActualAccelera.iterator();
  }

  public void addToJointActualAccelera(double elem) {
    if (this.jointActualAccelera == null) {
      this.jointActualAccelera = new java.util.ArrayList<java.lang.Double>();
    }
    this.jointActualAccelera.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getJointActualAccelera() {
    return this.jointActualAccelera;
  }

  public RobotStatus setJointActualAccelera(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointActualAccelera) {
    this.jointActualAccelera = jointActualAccelera;
    return this;
  }

  public void unsetJointActualAccelera() {
    this.jointActualAccelera = null;
  }

  /** Returns true if field jointActualAccelera is set (has been assigned a value) and false otherwise */
  public boolean isSetJointActualAccelera() {
    return this.jointActualAccelera != null;
  }

  public void setJointActualAcceleraIsSet(boolean value) {
    if (!value) {
      this.jointActualAccelera = null;
    }
  }

  public int getJointActualCurrentSize() {
    return (this.jointActualCurrent == null) ? 0 : this.jointActualCurrent.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getJointActualCurrentIterator() {
    return (this.jointActualCurrent == null) ? null : this.jointActualCurrent.iterator();
  }

  public void addToJointActualCurrent(double elem) {
    if (this.jointActualCurrent == null) {
      this.jointActualCurrent = new java.util.ArrayList<java.lang.Double>();
    }
    this.jointActualCurrent.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getJointActualCurrent() {
    return this.jointActualCurrent;
  }

  public RobotStatus setJointActualCurrent(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointActualCurrent) {
    this.jointActualCurrent = jointActualCurrent;
    return this;
  }

  public void unsetJointActualCurrent() {
    this.jointActualCurrent = null;
  }

  /** Returns true if field jointActualCurrent is set (has been assigned a value) and false otherwise */
  public boolean isSetJointActualCurrent() {
    return this.jointActualCurrent != null;
  }

  public void setJointActualCurrentIsSet(boolean value) {
    if (!value) {
      this.jointActualCurrent = null;
    }
  }

  public int getJointTemperatureSize() {
    return (this.jointTemperature == null) ? 0 : this.jointTemperature.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getJointTemperatureIterator() {
    return (this.jointTemperature == null) ? null : this.jointTemperature.iterator();
  }

  public void addToJointTemperature(double elem) {
    if (this.jointTemperature == null) {
      this.jointTemperature = new java.util.ArrayList<java.lang.Double>();
    }
    this.jointTemperature.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getJointTemperature() {
    return this.jointTemperature;
  }

  public RobotStatus setJointTemperature(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> jointTemperature) {
    this.jointTemperature = jointTemperature;
    return this;
  }

  public void unsetJointTemperature() {
    this.jointTemperature = null;
  }

  /** Returns true if field jointTemperature is set (has been assigned a value) and false otherwise */
  public boolean isSetJointTemperature() {
    return this.jointTemperature != null;
  }

  public void setJointTemperatureIsSet(boolean value) {
    if (!value) {
      this.jointTemperature = null;
    }
  }

  public int getDriverTemperatureSize() {
    return (this.driverTemperature == null) ? 0 : this.driverTemperature.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getDriverTemperatureIterator() {
    return (this.driverTemperature == null) ? null : this.driverTemperature.iterator();
  }

  public void addToDriverTemperature(double elem) {
    if (this.driverTemperature == null) {
      this.driverTemperature = new java.util.ArrayList<java.lang.Double>();
    }
    this.driverTemperature.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getDriverTemperature() {
    return this.driverTemperature;
  }

  public RobotStatus setDriverTemperature(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> driverTemperature) {
    this.driverTemperature = driverTemperature;
    return this;
  }

  public void unsetDriverTemperature() {
    this.driverTemperature = null;
  }

  /** Returns true if field driverTemperature is set (has been assigned a value) and false otherwise */
  public boolean isSetDriverTemperature() {
    return this.driverTemperature != null;
  }

  public void setDriverTemperatureIsSet(boolean value) {
    if (!value) {
      this.driverTemperature = null;
    }
  }

  public int getCartExpectPositionSize() {
    return (this.cartExpectPosition == null) ? 0 : this.cartExpectPosition.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getCartExpectPositionIterator() {
    return (this.cartExpectPosition == null) ? null : this.cartExpectPosition.iterator();
  }

  public void addToCartExpectPosition(double elem) {
    if (this.cartExpectPosition == null) {
      this.cartExpectPosition = new java.util.ArrayList<java.lang.Double>();
    }
    this.cartExpectPosition.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getCartExpectPosition() {
    return this.cartExpectPosition;
  }

  public RobotStatus setCartExpectPosition(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartExpectPosition) {
    this.cartExpectPosition = cartExpectPosition;
    return this;
  }

  public void unsetCartExpectPosition() {
    this.cartExpectPosition = null;
  }

  /** Returns true if field cartExpectPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetCartExpectPosition() {
    return this.cartExpectPosition != null;
  }

  public void setCartExpectPositionIsSet(boolean value) {
    if (!value) {
      this.cartExpectPosition = null;
    }
  }

  public int getCartExpectVelocitySize() {
    return (this.cartExpectVelocity == null) ? 0 : this.cartExpectVelocity.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getCartExpectVelocityIterator() {
    return (this.cartExpectVelocity == null) ? null : this.cartExpectVelocity.iterator();
  }

  public void addToCartExpectVelocity(double elem) {
    if (this.cartExpectVelocity == null) {
      this.cartExpectVelocity = new java.util.ArrayList<java.lang.Double>();
    }
    this.cartExpectVelocity.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getCartExpectVelocity() {
    return this.cartExpectVelocity;
  }

  public RobotStatus setCartExpectVelocity(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartExpectVelocity) {
    this.cartExpectVelocity = cartExpectVelocity;
    return this;
  }

  public void unsetCartExpectVelocity() {
    this.cartExpectVelocity = null;
  }

  /** Returns true if field cartExpectVelocity is set (has been assigned a value) and false otherwise */
  public boolean isSetCartExpectVelocity() {
    return this.cartExpectVelocity != null;
  }

  public void setCartExpectVelocityIsSet(boolean value) {
    if (!value) {
      this.cartExpectVelocity = null;
    }
  }

  public int getCartExpectAcceleraSize() {
    return (this.cartExpectAccelera == null) ? 0 : this.cartExpectAccelera.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getCartExpectAcceleraIterator() {
    return (this.cartExpectAccelera == null) ? null : this.cartExpectAccelera.iterator();
  }

  public void addToCartExpectAccelera(double elem) {
    if (this.cartExpectAccelera == null) {
      this.cartExpectAccelera = new java.util.ArrayList<java.lang.Double>();
    }
    this.cartExpectAccelera.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getCartExpectAccelera() {
    return this.cartExpectAccelera;
  }

  public RobotStatus setCartExpectAccelera(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartExpectAccelera) {
    this.cartExpectAccelera = cartExpectAccelera;
    return this;
  }

  public void unsetCartExpectAccelera() {
    this.cartExpectAccelera = null;
  }

  /** Returns true if field cartExpectAccelera is set (has been assigned a value) and false otherwise */
  public boolean isSetCartExpectAccelera() {
    return this.cartExpectAccelera != null;
  }

  public void setCartExpectAcceleraIsSet(boolean value) {
    if (!value) {
      this.cartExpectAccelera = null;
    }
  }

  public int getCartActualPositionSize() {
    return (this.cartActualPosition == null) ? 0 : this.cartActualPosition.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getCartActualPositionIterator() {
    return (this.cartActualPosition == null) ? null : this.cartActualPosition.iterator();
  }

  public void addToCartActualPosition(double elem) {
    if (this.cartActualPosition == null) {
      this.cartActualPosition = new java.util.ArrayList<java.lang.Double>();
    }
    this.cartActualPosition.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getCartActualPosition() {
    return this.cartActualPosition;
  }

  public RobotStatus setCartActualPosition(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartActualPosition) {
    this.cartActualPosition = cartActualPosition;
    return this;
  }

  public void unsetCartActualPosition() {
    this.cartActualPosition = null;
  }

  /** Returns true if field cartActualPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetCartActualPosition() {
    return this.cartActualPosition != null;
  }

  public void setCartActualPositionIsSet(boolean value) {
    if (!value) {
      this.cartActualPosition = null;
    }
  }

  public int getCartActualVelocitySize() {
    return (this.cartActualVelocity == null) ? 0 : this.cartActualVelocity.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getCartActualVelocityIterator() {
    return (this.cartActualVelocity == null) ? null : this.cartActualVelocity.iterator();
  }

  public void addToCartActualVelocity(double elem) {
    if (this.cartActualVelocity == null) {
      this.cartActualVelocity = new java.util.ArrayList<java.lang.Double>();
    }
    this.cartActualVelocity.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getCartActualVelocity() {
    return this.cartActualVelocity;
  }

  public RobotStatus setCartActualVelocity(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartActualVelocity) {
    this.cartActualVelocity = cartActualVelocity;
    return this;
  }

  public void unsetCartActualVelocity() {
    this.cartActualVelocity = null;
  }

  /** Returns true if field cartActualVelocity is set (has been assigned a value) and false otherwise */
  public boolean isSetCartActualVelocity() {
    return this.cartActualVelocity != null;
  }

  public void setCartActualVelocityIsSet(boolean value) {
    if (!value) {
      this.cartActualVelocity = null;
    }
  }

  public int getCartActualAcceleraSize() {
    return (this.cartActualAccelera == null) ? 0 : this.cartActualAccelera.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getCartActualAcceleraIterator() {
    return (this.cartActualAccelera == null) ? null : this.cartActualAccelera.iterator();
  }

  public void addToCartActualAccelera(double elem) {
    if (this.cartActualAccelera == null) {
      this.cartActualAccelera = new java.util.ArrayList<java.lang.Double>();
    }
    this.cartActualAccelera.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getCartActualAccelera() {
    return this.cartActualAccelera;
  }

  public RobotStatus setCartActualAccelera(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> cartActualAccelera) {
    this.cartActualAccelera = cartActualAccelera;
    return this;
  }

  public void unsetCartActualAccelera() {
    this.cartActualAccelera = null;
  }

  /** Returns true if field cartActualAccelera is set (has been assigned a value) and false otherwise */
  public boolean isSetCartActualAccelera() {
    return this.cartActualAccelera != null;
  }

  public void setCartActualAcceleraIsSet(boolean value) {
    if (!value) {
      this.cartActualAccelera = null;
    }
  }

  public int getSlaveReadySize() {
    return (this.slaveReady == null) ? 0 : this.slaveReady.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getSlaveReadyIterator() {
    return (this.slaveReady == null) ? null : this.slaveReady.iterator();
  }

  public void addToSlaveReady(boolean elem) {
    if (this.slaveReady == null) {
      this.slaveReady = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.slaveReady.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getSlaveReady() {
    return this.slaveReady;
  }

  public RobotStatus setSlaveReady(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> slaveReady) {
    this.slaveReady = slaveReady;
    return this;
  }

  public void unsetSlaveReady() {
    this.slaveReady = null;
  }

  /** Returns true if field slaveReady is set (has been assigned a value) and false otherwise */
  public boolean isSetSlaveReady() {
    return this.slaveReady != null;
  }

  public void setSlaveReadyIsSet(boolean value) {
    if (!value) {
      this.slaveReady = null;
    }
  }

  public boolean isCollision() {
    return this.collision;
  }

  public RobotStatus setCollision(boolean collision) {
    this.collision = collision;
    setCollisionIsSet(true);
    return this;
  }

  public void unsetCollision() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLISION_ISSET_ID);
  }

  /** Returns true if field collision is set (has been assigned a value) and false otherwise */
  public boolean isSetCollision() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLISION_ISSET_ID);
  }

  public void setCollisionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLISION_ISSET_ID, value);
  }

  public byte getCollisionAxis() {
    return this.collisionAxis;
  }

  public RobotStatus setCollisionAxis(byte collisionAxis) {
    this.collisionAxis = collisionAxis;
    setCollisionAxisIsSet(true);
    return this;
  }

  public void unsetCollisionAxis() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLISIONAXIS_ISSET_ID);
  }

  /** Returns true if field collisionAxis is set (has been assigned a value) and false otherwise */
  public boolean isSetCollisionAxis() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLISIONAXIS_ISSET_ID);
  }

  public void setCollisionAxisIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLISIONAXIS_ISSET_ID, value);
  }

  public boolean isEmcStopSignal() {
    return this.emcStopSignal;
  }

  public RobotStatus setEmcStopSignal(boolean emcStopSignal) {
    this.emcStopSignal = emcStopSignal;
    setEmcStopSignalIsSet(true);
    return this;
  }

  public void unsetEmcStopSignal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMCSTOPSIGNAL_ISSET_ID);
  }

  /** Returns true if field emcStopSignal is set (has been assigned a value) and false otherwise */
  public boolean isSetEmcStopSignal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMCSTOPSIGNAL_ISSET_ID);
  }

  public void setEmcStopSignalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMCSTOPSIGNAL_ISSET_ID, value);
  }

  public byte getRobotState() {
    return this.robotState;
  }

  public RobotStatus setRobotState(byte robotState) {
    this.robotState = robotState;
    setRobotStateIsSet(true);
    return this;
  }

  public void unsetRobotState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROBOTSTATE_ISSET_ID);
  }

  /** Returns true if field robotState is set (has been assigned a value) and false otherwise */
  public boolean isSetRobotState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROBOTSTATE_ISSET_ID);
  }

  public void setRobotStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROBOTSTATE_ISSET_ID, value);
  }

  public int getRobotError() {
    return this.robotError;
  }

  public RobotStatus setRobotError(int robotError) {
    this.robotError = robotError;
    setRobotErrorIsSet(true);
    return this;
  }

  public void unsetRobotError() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROBOTERROR_ISSET_ID);
  }

  /** Returns true if field robotError is set (has been assigned a value) and false otherwise */
  public boolean isSetRobotError() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROBOTERROR_ISSET_ID);
  }

  public void setRobotErrorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROBOTERROR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case JOINT_EXPECT_POSITION:
      if (value == null) {
        unsetJointExpectPosition();
      } else {
        setJointExpectPosition((java.util.List<java.lang.Double>)value);
      }
      break;

    case JOINT_EXPECT_VELOCITY:
      if (value == null) {
        unsetJointExpectVelocity();
      } else {
        setJointExpectVelocity((java.util.List<java.lang.Double>)value);
      }
      break;

    case JOINT_EXPECT_ACCELERA:
      if (value == null) {
        unsetJointExpectAccelera();
      } else {
        setJointExpectAccelera((java.util.List<java.lang.Double>)value);
      }
      break;

    case JOINT_ACTUAL_POSITION:
      if (value == null) {
        unsetJointActualPosition();
      } else {
        setJointActualPosition((java.util.List<java.lang.Double>)value);
      }
      break;

    case JOINT_ACTUAL_VELOCITY:
      if (value == null) {
        unsetJointActualVelocity();
      } else {
        setJointActualVelocity((java.util.List<java.lang.Double>)value);
      }
      break;

    case JOINT_ACTUAL_ACCELERA:
      if (value == null) {
        unsetJointActualAccelera();
      } else {
        setJointActualAccelera((java.util.List<java.lang.Double>)value);
      }
      break;

    case JOINT_ACTUAL_CURRENT:
      if (value == null) {
        unsetJointActualCurrent();
      } else {
        setJointActualCurrent((java.util.List<java.lang.Double>)value);
      }
      break;

    case JOINT_TEMPERATURE:
      if (value == null) {
        unsetJointTemperature();
      } else {
        setJointTemperature((java.util.List<java.lang.Double>)value);
      }
      break;

    case DRIVER_TEMPERATURE:
      if (value == null) {
        unsetDriverTemperature();
      } else {
        setDriverTemperature((java.util.List<java.lang.Double>)value);
      }
      break;

    case CART_EXPECT_POSITION:
      if (value == null) {
        unsetCartExpectPosition();
      } else {
        setCartExpectPosition((java.util.List<java.lang.Double>)value);
      }
      break;

    case CART_EXPECT_VELOCITY:
      if (value == null) {
        unsetCartExpectVelocity();
      } else {
        setCartExpectVelocity((java.util.List<java.lang.Double>)value);
      }
      break;

    case CART_EXPECT_ACCELERA:
      if (value == null) {
        unsetCartExpectAccelera();
      } else {
        setCartExpectAccelera((java.util.List<java.lang.Double>)value);
      }
      break;

    case CART_ACTUAL_POSITION:
      if (value == null) {
        unsetCartActualPosition();
      } else {
        setCartActualPosition((java.util.List<java.lang.Double>)value);
      }
      break;

    case CART_ACTUAL_VELOCITY:
      if (value == null) {
        unsetCartActualVelocity();
      } else {
        setCartActualVelocity((java.util.List<java.lang.Double>)value);
      }
      break;

    case CART_ACTUAL_ACCELERA:
      if (value == null) {
        unsetCartActualAccelera();
      } else {
        setCartActualAccelera((java.util.List<java.lang.Double>)value);
      }
      break;

    case SLAVE_READY:
      if (value == null) {
        unsetSlaveReady();
      } else {
        setSlaveReady((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case COLLISION:
      if (value == null) {
        unsetCollision();
      } else {
        setCollision((java.lang.Boolean)value);
      }
      break;

    case COLLISION_AXIS:
      if (value == null) {
        unsetCollisionAxis();
      } else {
        setCollisionAxis((java.lang.Byte)value);
      }
      break;

    case EMC_STOP_SIGNAL:
      if (value == null) {
        unsetEmcStopSignal();
      } else {
        setEmcStopSignal((java.lang.Boolean)value);
      }
      break;

    case ROBOT_STATE:
      if (value == null) {
        unsetRobotState();
      } else {
        setRobotState((java.lang.Byte)value);
      }
      break;

    case ROBOT_ERROR:
      if (value == null) {
        unsetRobotError();
      } else {
        setRobotError((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOINT_EXPECT_POSITION:
      return getJointExpectPosition();

    case JOINT_EXPECT_VELOCITY:
      return getJointExpectVelocity();

    case JOINT_EXPECT_ACCELERA:
      return getJointExpectAccelera();

    case JOINT_ACTUAL_POSITION:
      return getJointActualPosition();

    case JOINT_ACTUAL_VELOCITY:
      return getJointActualVelocity();

    case JOINT_ACTUAL_ACCELERA:
      return getJointActualAccelera();

    case JOINT_ACTUAL_CURRENT:
      return getJointActualCurrent();

    case JOINT_TEMPERATURE:
      return getJointTemperature();

    case DRIVER_TEMPERATURE:
      return getDriverTemperature();

    case CART_EXPECT_POSITION:
      return getCartExpectPosition();

    case CART_EXPECT_VELOCITY:
      return getCartExpectVelocity();

    case CART_EXPECT_ACCELERA:
      return getCartExpectAccelera();

    case CART_ACTUAL_POSITION:
      return getCartActualPosition();

    case CART_ACTUAL_VELOCITY:
      return getCartActualVelocity();

    case CART_ACTUAL_ACCELERA:
      return getCartActualAccelera();

    case SLAVE_READY:
      return getSlaveReady();

    case COLLISION:
      return isCollision();

    case COLLISION_AXIS:
      return getCollisionAxis();

    case EMC_STOP_SIGNAL:
      return isEmcStopSignal();

    case ROBOT_STATE:
      return getRobotState();

    case ROBOT_ERROR:
      return getRobotError();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOINT_EXPECT_POSITION:
      return isSetJointExpectPosition();
    case JOINT_EXPECT_VELOCITY:
      return isSetJointExpectVelocity();
    case JOINT_EXPECT_ACCELERA:
      return isSetJointExpectAccelera();
    case JOINT_ACTUAL_POSITION:
      return isSetJointActualPosition();
    case JOINT_ACTUAL_VELOCITY:
      return isSetJointActualVelocity();
    case JOINT_ACTUAL_ACCELERA:
      return isSetJointActualAccelera();
    case JOINT_ACTUAL_CURRENT:
      return isSetJointActualCurrent();
    case JOINT_TEMPERATURE:
      return isSetJointTemperature();
    case DRIVER_TEMPERATURE:
      return isSetDriverTemperature();
    case CART_EXPECT_POSITION:
      return isSetCartExpectPosition();
    case CART_EXPECT_VELOCITY:
      return isSetCartExpectVelocity();
    case CART_EXPECT_ACCELERA:
      return isSetCartExpectAccelera();
    case CART_ACTUAL_POSITION:
      return isSetCartActualPosition();
    case CART_ACTUAL_VELOCITY:
      return isSetCartActualVelocity();
    case CART_ACTUAL_ACCELERA:
      return isSetCartActualAccelera();
    case SLAVE_READY:
      return isSetSlaveReady();
    case COLLISION:
      return isSetCollision();
    case COLLISION_AXIS:
      return isSetCollisionAxis();
    case EMC_STOP_SIGNAL:
      return isSetEmcStopSignal();
    case ROBOT_STATE:
      return isSetRobotState();
    case ROBOT_ERROR:
      return isSetRobotError();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RobotStatus)
      return this.equals((RobotStatus)that);
    return false;
  }

  public boolean equals(RobotStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_jointExpectPosition = true && this.isSetJointExpectPosition();
    boolean that_present_jointExpectPosition = true && that.isSetJointExpectPosition();
    if (this_present_jointExpectPosition || that_present_jointExpectPosition) {
      if (!(this_present_jointExpectPosition && that_present_jointExpectPosition))
        return false;
      if (!this.jointExpectPosition.equals(that.jointExpectPosition))
        return false;
    }

    boolean this_present_jointExpectVelocity = true && this.isSetJointExpectVelocity();
    boolean that_present_jointExpectVelocity = true && that.isSetJointExpectVelocity();
    if (this_present_jointExpectVelocity || that_present_jointExpectVelocity) {
      if (!(this_present_jointExpectVelocity && that_present_jointExpectVelocity))
        return false;
      if (!this.jointExpectVelocity.equals(that.jointExpectVelocity))
        return false;
    }

    boolean this_present_jointExpectAccelera = true && this.isSetJointExpectAccelera();
    boolean that_present_jointExpectAccelera = true && that.isSetJointExpectAccelera();
    if (this_present_jointExpectAccelera || that_present_jointExpectAccelera) {
      if (!(this_present_jointExpectAccelera && that_present_jointExpectAccelera))
        return false;
      if (!this.jointExpectAccelera.equals(that.jointExpectAccelera))
        return false;
    }

    boolean this_present_jointActualPosition = true && this.isSetJointActualPosition();
    boolean that_present_jointActualPosition = true && that.isSetJointActualPosition();
    if (this_present_jointActualPosition || that_present_jointActualPosition) {
      if (!(this_present_jointActualPosition && that_present_jointActualPosition))
        return false;
      if (!this.jointActualPosition.equals(that.jointActualPosition))
        return false;
    }

    boolean this_present_jointActualVelocity = true && this.isSetJointActualVelocity();
    boolean that_present_jointActualVelocity = true && that.isSetJointActualVelocity();
    if (this_present_jointActualVelocity || that_present_jointActualVelocity) {
      if (!(this_present_jointActualVelocity && that_present_jointActualVelocity))
        return false;
      if (!this.jointActualVelocity.equals(that.jointActualVelocity))
        return false;
    }

    boolean this_present_jointActualAccelera = true && this.isSetJointActualAccelera();
    boolean that_present_jointActualAccelera = true && that.isSetJointActualAccelera();
    if (this_present_jointActualAccelera || that_present_jointActualAccelera) {
      if (!(this_present_jointActualAccelera && that_present_jointActualAccelera))
        return false;
      if (!this.jointActualAccelera.equals(that.jointActualAccelera))
        return false;
    }

    boolean this_present_jointActualCurrent = true && this.isSetJointActualCurrent();
    boolean that_present_jointActualCurrent = true && that.isSetJointActualCurrent();
    if (this_present_jointActualCurrent || that_present_jointActualCurrent) {
      if (!(this_present_jointActualCurrent && that_present_jointActualCurrent))
        return false;
      if (!this.jointActualCurrent.equals(that.jointActualCurrent))
        return false;
    }

    boolean this_present_jointTemperature = true && this.isSetJointTemperature();
    boolean that_present_jointTemperature = true && that.isSetJointTemperature();
    if (this_present_jointTemperature || that_present_jointTemperature) {
      if (!(this_present_jointTemperature && that_present_jointTemperature))
        return false;
      if (!this.jointTemperature.equals(that.jointTemperature))
        return false;
    }

    boolean this_present_driverTemperature = true && this.isSetDriverTemperature();
    boolean that_present_driverTemperature = true && that.isSetDriverTemperature();
    if (this_present_driverTemperature || that_present_driverTemperature) {
      if (!(this_present_driverTemperature && that_present_driverTemperature))
        return false;
      if (!this.driverTemperature.equals(that.driverTemperature))
        return false;
    }

    boolean this_present_cartExpectPosition = true && this.isSetCartExpectPosition();
    boolean that_present_cartExpectPosition = true && that.isSetCartExpectPosition();
    if (this_present_cartExpectPosition || that_present_cartExpectPosition) {
      if (!(this_present_cartExpectPosition && that_present_cartExpectPosition))
        return false;
      if (!this.cartExpectPosition.equals(that.cartExpectPosition))
        return false;
    }

    boolean this_present_cartExpectVelocity = true && this.isSetCartExpectVelocity();
    boolean that_present_cartExpectVelocity = true && that.isSetCartExpectVelocity();
    if (this_present_cartExpectVelocity || that_present_cartExpectVelocity) {
      if (!(this_present_cartExpectVelocity && that_present_cartExpectVelocity))
        return false;
      if (!this.cartExpectVelocity.equals(that.cartExpectVelocity))
        return false;
    }

    boolean this_present_cartExpectAccelera = true && this.isSetCartExpectAccelera();
    boolean that_present_cartExpectAccelera = true && that.isSetCartExpectAccelera();
    if (this_present_cartExpectAccelera || that_present_cartExpectAccelera) {
      if (!(this_present_cartExpectAccelera && that_present_cartExpectAccelera))
        return false;
      if (!this.cartExpectAccelera.equals(that.cartExpectAccelera))
        return false;
    }

    boolean this_present_cartActualPosition = true && this.isSetCartActualPosition();
    boolean that_present_cartActualPosition = true && that.isSetCartActualPosition();
    if (this_present_cartActualPosition || that_present_cartActualPosition) {
      if (!(this_present_cartActualPosition && that_present_cartActualPosition))
        return false;
      if (!this.cartActualPosition.equals(that.cartActualPosition))
        return false;
    }

    boolean this_present_cartActualVelocity = true && this.isSetCartActualVelocity();
    boolean that_present_cartActualVelocity = true && that.isSetCartActualVelocity();
    if (this_present_cartActualVelocity || that_present_cartActualVelocity) {
      if (!(this_present_cartActualVelocity && that_present_cartActualVelocity))
        return false;
      if (!this.cartActualVelocity.equals(that.cartActualVelocity))
        return false;
    }

    boolean this_present_cartActualAccelera = true && this.isSetCartActualAccelera();
    boolean that_present_cartActualAccelera = true && that.isSetCartActualAccelera();
    if (this_present_cartActualAccelera || that_present_cartActualAccelera) {
      if (!(this_present_cartActualAccelera && that_present_cartActualAccelera))
        return false;
      if (!this.cartActualAccelera.equals(that.cartActualAccelera))
        return false;
    }

    boolean this_present_slaveReady = true && this.isSetSlaveReady();
    boolean that_present_slaveReady = true && that.isSetSlaveReady();
    if (this_present_slaveReady || that_present_slaveReady) {
      if (!(this_present_slaveReady && that_present_slaveReady))
        return false;
      if (!this.slaveReady.equals(that.slaveReady))
        return false;
    }

    boolean this_present_collision = true;
    boolean that_present_collision = true;
    if (this_present_collision || that_present_collision) {
      if (!(this_present_collision && that_present_collision))
        return false;
      if (this.collision != that.collision)
        return false;
    }

    boolean this_present_collisionAxis = true;
    boolean that_present_collisionAxis = true;
    if (this_present_collisionAxis || that_present_collisionAxis) {
      if (!(this_present_collisionAxis && that_present_collisionAxis))
        return false;
      if (this.collisionAxis != that.collisionAxis)
        return false;
    }

    boolean this_present_emcStopSignal = true;
    boolean that_present_emcStopSignal = true;
    if (this_present_emcStopSignal || that_present_emcStopSignal) {
      if (!(this_present_emcStopSignal && that_present_emcStopSignal))
        return false;
      if (this.emcStopSignal != that.emcStopSignal)
        return false;
    }

    boolean this_present_robotState = true;
    boolean that_present_robotState = true;
    if (this_present_robotState || that_present_robotState) {
      if (!(this_present_robotState && that_present_robotState))
        return false;
      if (this.robotState != that.robotState)
        return false;
    }

    boolean this_present_robotError = true;
    boolean that_present_robotError = true;
    if (this_present_robotError || that_present_robotError) {
      if (!(this_present_robotError && that_present_robotError))
        return false;
      if (this.robotError != that.robotError)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJointExpectPosition()) ? 131071 : 524287);
    if (isSetJointExpectPosition())
      hashCode = hashCode * 8191 + jointExpectPosition.hashCode();

    hashCode = hashCode * 8191 + ((isSetJointExpectVelocity()) ? 131071 : 524287);
    if (isSetJointExpectVelocity())
      hashCode = hashCode * 8191 + jointExpectVelocity.hashCode();

    hashCode = hashCode * 8191 + ((isSetJointExpectAccelera()) ? 131071 : 524287);
    if (isSetJointExpectAccelera())
      hashCode = hashCode * 8191 + jointExpectAccelera.hashCode();

    hashCode = hashCode * 8191 + ((isSetJointActualPosition()) ? 131071 : 524287);
    if (isSetJointActualPosition())
      hashCode = hashCode * 8191 + jointActualPosition.hashCode();

    hashCode = hashCode * 8191 + ((isSetJointActualVelocity()) ? 131071 : 524287);
    if (isSetJointActualVelocity())
      hashCode = hashCode * 8191 + jointActualVelocity.hashCode();

    hashCode = hashCode * 8191 + ((isSetJointActualAccelera()) ? 131071 : 524287);
    if (isSetJointActualAccelera())
      hashCode = hashCode * 8191 + jointActualAccelera.hashCode();

    hashCode = hashCode * 8191 + ((isSetJointActualCurrent()) ? 131071 : 524287);
    if (isSetJointActualCurrent())
      hashCode = hashCode * 8191 + jointActualCurrent.hashCode();

    hashCode = hashCode * 8191 + ((isSetJointTemperature()) ? 131071 : 524287);
    if (isSetJointTemperature())
      hashCode = hashCode * 8191 + jointTemperature.hashCode();

    hashCode = hashCode * 8191 + ((isSetDriverTemperature()) ? 131071 : 524287);
    if (isSetDriverTemperature())
      hashCode = hashCode * 8191 + driverTemperature.hashCode();

    hashCode = hashCode * 8191 + ((isSetCartExpectPosition()) ? 131071 : 524287);
    if (isSetCartExpectPosition())
      hashCode = hashCode * 8191 + cartExpectPosition.hashCode();

    hashCode = hashCode * 8191 + ((isSetCartExpectVelocity()) ? 131071 : 524287);
    if (isSetCartExpectVelocity())
      hashCode = hashCode * 8191 + cartExpectVelocity.hashCode();

    hashCode = hashCode * 8191 + ((isSetCartExpectAccelera()) ? 131071 : 524287);
    if (isSetCartExpectAccelera())
      hashCode = hashCode * 8191 + cartExpectAccelera.hashCode();

    hashCode = hashCode * 8191 + ((isSetCartActualPosition()) ? 131071 : 524287);
    if (isSetCartActualPosition())
      hashCode = hashCode * 8191 + cartActualPosition.hashCode();

    hashCode = hashCode * 8191 + ((isSetCartActualVelocity()) ? 131071 : 524287);
    if (isSetCartActualVelocity())
      hashCode = hashCode * 8191 + cartActualVelocity.hashCode();

    hashCode = hashCode * 8191 + ((isSetCartActualAccelera()) ? 131071 : 524287);
    if (isSetCartActualAccelera())
      hashCode = hashCode * 8191 + cartActualAccelera.hashCode();

    hashCode = hashCode * 8191 + ((isSetSlaveReady()) ? 131071 : 524287);
    if (isSetSlaveReady())
      hashCode = hashCode * 8191 + slaveReady.hashCode();

    hashCode = hashCode * 8191 + ((collision) ? 131071 : 524287);

    hashCode = hashCode * 8191 + (int) (collisionAxis);

    hashCode = hashCode * 8191 + ((emcStopSignal) ? 131071 : 524287);

    hashCode = hashCode * 8191 + (int) (robotState);

    hashCode = hashCode * 8191 + robotError;

    return hashCode;
  }

  @Override
  public int compareTo(RobotStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetJointExpectPosition()).compareTo(other.isSetJointExpectPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointExpectPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointExpectPosition, other.jointExpectPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJointExpectVelocity()).compareTo(other.isSetJointExpectVelocity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointExpectVelocity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointExpectVelocity, other.jointExpectVelocity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJointExpectAccelera()).compareTo(other.isSetJointExpectAccelera());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointExpectAccelera()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointExpectAccelera, other.jointExpectAccelera);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJointActualPosition()).compareTo(other.isSetJointActualPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointActualPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointActualPosition, other.jointActualPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJointActualVelocity()).compareTo(other.isSetJointActualVelocity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointActualVelocity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointActualVelocity, other.jointActualVelocity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJointActualAccelera()).compareTo(other.isSetJointActualAccelera());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointActualAccelera()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointActualAccelera, other.jointActualAccelera);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJointActualCurrent()).compareTo(other.isSetJointActualCurrent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointActualCurrent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointActualCurrent, other.jointActualCurrent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJointTemperature()).compareTo(other.isSetJointTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointTemperature, other.jointTemperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDriverTemperature()).compareTo(other.isSetDriverTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriverTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driverTemperature, other.driverTemperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCartExpectPosition()).compareTo(other.isSetCartExpectPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartExpectPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartExpectPosition, other.cartExpectPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCartExpectVelocity()).compareTo(other.isSetCartExpectVelocity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartExpectVelocity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartExpectVelocity, other.cartExpectVelocity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCartExpectAccelera()).compareTo(other.isSetCartExpectAccelera());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartExpectAccelera()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartExpectAccelera, other.cartExpectAccelera);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCartActualPosition()).compareTo(other.isSetCartActualPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartActualPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartActualPosition, other.cartActualPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCartActualVelocity()).compareTo(other.isSetCartActualVelocity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartActualVelocity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartActualVelocity, other.cartActualVelocity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCartActualAccelera()).compareTo(other.isSetCartActualAccelera());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartActualAccelera()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartActualAccelera, other.cartActualAccelera);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlaveReady()).compareTo(other.isSetSlaveReady());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlaveReady()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slaveReady, other.slaveReady);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCollision()).compareTo(other.isSetCollision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collision, other.collision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCollisionAxis()).compareTo(other.isSetCollisionAxis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollisionAxis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collisionAxis, other.collisionAxis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmcStopSignal()).compareTo(other.isSetEmcStopSignal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmcStopSignal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emcStopSignal, other.emcStopSignal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRobotState()).compareTo(other.isSetRobotState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRobotState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robotState, other.robotState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRobotError()).compareTo(other.isSetRobotError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRobotError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robotError, other.robotError);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RobotStatus(");
    boolean first = true;

    sb.append("jointExpectPosition:");
    if (this.jointExpectPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.jointExpectPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jointExpectVelocity:");
    if (this.jointExpectVelocity == null) {
      sb.append("null");
    } else {
      sb.append(this.jointExpectVelocity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jointExpectAccelera:");
    if (this.jointExpectAccelera == null) {
      sb.append("null");
    } else {
      sb.append(this.jointExpectAccelera);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jointActualPosition:");
    if (this.jointActualPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.jointActualPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jointActualVelocity:");
    if (this.jointActualVelocity == null) {
      sb.append("null");
    } else {
      sb.append(this.jointActualVelocity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jointActualAccelera:");
    if (this.jointActualAccelera == null) {
      sb.append("null");
    } else {
      sb.append(this.jointActualAccelera);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jointActualCurrent:");
    if (this.jointActualCurrent == null) {
      sb.append("null");
    } else {
      sb.append(this.jointActualCurrent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jointTemperature:");
    if (this.jointTemperature == null) {
      sb.append("null");
    } else {
      sb.append(this.jointTemperature);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("driverTemperature:");
    if (this.driverTemperature == null) {
      sb.append("null");
    } else {
      sb.append(this.driverTemperature);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartExpectPosition:");
    if (this.cartExpectPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.cartExpectPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartExpectVelocity:");
    if (this.cartExpectVelocity == null) {
      sb.append("null");
    } else {
      sb.append(this.cartExpectVelocity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartExpectAccelera:");
    if (this.cartExpectAccelera == null) {
      sb.append("null");
    } else {
      sb.append(this.cartExpectAccelera);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartActualPosition:");
    if (this.cartActualPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.cartActualPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartActualVelocity:");
    if (this.cartActualVelocity == null) {
      sb.append("null");
    } else {
      sb.append(this.cartActualVelocity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartActualAccelera:");
    if (this.cartActualAccelera == null) {
      sb.append("null");
    } else {
      sb.append(this.cartActualAccelera);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("slaveReady:");
    if (this.slaveReady == null) {
      sb.append("null");
    } else {
      sb.append(this.slaveReady);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collision:");
    sb.append(this.collision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collisionAxis:");
    sb.append(this.collisionAxis);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emcStopSignal:");
    sb.append(this.emcStopSignal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("robotState:");
    sb.append(this.robotState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("robotError:");
    sb.append(this.robotError);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (jointExpectPosition == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jointExpectPosition' was not present! Struct: " + toString());
    }
    if (jointExpectVelocity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jointExpectVelocity' was not present! Struct: " + toString());
    }
    if (jointExpectAccelera == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jointExpectAccelera' was not present! Struct: " + toString());
    }
    if (jointActualPosition == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jointActualPosition' was not present! Struct: " + toString());
    }
    if (jointActualVelocity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jointActualVelocity' was not present! Struct: " + toString());
    }
    if (jointActualAccelera == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jointActualAccelera' was not present! Struct: " + toString());
    }
    if (jointActualCurrent == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jointActualCurrent' was not present! Struct: " + toString());
    }
    if (jointTemperature == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jointTemperature' was not present! Struct: " + toString());
    }
    if (driverTemperature == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'driverTemperature' was not present! Struct: " + toString());
    }
    if (cartExpectPosition == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cartExpectPosition' was not present! Struct: " + toString());
    }
    if (cartExpectVelocity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cartExpectVelocity' was not present! Struct: " + toString());
    }
    if (cartExpectAccelera == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cartExpectAccelera' was not present! Struct: " + toString());
    }
    if (cartActualPosition == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cartActualPosition' was not present! Struct: " + toString());
    }
    if (cartActualVelocity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cartActualVelocity' was not present! Struct: " + toString());
    }
    if (cartActualAccelera == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cartActualAccelera' was not present! Struct: " + toString());
    }
    if (slaveReady == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'slaveReady' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'collision' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'collisionAxis' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'emcStopSignal' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'robotState' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'robotError' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RobotStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RobotStatusStandardScheme getScheme() {
      return new RobotStatusStandardScheme();
    }
  }

  private static class RobotStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<RobotStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RobotStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOINT_EXPECT_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.jointExpectPosition = new java.util.ArrayList<java.lang.Double>(_list0.size);
                double _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readDouble();
                  struct.jointExpectPosition.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setJointExpectPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOINT_EXPECT_VELOCITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.jointExpectVelocity = new java.util.ArrayList<java.lang.Double>(_list3.size);
                double _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readDouble();
                  struct.jointExpectVelocity.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setJointExpectVelocityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOINT_EXPECT_ACCELERA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.jointExpectAccelera = new java.util.ArrayList<java.lang.Double>(_list6.size);
                double _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readDouble();
                  struct.jointExpectAccelera.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setJointExpectAcceleraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOINT_ACTUAL_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.jointActualPosition = new java.util.ArrayList<java.lang.Double>(_list9.size);
                double _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readDouble();
                  struct.jointActualPosition.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setJointActualPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JOINT_ACTUAL_VELOCITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.jointActualVelocity = new java.util.ArrayList<java.lang.Double>(_list12.size);
                double _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readDouble();
                  struct.jointActualVelocity.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setJointActualVelocityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JOINT_ACTUAL_ACCELERA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.jointActualAccelera = new java.util.ArrayList<java.lang.Double>(_list15.size);
                double _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readDouble();
                  struct.jointActualAccelera.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setJointActualAcceleraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JOINT_ACTUAL_CURRENT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.jointActualCurrent = new java.util.ArrayList<java.lang.Double>(_list18.size);
                double _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = iprot.readDouble();
                  struct.jointActualCurrent.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setJointActualCurrentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JOINT_TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.jointTemperature = new java.util.ArrayList<java.lang.Double>(_list21.size);
                double _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = iprot.readDouble();
                  struct.jointTemperature.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setJointTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DRIVER_TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.driverTemperature = new java.util.ArrayList<java.lang.Double>(_list24.size);
                double _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readDouble();
                  struct.driverTemperature.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setDriverTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CART_EXPECT_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.cartExpectPosition = new java.util.ArrayList<java.lang.Double>(_list27.size);
                double _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = iprot.readDouble();
                  struct.cartExpectPosition.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setCartExpectPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CART_EXPECT_VELOCITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.cartExpectVelocity = new java.util.ArrayList<java.lang.Double>(_list30.size);
                double _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = iprot.readDouble();
                  struct.cartExpectVelocity.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setCartExpectVelocityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CART_EXPECT_ACCELERA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.cartExpectAccelera = new java.util.ArrayList<java.lang.Double>(_list33.size);
                double _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = iprot.readDouble();
                  struct.cartExpectAccelera.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setCartExpectAcceleraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CART_ACTUAL_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.cartActualPosition = new java.util.ArrayList<java.lang.Double>(_list36.size);
                double _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = iprot.readDouble();
                  struct.cartActualPosition.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setCartActualPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CART_ACTUAL_VELOCITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.cartActualVelocity = new java.util.ArrayList<java.lang.Double>(_list39.size);
                double _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = iprot.readDouble();
                  struct.cartActualVelocity.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setCartActualVelocityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CART_ACTUAL_ACCELERA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.cartActualAccelera = new java.util.ArrayList<java.lang.Double>(_list42.size);
                double _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = iprot.readDouble();
                  struct.cartActualAccelera.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setCartActualAcceleraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SLAVE_READY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.slaveReady = new java.util.ArrayList<java.lang.Boolean>(_list45.size);
                boolean _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = iprot.readBool();
                  struct.slaveReady.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setSlaveReadyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COLLISION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.collision = iprot.readBool();
              struct.setCollisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COLLISION_AXIS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.collisionAxis = iprot.readByte();
              struct.setCollisionAxisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // EMC_STOP_SIGNAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.emcStopSignal = iprot.readBool();
              struct.setEmcStopSignalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ROBOT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.robotState = iprot.readByte();
              struct.setRobotStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ROBOT_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.robotError = iprot.readI32();
              struct.setRobotErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCollision()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'collision' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCollisionAxis()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'collisionAxis' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEmcStopSignal()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'emcStopSignal' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRobotState()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'robotState' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRobotError()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'robotError' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RobotStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jointExpectPosition != null) {
        oprot.writeFieldBegin(JOINT_EXPECT_POSITION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.jointExpectPosition.size()));
          for (double _iter48 : struct.jointExpectPosition)
          {
            oprot.writeDouble(_iter48);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jointExpectVelocity != null) {
        oprot.writeFieldBegin(JOINT_EXPECT_VELOCITY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.jointExpectVelocity.size()));
          for (double _iter49 : struct.jointExpectVelocity)
          {
            oprot.writeDouble(_iter49);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jointExpectAccelera != null) {
        oprot.writeFieldBegin(JOINT_EXPECT_ACCELERA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.jointExpectAccelera.size()));
          for (double _iter50 : struct.jointExpectAccelera)
          {
            oprot.writeDouble(_iter50);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jointActualPosition != null) {
        oprot.writeFieldBegin(JOINT_ACTUAL_POSITION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.jointActualPosition.size()));
          for (double _iter51 : struct.jointActualPosition)
          {
            oprot.writeDouble(_iter51);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jointActualVelocity != null) {
        oprot.writeFieldBegin(JOINT_ACTUAL_VELOCITY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.jointActualVelocity.size()));
          for (double _iter52 : struct.jointActualVelocity)
          {
            oprot.writeDouble(_iter52);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jointActualAccelera != null) {
        oprot.writeFieldBegin(JOINT_ACTUAL_ACCELERA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.jointActualAccelera.size()));
          for (double _iter53 : struct.jointActualAccelera)
          {
            oprot.writeDouble(_iter53);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jointActualCurrent != null) {
        oprot.writeFieldBegin(JOINT_ACTUAL_CURRENT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.jointActualCurrent.size()));
          for (double _iter54 : struct.jointActualCurrent)
          {
            oprot.writeDouble(_iter54);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jointTemperature != null) {
        oprot.writeFieldBegin(JOINT_TEMPERATURE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.jointTemperature.size()));
          for (double _iter55 : struct.jointTemperature)
          {
            oprot.writeDouble(_iter55);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.driverTemperature != null) {
        oprot.writeFieldBegin(DRIVER_TEMPERATURE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.driverTemperature.size()));
          for (double _iter56 : struct.driverTemperature)
          {
            oprot.writeDouble(_iter56);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cartExpectPosition != null) {
        oprot.writeFieldBegin(CART_EXPECT_POSITION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.cartExpectPosition.size()));
          for (double _iter57 : struct.cartExpectPosition)
          {
            oprot.writeDouble(_iter57);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cartExpectVelocity != null) {
        oprot.writeFieldBegin(CART_EXPECT_VELOCITY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.cartExpectVelocity.size()));
          for (double _iter58 : struct.cartExpectVelocity)
          {
            oprot.writeDouble(_iter58);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cartExpectAccelera != null) {
        oprot.writeFieldBegin(CART_EXPECT_ACCELERA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.cartExpectAccelera.size()));
          for (double _iter59 : struct.cartExpectAccelera)
          {
            oprot.writeDouble(_iter59);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cartActualPosition != null) {
        oprot.writeFieldBegin(CART_ACTUAL_POSITION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.cartActualPosition.size()));
          for (double _iter60 : struct.cartActualPosition)
          {
            oprot.writeDouble(_iter60);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cartActualVelocity != null) {
        oprot.writeFieldBegin(CART_ACTUAL_VELOCITY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.cartActualVelocity.size()));
          for (double _iter61 : struct.cartActualVelocity)
          {
            oprot.writeDouble(_iter61);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cartActualAccelera != null) {
        oprot.writeFieldBegin(CART_ACTUAL_ACCELERA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.cartActualAccelera.size()));
          for (double _iter62 : struct.cartActualAccelera)
          {
            oprot.writeDouble(_iter62);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.slaveReady != null) {
        oprot.writeFieldBegin(SLAVE_READY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.slaveReady.size()));
          for (boolean _iter63 : struct.slaveReady)
          {
            oprot.writeBool(_iter63);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COLLISION_FIELD_DESC);
      oprot.writeBool(struct.collision);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLISION_AXIS_FIELD_DESC);
      oprot.writeByte(struct.collisionAxis);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EMC_STOP_SIGNAL_FIELD_DESC);
      oprot.writeBool(struct.emcStopSignal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROBOT_STATE_FIELD_DESC);
      oprot.writeByte(struct.robotState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROBOT_ERROR_FIELD_DESC);
      oprot.writeI32(struct.robotError);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RobotStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RobotStatusTupleScheme getScheme() {
      return new RobotStatusTupleScheme();
    }
  }

  private static class RobotStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<RobotStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RobotStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.jointExpectPosition.size());
        for (double _iter64 : struct.jointExpectPosition)
        {
          oprot.writeDouble(_iter64);
        }
      }
      {
        oprot.writeI32(struct.jointExpectVelocity.size());
        for (double _iter65 : struct.jointExpectVelocity)
        {
          oprot.writeDouble(_iter65);
        }
      }
      {
        oprot.writeI32(struct.jointExpectAccelera.size());
        for (double _iter66 : struct.jointExpectAccelera)
        {
          oprot.writeDouble(_iter66);
        }
      }
      {
        oprot.writeI32(struct.jointActualPosition.size());
        for (double _iter67 : struct.jointActualPosition)
        {
          oprot.writeDouble(_iter67);
        }
      }
      {
        oprot.writeI32(struct.jointActualVelocity.size());
        for (double _iter68 : struct.jointActualVelocity)
        {
          oprot.writeDouble(_iter68);
        }
      }
      {
        oprot.writeI32(struct.jointActualAccelera.size());
        for (double _iter69 : struct.jointActualAccelera)
        {
          oprot.writeDouble(_iter69);
        }
      }
      {
        oprot.writeI32(struct.jointActualCurrent.size());
        for (double _iter70 : struct.jointActualCurrent)
        {
          oprot.writeDouble(_iter70);
        }
      }
      {
        oprot.writeI32(struct.jointTemperature.size());
        for (double _iter71 : struct.jointTemperature)
        {
          oprot.writeDouble(_iter71);
        }
      }
      {
        oprot.writeI32(struct.driverTemperature.size());
        for (double _iter72 : struct.driverTemperature)
        {
          oprot.writeDouble(_iter72);
        }
      }
      {
        oprot.writeI32(struct.cartExpectPosition.size());
        for (double _iter73 : struct.cartExpectPosition)
        {
          oprot.writeDouble(_iter73);
        }
      }
      {
        oprot.writeI32(struct.cartExpectVelocity.size());
        for (double _iter74 : struct.cartExpectVelocity)
        {
          oprot.writeDouble(_iter74);
        }
      }
      {
        oprot.writeI32(struct.cartExpectAccelera.size());
        for (double _iter75 : struct.cartExpectAccelera)
        {
          oprot.writeDouble(_iter75);
        }
      }
      {
        oprot.writeI32(struct.cartActualPosition.size());
        for (double _iter76 : struct.cartActualPosition)
        {
          oprot.writeDouble(_iter76);
        }
      }
      {
        oprot.writeI32(struct.cartActualVelocity.size());
        for (double _iter77 : struct.cartActualVelocity)
        {
          oprot.writeDouble(_iter77);
        }
      }
      {
        oprot.writeI32(struct.cartActualAccelera.size());
        for (double _iter78 : struct.cartActualAccelera)
        {
          oprot.writeDouble(_iter78);
        }
      }
      {
        oprot.writeI32(struct.slaveReady.size());
        for (boolean _iter79 : struct.slaveReady)
        {
          oprot.writeBool(_iter79);
        }
      }
      oprot.writeBool(struct.collision);
      oprot.writeByte(struct.collisionAxis);
      oprot.writeBool(struct.emcStopSignal);
      oprot.writeByte(struct.robotState);
      oprot.writeI32(struct.robotError);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RobotStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list80 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.jointExpectPosition = new java.util.ArrayList<java.lang.Double>(_list80.size);
        double _elem81;
        for (int _i82 = 0; _i82 < _list80.size; ++_i82)
        {
          _elem81 = iprot.readDouble();
          struct.jointExpectPosition.add(_elem81);
        }
      }
      struct.setJointExpectPositionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.jointExpectVelocity = new java.util.ArrayList<java.lang.Double>(_list83.size);
        double _elem84;
        for (int _i85 = 0; _i85 < _list83.size; ++_i85)
        {
          _elem84 = iprot.readDouble();
          struct.jointExpectVelocity.add(_elem84);
        }
      }
      struct.setJointExpectVelocityIsSet(true);
      {
        org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.jointExpectAccelera = new java.util.ArrayList<java.lang.Double>(_list86.size);
        double _elem87;
        for (int _i88 = 0; _i88 < _list86.size; ++_i88)
        {
          _elem87 = iprot.readDouble();
          struct.jointExpectAccelera.add(_elem87);
        }
      }
      struct.setJointExpectAcceleraIsSet(true);
      {
        org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.jointActualPosition = new java.util.ArrayList<java.lang.Double>(_list89.size);
        double _elem90;
        for (int _i91 = 0; _i91 < _list89.size; ++_i91)
        {
          _elem90 = iprot.readDouble();
          struct.jointActualPosition.add(_elem90);
        }
      }
      struct.setJointActualPositionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.jointActualVelocity = new java.util.ArrayList<java.lang.Double>(_list92.size);
        double _elem93;
        for (int _i94 = 0; _i94 < _list92.size; ++_i94)
        {
          _elem93 = iprot.readDouble();
          struct.jointActualVelocity.add(_elem93);
        }
      }
      struct.setJointActualVelocityIsSet(true);
      {
        org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.jointActualAccelera = new java.util.ArrayList<java.lang.Double>(_list95.size);
        double _elem96;
        for (int _i97 = 0; _i97 < _list95.size; ++_i97)
        {
          _elem96 = iprot.readDouble();
          struct.jointActualAccelera.add(_elem96);
        }
      }
      struct.setJointActualAcceleraIsSet(true);
      {
        org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.jointActualCurrent = new java.util.ArrayList<java.lang.Double>(_list98.size);
        double _elem99;
        for (int _i100 = 0; _i100 < _list98.size; ++_i100)
        {
          _elem99 = iprot.readDouble();
          struct.jointActualCurrent.add(_elem99);
        }
      }
      struct.setJointActualCurrentIsSet(true);
      {
        org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.jointTemperature = new java.util.ArrayList<java.lang.Double>(_list101.size);
        double _elem102;
        for (int _i103 = 0; _i103 < _list101.size; ++_i103)
        {
          _elem102 = iprot.readDouble();
          struct.jointTemperature.add(_elem102);
        }
      }
      struct.setJointTemperatureIsSet(true);
      {
        org.apache.thrift.protocol.TList _list104 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.driverTemperature = new java.util.ArrayList<java.lang.Double>(_list104.size);
        double _elem105;
        for (int _i106 = 0; _i106 < _list104.size; ++_i106)
        {
          _elem105 = iprot.readDouble();
          struct.driverTemperature.add(_elem105);
        }
      }
      struct.setDriverTemperatureIsSet(true);
      {
        org.apache.thrift.protocol.TList _list107 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.cartExpectPosition = new java.util.ArrayList<java.lang.Double>(_list107.size);
        double _elem108;
        for (int _i109 = 0; _i109 < _list107.size; ++_i109)
        {
          _elem108 = iprot.readDouble();
          struct.cartExpectPosition.add(_elem108);
        }
      }
      struct.setCartExpectPositionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list110 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.cartExpectVelocity = new java.util.ArrayList<java.lang.Double>(_list110.size);
        double _elem111;
        for (int _i112 = 0; _i112 < _list110.size; ++_i112)
        {
          _elem111 = iprot.readDouble();
          struct.cartExpectVelocity.add(_elem111);
        }
      }
      struct.setCartExpectVelocityIsSet(true);
      {
        org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.cartExpectAccelera = new java.util.ArrayList<java.lang.Double>(_list113.size);
        double _elem114;
        for (int _i115 = 0; _i115 < _list113.size; ++_i115)
        {
          _elem114 = iprot.readDouble();
          struct.cartExpectAccelera.add(_elem114);
        }
      }
      struct.setCartExpectAcceleraIsSet(true);
      {
        org.apache.thrift.protocol.TList _list116 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.cartActualPosition = new java.util.ArrayList<java.lang.Double>(_list116.size);
        double _elem117;
        for (int _i118 = 0; _i118 < _list116.size; ++_i118)
        {
          _elem117 = iprot.readDouble();
          struct.cartActualPosition.add(_elem117);
        }
      }
      struct.setCartActualPositionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.cartActualVelocity = new java.util.ArrayList<java.lang.Double>(_list119.size);
        double _elem120;
        for (int _i121 = 0; _i121 < _list119.size; ++_i121)
        {
          _elem120 = iprot.readDouble();
          struct.cartActualVelocity.add(_elem120);
        }
      }
      struct.setCartActualVelocityIsSet(true);
      {
        org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.cartActualAccelera = new java.util.ArrayList<java.lang.Double>(_list122.size);
        double _elem123;
        for (int _i124 = 0; _i124 < _list122.size; ++_i124)
        {
          _elem123 = iprot.readDouble();
          struct.cartActualAccelera.add(_elem123);
        }
      }
      struct.setCartActualAcceleraIsSet(true);
      {
        org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.slaveReady = new java.util.ArrayList<java.lang.Boolean>(_list125.size);
        boolean _elem126;
        for (int _i127 = 0; _i127 < _list125.size; ++_i127)
        {
          _elem126 = iprot.readBool();
          struct.slaveReady.add(_elem126);
        }
      }
      struct.setSlaveReadyIsSet(true);
      struct.collision = iprot.readBool();
      struct.setCollisionIsSet(true);
      struct.collisionAxis = iprot.readByte();
      struct.setCollisionAxisIsSet(true);
      struct.emcStopSignal = iprot.readBool();
      struct.setEmcStopSignalIsSet(true);
      struct.robotState = iprot.readByte();
      struct.setRobotStateIsSet(true);
      struct.robotError = iprot.readI32();
      struct.setRobotErrorIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

