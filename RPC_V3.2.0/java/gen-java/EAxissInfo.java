/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-01-19")
public class EAxissInfo implements org.apache.thrift.TBase<EAxissInfo, EAxissInfo._Fields>, java.io.Serializable, Cloneable, Comparable<EAxissInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EAxissInfo");

  private static final org.apache.thrift.protocol.TField SCHEME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("scheme_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField POS_FIELD_DESC = new org.apache.thrift.protocol.TField("pos", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EAxissInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EAxissInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String scheme_name; // required
  public int status; // required
  public double pos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHEME_NAME((short)1, "scheme_name"),
    STATUS((short)2, "status"),
    POS((short)3, "pos");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHEME_NAME
          return SCHEME_NAME;
        case 2: // STATUS
          return STATUS;
        case 3: // POS
          return POS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __POS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEME_NAME, new org.apache.thrift.meta_data.FieldMetaData("scheme_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POS, new org.apache.thrift.meta_data.FieldMetaData("pos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EAxissInfo.class, metaDataMap);
  }

  public EAxissInfo() {
  }

  public EAxissInfo(
    java.lang.String scheme_name,
    int status,
    double pos)
  {
    this();
    this.scheme_name = scheme_name;
    this.status = status;
    setStatusIsSet(true);
    this.pos = pos;
    setPosIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EAxissInfo(EAxissInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetScheme_name()) {
      this.scheme_name = other.scheme_name;
    }
    this.status = other.status;
    this.pos = other.pos;
  }

  public EAxissInfo deepCopy() {
    return new EAxissInfo(this);
  }

  @Override
  public void clear() {
    this.scheme_name = null;
    setStatusIsSet(false);
    this.status = 0;
    setPosIsSet(false);
    this.pos = 0.0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getScheme_name() {
    return this.scheme_name;
  }

  public EAxissInfo setScheme_name(@org.apache.thrift.annotation.Nullable java.lang.String scheme_name) {
    this.scheme_name = scheme_name;
    return this;
  }

  public void unsetScheme_name() {
    this.scheme_name = null;
  }

  /** Returns true if field scheme_name is set (has been assigned a value) and false otherwise */
  public boolean isSetScheme_name() {
    return this.scheme_name != null;
  }

  public void setScheme_nameIsSet(boolean value) {
    if (!value) {
      this.scheme_name = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public EAxissInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public double getPos() {
    return this.pos;
  }

  public EAxissInfo setPos(double pos) {
    this.pos = pos;
    setPosIsSet(true);
    return this;
  }

  public void unsetPos() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POS_ISSET_ID);
  }

  /** Returns true if field pos is set (has been assigned a value) and false otherwise */
  public boolean isSetPos() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POS_ISSET_ID);
  }

  public void setPosIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SCHEME_NAME:
      if (value == null) {
        unsetScheme_name();
      } else {
        setScheme_name((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case POS:
      if (value == null) {
        unsetPos();
      } else {
        setPos((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEME_NAME:
      return getScheme_name();

    case STATUS:
      return getStatus();

    case POS:
      return getPos();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCHEME_NAME:
      return isSetScheme_name();
    case STATUS:
      return isSetStatus();
    case POS:
      return isSetPos();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof EAxissInfo)
      return this.equals((EAxissInfo)that);
    return false;
  }

  public boolean equals(EAxissInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_scheme_name = true && this.isSetScheme_name();
    boolean that_present_scheme_name = true && that.isSetScheme_name();
    if (this_present_scheme_name || that_present_scheme_name) {
      if (!(this_present_scheme_name && that_present_scheme_name))
        return false;
      if (!this.scheme_name.equals(that.scheme_name))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_pos = true;
    boolean that_present_pos = true;
    if (this_present_pos || that_present_pos) {
      if (!(this_present_pos && that_present_pos))
        return false;
      if (this.pos != that.pos)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetScheme_name()) ? 131071 : 524287);
    if (isSetScheme_name())
      hashCode = hashCode * 8191 + scheme_name.hashCode();

    hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pos);

    return hashCode;
  }

  @Override
  public int compareTo(EAxissInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetScheme_name()).compareTo(other.isSetScheme_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheme_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheme_name, other.scheme_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPos()).compareTo(other.isSetPos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos, other.pos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EAxissInfo(");
    boolean first = true;

    sb.append("scheme_name:");
    if (this.scheme_name == null) {
      sb.append("null");
    } else {
      sb.append(this.scheme_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pos:");
    sb.append(this.pos);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (scheme_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scheme_name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pos' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EAxissInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EAxissInfoStandardScheme getScheme() {
      return new EAxissInfoStandardScheme();
    }
  }

  private static class EAxissInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<EAxissInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EAxissInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHEME_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scheme_name = iprot.readString();
              struct.setScheme_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pos = iprot.readDouble();
              struct.setPosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPos()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pos' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EAxissInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.scheme_name != null) {
        oprot.writeFieldBegin(SCHEME_NAME_FIELD_DESC);
        oprot.writeString(struct.scheme_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_FIELD_DESC);
      oprot.writeDouble(struct.pos);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EAxissInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EAxissInfoTupleScheme getScheme() {
      return new EAxissInfoTupleScheme();
    }
  }

  private static class EAxissInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<EAxissInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EAxissInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.scheme_name);
      oprot.writeI32(struct.status);
      oprot.writeDouble(struct.pos);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EAxissInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.scheme_name = iprot.readString();
      struct.setScheme_nameIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.pos = iprot.readDouble();
      struct.setPosIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

