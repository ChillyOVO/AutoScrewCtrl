/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-01-19")
public class IOStatus implements org.apache.thrift.TBase<IOStatus, IOStatus._Fields>, java.io.Serializable, Cloneable, Comparable<IOStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IOStatus");

  private static final org.apache.thrift.protocol.TField ANALOG_CURRENT_OUTPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("analogCurrentOutputs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ANALOG_VOLTAGE_OUTPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("analogVoltageOutputs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ANALOG_CURRENT_INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("analogCurrentInputs", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ANALOG_VOLTAGE_INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("analogVoltageInputs", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DIGITAL_INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("digitalInputs", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DIGITAL_OUTPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("digitalOutputs", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TOOL_IOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("toolIOIn", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TOOL_IOOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("toolIOOut", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TOOL_BUTTON_FIELD_DESC = new org.apache.thrift.protocol.TField("toolButton", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField FUN_REGISTER_INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("funRegisterInputs", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField FUN_REGISTER_OUTPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("funRegisterOutputs", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField BOOL_REGISTER_INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("boolRegisterInputs", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField BOOL_REGISTER_OUTPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("boolRegisterOutputs", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField WORD_REGISTER_INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("wordRegisterInputs", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField WORD_REGISTER_OUTPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("wordRegisterOutputs", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField FLOAT_REGISTER_INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("floatRegisterInputs", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField FLOAT_REGISTER_OUTPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("floatRegisterOutputs", org.apache.thrift.protocol.TType.LIST, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IOStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IOStatusTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> analogCurrentOutputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> analogVoltageOutputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> analogCurrentInputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> analogVoltageInputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> digitalInputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> digitalOutputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> toolIOIn; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> toolIOOut; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> toolButton; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> funRegisterInputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> funRegisterOutputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> boolRegisterInputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> boolRegisterOutputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> wordRegisterInputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> wordRegisterOutputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> floatRegisterInputs; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> floatRegisterOutputs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANALOG_CURRENT_OUTPUTS((short)1, "analogCurrentOutputs"),
    ANALOG_VOLTAGE_OUTPUTS((short)2, "analogVoltageOutputs"),
    ANALOG_CURRENT_INPUTS((short)3, "analogCurrentInputs"),
    ANALOG_VOLTAGE_INPUTS((short)4, "analogVoltageInputs"),
    DIGITAL_INPUTS((short)5, "digitalInputs"),
    DIGITAL_OUTPUTS((short)6, "digitalOutputs"),
    TOOL_IOIN((short)7, "toolIOIn"),
    TOOL_IOOUT((short)8, "toolIOOut"),
    TOOL_BUTTON((short)9, "toolButton"),
    FUN_REGISTER_INPUTS((short)10, "funRegisterInputs"),
    FUN_REGISTER_OUTPUTS((short)11, "funRegisterOutputs"),
    BOOL_REGISTER_INPUTS((short)12, "boolRegisterInputs"),
    BOOL_REGISTER_OUTPUTS((short)13, "boolRegisterOutputs"),
    WORD_REGISTER_INPUTS((short)14, "wordRegisterInputs"),
    WORD_REGISTER_OUTPUTS((short)15, "wordRegisterOutputs"),
    FLOAT_REGISTER_INPUTS((short)16, "floatRegisterInputs"),
    FLOAT_REGISTER_OUTPUTS((short)17, "floatRegisterOutputs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANALOG_CURRENT_OUTPUTS
          return ANALOG_CURRENT_OUTPUTS;
        case 2: // ANALOG_VOLTAGE_OUTPUTS
          return ANALOG_VOLTAGE_OUTPUTS;
        case 3: // ANALOG_CURRENT_INPUTS
          return ANALOG_CURRENT_INPUTS;
        case 4: // ANALOG_VOLTAGE_INPUTS
          return ANALOG_VOLTAGE_INPUTS;
        case 5: // DIGITAL_INPUTS
          return DIGITAL_INPUTS;
        case 6: // DIGITAL_OUTPUTS
          return DIGITAL_OUTPUTS;
        case 7: // TOOL_IOIN
          return TOOL_IOIN;
        case 8: // TOOL_IOOUT
          return TOOL_IOOUT;
        case 9: // TOOL_BUTTON
          return TOOL_BUTTON;
        case 10: // FUN_REGISTER_INPUTS
          return FUN_REGISTER_INPUTS;
        case 11: // FUN_REGISTER_OUTPUTS
          return FUN_REGISTER_OUTPUTS;
        case 12: // BOOL_REGISTER_INPUTS
          return BOOL_REGISTER_INPUTS;
        case 13: // BOOL_REGISTER_OUTPUTS
          return BOOL_REGISTER_OUTPUTS;
        case 14: // WORD_REGISTER_INPUTS
          return WORD_REGISTER_INPUTS;
        case 15: // WORD_REGISTER_OUTPUTS
          return WORD_REGISTER_OUTPUTS;
        case 16: // FLOAT_REGISTER_INPUTS
          return FLOAT_REGISTER_INPUTS;
        case 17: // FLOAT_REGISTER_OUTPUTS
          return FLOAT_REGISTER_OUTPUTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANALOG_CURRENT_OUTPUTS, new org.apache.thrift.meta_data.FieldMetaData("analogCurrentOutputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ANALOG_VOLTAGE_OUTPUTS, new org.apache.thrift.meta_data.FieldMetaData("analogVoltageOutputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ANALOG_CURRENT_INPUTS, new org.apache.thrift.meta_data.FieldMetaData("analogCurrentInputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ANALOG_VOLTAGE_INPUTS, new org.apache.thrift.meta_data.FieldMetaData("analogVoltageInputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.DIGITAL_INPUTS, new org.apache.thrift.meta_data.FieldMetaData("digitalInputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.DIGITAL_OUTPUTS, new org.apache.thrift.meta_data.FieldMetaData("digitalOutputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.TOOL_IOIN, new org.apache.thrift.meta_data.FieldMetaData("toolIOIn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.TOOL_IOOUT, new org.apache.thrift.meta_data.FieldMetaData("toolIOOut", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.TOOL_BUTTON, new org.apache.thrift.meta_data.FieldMetaData("toolButton", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.FUN_REGISTER_INPUTS, new org.apache.thrift.meta_data.FieldMetaData("funRegisterInputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.FUN_REGISTER_OUTPUTS, new org.apache.thrift.meta_data.FieldMetaData("funRegisterOutputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.BOOL_REGISTER_INPUTS, new org.apache.thrift.meta_data.FieldMetaData("boolRegisterInputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.BOOL_REGISTER_OUTPUTS, new org.apache.thrift.meta_data.FieldMetaData("boolRegisterOutputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.WORD_REGISTER_INPUTS, new org.apache.thrift.meta_data.FieldMetaData("wordRegisterInputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.WORD_REGISTER_OUTPUTS, new org.apache.thrift.meta_data.FieldMetaData("wordRegisterOutputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.FLOAT_REGISTER_INPUTS, new org.apache.thrift.meta_data.FieldMetaData("floatRegisterInputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.FLOAT_REGISTER_OUTPUTS, new org.apache.thrift.meta_data.FieldMetaData("floatRegisterOutputs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IOStatus.class, metaDataMap);
  }

  public IOStatus() {
  }

  public IOStatus(
    java.util.List<java.lang.Double> analogCurrentOutputs,
    java.util.List<java.lang.Double> analogVoltageOutputs,
    java.util.List<java.lang.Double> analogCurrentInputs,
    java.util.List<java.lang.Double> analogVoltageInputs,
    java.util.List<java.lang.Boolean> digitalInputs,
    java.util.List<java.lang.Boolean> digitalOutputs,
    java.util.List<java.lang.Boolean> toolIOIn,
    java.util.List<java.lang.Boolean> toolIOOut,
    java.util.List<java.lang.Boolean> toolButton,
    java.util.List<java.lang.Boolean> funRegisterInputs,
    java.util.List<java.lang.Boolean> funRegisterOutputs,
    java.util.List<java.lang.Boolean> boolRegisterInputs,
    java.util.List<java.lang.Boolean> boolRegisterOutputs,
    java.util.List<java.lang.Short> wordRegisterInputs,
    java.util.List<java.lang.Short> wordRegisterOutputs,
    java.util.List<java.lang.Double> floatRegisterInputs,
    java.util.List<java.lang.Double> floatRegisterOutputs)
  {
    this();
    this.analogCurrentOutputs = analogCurrentOutputs;
    this.analogVoltageOutputs = analogVoltageOutputs;
    this.analogCurrentInputs = analogCurrentInputs;
    this.analogVoltageInputs = analogVoltageInputs;
    this.digitalInputs = digitalInputs;
    this.digitalOutputs = digitalOutputs;
    this.toolIOIn = toolIOIn;
    this.toolIOOut = toolIOOut;
    this.toolButton = toolButton;
    this.funRegisterInputs = funRegisterInputs;
    this.funRegisterOutputs = funRegisterOutputs;
    this.boolRegisterInputs = boolRegisterInputs;
    this.boolRegisterOutputs = boolRegisterOutputs;
    this.wordRegisterInputs = wordRegisterInputs;
    this.wordRegisterOutputs = wordRegisterOutputs;
    this.floatRegisterInputs = floatRegisterInputs;
    this.floatRegisterOutputs = floatRegisterOutputs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IOStatus(IOStatus other) {
    if (other.isSetAnalogCurrentOutputs()) {
      java.util.List<java.lang.Double> __this__analogCurrentOutputs = new java.util.ArrayList<java.lang.Double>(other.analogCurrentOutputs);
      this.analogCurrentOutputs = __this__analogCurrentOutputs;
    }
    if (other.isSetAnalogVoltageOutputs()) {
      java.util.List<java.lang.Double> __this__analogVoltageOutputs = new java.util.ArrayList<java.lang.Double>(other.analogVoltageOutputs);
      this.analogVoltageOutputs = __this__analogVoltageOutputs;
    }
    if (other.isSetAnalogCurrentInputs()) {
      java.util.List<java.lang.Double> __this__analogCurrentInputs = new java.util.ArrayList<java.lang.Double>(other.analogCurrentInputs);
      this.analogCurrentInputs = __this__analogCurrentInputs;
    }
    if (other.isSetAnalogVoltageInputs()) {
      java.util.List<java.lang.Double> __this__analogVoltageInputs = new java.util.ArrayList<java.lang.Double>(other.analogVoltageInputs);
      this.analogVoltageInputs = __this__analogVoltageInputs;
    }
    if (other.isSetDigitalInputs()) {
      java.util.List<java.lang.Boolean> __this__digitalInputs = new java.util.ArrayList<java.lang.Boolean>(other.digitalInputs);
      this.digitalInputs = __this__digitalInputs;
    }
    if (other.isSetDigitalOutputs()) {
      java.util.List<java.lang.Boolean> __this__digitalOutputs = new java.util.ArrayList<java.lang.Boolean>(other.digitalOutputs);
      this.digitalOutputs = __this__digitalOutputs;
    }
    if (other.isSetToolIOIn()) {
      java.util.List<java.lang.Boolean> __this__toolIOIn = new java.util.ArrayList<java.lang.Boolean>(other.toolIOIn);
      this.toolIOIn = __this__toolIOIn;
    }
    if (other.isSetToolIOOut()) {
      java.util.List<java.lang.Boolean> __this__toolIOOut = new java.util.ArrayList<java.lang.Boolean>(other.toolIOOut);
      this.toolIOOut = __this__toolIOOut;
    }
    if (other.isSetToolButton()) {
      java.util.List<java.lang.Boolean> __this__toolButton = new java.util.ArrayList<java.lang.Boolean>(other.toolButton);
      this.toolButton = __this__toolButton;
    }
    if (other.isSetFunRegisterInputs()) {
      java.util.List<java.lang.Boolean> __this__funRegisterInputs = new java.util.ArrayList<java.lang.Boolean>(other.funRegisterInputs);
      this.funRegisterInputs = __this__funRegisterInputs;
    }
    if (other.isSetFunRegisterOutputs()) {
      java.util.List<java.lang.Boolean> __this__funRegisterOutputs = new java.util.ArrayList<java.lang.Boolean>(other.funRegisterOutputs);
      this.funRegisterOutputs = __this__funRegisterOutputs;
    }
    if (other.isSetBoolRegisterInputs()) {
      java.util.List<java.lang.Boolean> __this__boolRegisterInputs = new java.util.ArrayList<java.lang.Boolean>(other.boolRegisterInputs);
      this.boolRegisterInputs = __this__boolRegisterInputs;
    }
    if (other.isSetBoolRegisterOutputs()) {
      java.util.List<java.lang.Boolean> __this__boolRegisterOutputs = new java.util.ArrayList<java.lang.Boolean>(other.boolRegisterOutputs);
      this.boolRegisterOutputs = __this__boolRegisterOutputs;
    }
    if (other.isSetWordRegisterInputs()) {
      java.util.List<java.lang.Short> __this__wordRegisterInputs = new java.util.ArrayList<java.lang.Short>(other.wordRegisterInputs);
      this.wordRegisterInputs = __this__wordRegisterInputs;
    }
    if (other.isSetWordRegisterOutputs()) {
      java.util.List<java.lang.Short> __this__wordRegisterOutputs = new java.util.ArrayList<java.lang.Short>(other.wordRegisterOutputs);
      this.wordRegisterOutputs = __this__wordRegisterOutputs;
    }
    if (other.isSetFloatRegisterInputs()) {
      java.util.List<java.lang.Double> __this__floatRegisterInputs = new java.util.ArrayList<java.lang.Double>(other.floatRegisterInputs);
      this.floatRegisterInputs = __this__floatRegisterInputs;
    }
    if (other.isSetFloatRegisterOutputs()) {
      java.util.List<java.lang.Double> __this__floatRegisterOutputs = new java.util.ArrayList<java.lang.Double>(other.floatRegisterOutputs);
      this.floatRegisterOutputs = __this__floatRegisterOutputs;
    }
  }

  public IOStatus deepCopy() {
    return new IOStatus(this);
  }

  @Override
  public void clear() {
    this.analogCurrentOutputs = null;
    this.analogVoltageOutputs = null;
    this.analogCurrentInputs = null;
    this.analogVoltageInputs = null;
    this.digitalInputs = null;
    this.digitalOutputs = null;
    this.toolIOIn = null;
    this.toolIOOut = null;
    this.toolButton = null;
    this.funRegisterInputs = null;
    this.funRegisterOutputs = null;
    this.boolRegisterInputs = null;
    this.boolRegisterOutputs = null;
    this.wordRegisterInputs = null;
    this.wordRegisterOutputs = null;
    this.floatRegisterInputs = null;
    this.floatRegisterOutputs = null;
  }

  public int getAnalogCurrentOutputsSize() {
    return (this.analogCurrentOutputs == null) ? 0 : this.analogCurrentOutputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getAnalogCurrentOutputsIterator() {
    return (this.analogCurrentOutputs == null) ? null : this.analogCurrentOutputs.iterator();
  }

  public void addToAnalogCurrentOutputs(double elem) {
    if (this.analogCurrentOutputs == null) {
      this.analogCurrentOutputs = new java.util.ArrayList<java.lang.Double>();
    }
    this.analogCurrentOutputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getAnalogCurrentOutputs() {
    return this.analogCurrentOutputs;
  }

  public IOStatus setAnalogCurrentOutputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> analogCurrentOutputs) {
    this.analogCurrentOutputs = analogCurrentOutputs;
    return this;
  }

  public void unsetAnalogCurrentOutputs() {
    this.analogCurrentOutputs = null;
  }

  /** Returns true if field analogCurrentOutputs is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalogCurrentOutputs() {
    return this.analogCurrentOutputs != null;
  }

  public void setAnalogCurrentOutputsIsSet(boolean value) {
    if (!value) {
      this.analogCurrentOutputs = null;
    }
  }

  public int getAnalogVoltageOutputsSize() {
    return (this.analogVoltageOutputs == null) ? 0 : this.analogVoltageOutputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getAnalogVoltageOutputsIterator() {
    return (this.analogVoltageOutputs == null) ? null : this.analogVoltageOutputs.iterator();
  }

  public void addToAnalogVoltageOutputs(double elem) {
    if (this.analogVoltageOutputs == null) {
      this.analogVoltageOutputs = new java.util.ArrayList<java.lang.Double>();
    }
    this.analogVoltageOutputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getAnalogVoltageOutputs() {
    return this.analogVoltageOutputs;
  }

  public IOStatus setAnalogVoltageOutputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> analogVoltageOutputs) {
    this.analogVoltageOutputs = analogVoltageOutputs;
    return this;
  }

  public void unsetAnalogVoltageOutputs() {
    this.analogVoltageOutputs = null;
  }

  /** Returns true if field analogVoltageOutputs is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalogVoltageOutputs() {
    return this.analogVoltageOutputs != null;
  }

  public void setAnalogVoltageOutputsIsSet(boolean value) {
    if (!value) {
      this.analogVoltageOutputs = null;
    }
  }

  public int getAnalogCurrentInputsSize() {
    return (this.analogCurrentInputs == null) ? 0 : this.analogCurrentInputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getAnalogCurrentInputsIterator() {
    return (this.analogCurrentInputs == null) ? null : this.analogCurrentInputs.iterator();
  }

  public void addToAnalogCurrentInputs(double elem) {
    if (this.analogCurrentInputs == null) {
      this.analogCurrentInputs = new java.util.ArrayList<java.lang.Double>();
    }
    this.analogCurrentInputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getAnalogCurrentInputs() {
    return this.analogCurrentInputs;
  }

  public IOStatus setAnalogCurrentInputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> analogCurrentInputs) {
    this.analogCurrentInputs = analogCurrentInputs;
    return this;
  }

  public void unsetAnalogCurrentInputs() {
    this.analogCurrentInputs = null;
  }

  /** Returns true if field analogCurrentInputs is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalogCurrentInputs() {
    return this.analogCurrentInputs != null;
  }

  public void setAnalogCurrentInputsIsSet(boolean value) {
    if (!value) {
      this.analogCurrentInputs = null;
    }
  }

  public int getAnalogVoltageInputsSize() {
    return (this.analogVoltageInputs == null) ? 0 : this.analogVoltageInputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getAnalogVoltageInputsIterator() {
    return (this.analogVoltageInputs == null) ? null : this.analogVoltageInputs.iterator();
  }

  public void addToAnalogVoltageInputs(double elem) {
    if (this.analogVoltageInputs == null) {
      this.analogVoltageInputs = new java.util.ArrayList<java.lang.Double>();
    }
    this.analogVoltageInputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getAnalogVoltageInputs() {
    return this.analogVoltageInputs;
  }

  public IOStatus setAnalogVoltageInputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> analogVoltageInputs) {
    this.analogVoltageInputs = analogVoltageInputs;
    return this;
  }

  public void unsetAnalogVoltageInputs() {
    this.analogVoltageInputs = null;
  }

  /** Returns true if field analogVoltageInputs is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalogVoltageInputs() {
    return this.analogVoltageInputs != null;
  }

  public void setAnalogVoltageInputsIsSet(boolean value) {
    if (!value) {
      this.analogVoltageInputs = null;
    }
  }

  public int getDigitalInputsSize() {
    return (this.digitalInputs == null) ? 0 : this.digitalInputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getDigitalInputsIterator() {
    return (this.digitalInputs == null) ? null : this.digitalInputs.iterator();
  }

  public void addToDigitalInputs(boolean elem) {
    if (this.digitalInputs == null) {
      this.digitalInputs = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.digitalInputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getDigitalInputs() {
    return this.digitalInputs;
  }

  public IOStatus setDigitalInputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> digitalInputs) {
    this.digitalInputs = digitalInputs;
    return this;
  }

  public void unsetDigitalInputs() {
    this.digitalInputs = null;
  }

  /** Returns true if field digitalInputs is set (has been assigned a value) and false otherwise */
  public boolean isSetDigitalInputs() {
    return this.digitalInputs != null;
  }

  public void setDigitalInputsIsSet(boolean value) {
    if (!value) {
      this.digitalInputs = null;
    }
  }

  public int getDigitalOutputsSize() {
    return (this.digitalOutputs == null) ? 0 : this.digitalOutputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getDigitalOutputsIterator() {
    return (this.digitalOutputs == null) ? null : this.digitalOutputs.iterator();
  }

  public void addToDigitalOutputs(boolean elem) {
    if (this.digitalOutputs == null) {
      this.digitalOutputs = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.digitalOutputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getDigitalOutputs() {
    return this.digitalOutputs;
  }

  public IOStatus setDigitalOutputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> digitalOutputs) {
    this.digitalOutputs = digitalOutputs;
    return this;
  }

  public void unsetDigitalOutputs() {
    this.digitalOutputs = null;
  }

  /** Returns true if field digitalOutputs is set (has been assigned a value) and false otherwise */
  public boolean isSetDigitalOutputs() {
    return this.digitalOutputs != null;
  }

  public void setDigitalOutputsIsSet(boolean value) {
    if (!value) {
      this.digitalOutputs = null;
    }
  }

  public int getToolIOInSize() {
    return (this.toolIOIn == null) ? 0 : this.toolIOIn.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getToolIOInIterator() {
    return (this.toolIOIn == null) ? null : this.toolIOIn.iterator();
  }

  public void addToToolIOIn(boolean elem) {
    if (this.toolIOIn == null) {
      this.toolIOIn = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.toolIOIn.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getToolIOIn() {
    return this.toolIOIn;
  }

  public IOStatus setToolIOIn(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> toolIOIn) {
    this.toolIOIn = toolIOIn;
    return this;
  }

  public void unsetToolIOIn() {
    this.toolIOIn = null;
  }

  /** Returns true if field toolIOIn is set (has been assigned a value) and false otherwise */
  public boolean isSetToolIOIn() {
    return this.toolIOIn != null;
  }

  public void setToolIOInIsSet(boolean value) {
    if (!value) {
      this.toolIOIn = null;
    }
  }

  public int getToolIOOutSize() {
    return (this.toolIOOut == null) ? 0 : this.toolIOOut.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getToolIOOutIterator() {
    return (this.toolIOOut == null) ? null : this.toolIOOut.iterator();
  }

  public void addToToolIOOut(boolean elem) {
    if (this.toolIOOut == null) {
      this.toolIOOut = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.toolIOOut.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getToolIOOut() {
    return this.toolIOOut;
  }

  public IOStatus setToolIOOut(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> toolIOOut) {
    this.toolIOOut = toolIOOut;
    return this;
  }

  public void unsetToolIOOut() {
    this.toolIOOut = null;
  }

  /** Returns true if field toolIOOut is set (has been assigned a value) and false otherwise */
  public boolean isSetToolIOOut() {
    return this.toolIOOut != null;
  }

  public void setToolIOOutIsSet(boolean value) {
    if (!value) {
      this.toolIOOut = null;
    }
  }

  public int getToolButtonSize() {
    return (this.toolButton == null) ? 0 : this.toolButton.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getToolButtonIterator() {
    return (this.toolButton == null) ? null : this.toolButton.iterator();
  }

  public void addToToolButton(boolean elem) {
    if (this.toolButton == null) {
      this.toolButton = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.toolButton.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getToolButton() {
    return this.toolButton;
  }

  public IOStatus setToolButton(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> toolButton) {
    this.toolButton = toolButton;
    return this;
  }

  public void unsetToolButton() {
    this.toolButton = null;
  }

  /** Returns true if field toolButton is set (has been assigned a value) and false otherwise */
  public boolean isSetToolButton() {
    return this.toolButton != null;
  }

  public void setToolButtonIsSet(boolean value) {
    if (!value) {
      this.toolButton = null;
    }
  }

  public int getFunRegisterInputsSize() {
    return (this.funRegisterInputs == null) ? 0 : this.funRegisterInputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getFunRegisterInputsIterator() {
    return (this.funRegisterInputs == null) ? null : this.funRegisterInputs.iterator();
  }

  public void addToFunRegisterInputs(boolean elem) {
    if (this.funRegisterInputs == null) {
      this.funRegisterInputs = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.funRegisterInputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getFunRegisterInputs() {
    return this.funRegisterInputs;
  }

  public IOStatus setFunRegisterInputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> funRegisterInputs) {
    this.funRegisterInputs = funRegisterInputs;
    return this;
  }

  public void unsetFunRegisterInputs() {
    this.funRegisterInputs = null;
  }

  /** Returns true if field funRegisterInputs is set (has been assigned a value) and false otherwise */
  public boolean isSetFunRegisterInputs() {
    return this.funRegisterInputs != null;
  }

  public void setFunRegisterInputsIsSet(boolean value) {
    if (!value) {
      this.funRegisterInputs = null;
    }
  }

  public int getFunRegisterOutputsSize() {
    return (this.funRegisterOutputs == null) ? 0 : this.funRegisterOutputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getFunRegisterOutputsIterator() {
    return (this.funRegisterOutputs == null) ? null : this.funRegisterOutputs.iterator();
  }

  public void addToFunRegisterOutputs(boolean elem) {
    if (this.funRegisterOutputs == null) {
      this.funRegisterOutputs = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.funRegisterOutputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getFunRegisterOutputs() {
    return this.funRegisterOutputs;
  }

  public IOStatus setFunRegisterOutputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> funRegisterOutputs) {
    this.funRegisterOutputs = funRegisterOutputs;
    return this;
  }

  public void unsetFunRegisterOutputs() {
    this.funRegisterOutputs = null;
  }

  /** Returns true if field funRegisterOutputs is set (has been assigned a value) and false otherwise */
  public boolean isSetFunRegisterOutputs() {
    return this.funRegisterOutputs != null;
  }

  public void setFunRegisterOutputsIsSet(boolean value) {
    if (!value) {
      this.funRegisterOutputs = null;
    }
  }

  public int getBoolRegisterInputsSize() {
    return (this.boolRegisterInputs == null) ? 0 : this.boolRegisterInputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getBoolRegisterInputsIterator() {
    return (this.boolRegisterInputs == null) ? null : this.boolRegisterInputs.iterator();
  }

  public void addToBoolRegisterInputs(boolean elem) {
    if (this.boolRegisterInputs == null) {
      this.boolRegisterInputs = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.boolRegisterInputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getBoolRegisterInputs() {
    return this.boolRegisterInputs;
  }

  public IOStatus setBoolRegisterInputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> boolRegisterInputs) {
    this.boolRegisterInputs = boolRegisterInputs;
    return this;
  }

  public void unsetBoolRegisterInputs() {
    this.boolRegisterInputs = null;
  }

  /** Returns true if field boolRegisterInputs is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolRegisterInputs() {
    return this.boolRegisterInputs != null;
  }

  public void setBoolRegisterInputsIsSet(boolean value) {
    if (!value) {
      this.boolRegisterInputs = null;
    }
  }

  public int getBoolRegisterOutputsSize() {
    return (this.boolRegisterOutputs == null) ? 0 : this.boolRegisterOutputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getBoolRegisterOutputsIterator() {
    return (this.boolRegisterOutputs == null) ? null : this.boolRegisterOutputs.iterator();
  }

  public void addToBoolRegisterOutputs(boolean elem) {
    if (this.boolRegisterOutputs == null) {
      this.boolRegisterOutputs = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.boolRegisterOutputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getBoolRegisterOutputs() {
    return this.boolRegisterOutputs;
  }

  public IOStatus setBoolRegisterOutputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> boolRegisterOutputs) {
    this.boolRegisterOutputs = boolRegisterOutputs;
    return this;
  }

  public void unsetBoolRegisterOutputs() {
    this.boolRegisterOutputs = null;
  }

  /** Returns true if field boolRegisterOutputs is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolRegisterOutputs() {
    return this.boolRegisterOutputs != null;
  }

  public void setBoolRegisterOutputsIsSet(boolean value) {
    if (!value) {
      this.boolRegisterOutputs = null;
    }
  }

  public int getWordRegisterInputsSize() {
    return (this.wordRegisterInputs == null) ? 0 : this.wordRegisterInputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Short> getWordRegisterInputsIterator() {
    return (this.wordRegisterInputs == null) ? null : this.wordRegisterInputs.iterator();
  }

  public void addToWordRegisterInputs(short elem) {
    if (this.wordRegisterInputs == null) {
      this.wordRegisterInputs = new java.util.ArrayList<java.lang.Short>();
    }
    this.wordRegisterInputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Short> getWordRegisterInputs() {
    return this.wordRegisterInputs;
  }

  public IOStatus setWordRegisterInputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> wordRegisterInputs) {
    this.wordRegisterInputs = wordRegisterInputs;
    return this;
  }

  public void unsetWordRegisterInputs() {
    this.wordRegisterInputs = null;
  }

  /** Returns true if field wordRegisterInputs is set (has been assigned a value) and false otherwise */
  public boolean isSetWordRegisterInputs() {
    return this.wordRegisterInputs != null;
  }

  public void setWordRegisterInputsIsSet(boolean value) {
    if (!value) {
      this.wordRegisterInputs = null;
    }
  }

  public int getWordRegisterOutputsSize() {
    return (this.wordRegisterOutputs == null) ? 0 : this.wordRegisterOutputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Short> getWordRegisterOutputsIterator() {
    return (this.wordRegisterOutputs == null) ? null : this.wordRegisterOutputs.iterator();
  }

  public void addToWordRegisterOutputs(short elem) {
    if (this.wordRegisterOutputs == null) {
      this.wordRegisterOutputs = new java.util.ArrayList<java.lang.Short>();
    }
    this.wordRegisterOutputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Short> getWordRegisterOutputs() {
    return this.wordRegisterOutputs;
  }

  public IOStatus setWordRegisterOutputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> wordRegisterOutputs) {
    this.wordRegisterOutputs = wordRegisterOutputs;
    return this;
  }

  public void unsetWordRegisterOutputs() {
    this.wordRegisterOutputs = null;
  }

  /** Returns true if field wordRegisterOutputs is set (has been assigned a value) and false otherwise */
  public boolean isSetWordRegisterOutputs() {
    return this.wordRegisterOutputs != null;
  }

  public void setWordRegisterOutputsIsSet(boolean value) {
    if (!value) {
      this.wordRegisterOutputs = null;
    }
  }

  public int getFloatRegisterInputsSize() {
    return (this.floatRegisterInputs == null) ? 0 : this.floatRegisterInputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getFloatRegisterInputsIterator() {
    return (this.floatRegisterInputs == null) ? null : this.floatRegisterInputs.iterator();
  }

  public void addToFloatRegisterInputs(double elem) {
    if (this.floatRegisterInputs == null) {
      this.floatRegisterInputs = new java.util.ArrayList<java.lang.Double>();
    }
    this.floatRegisterInputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getFloatRegisterInputs() {
    return this.floatRegisterInputs;
  }

  public IOStatus setFloatRegisterInputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> floatRegisterInputs) {
    this.floatRegisterInputs = floatRegisterInputs;
    return this;
  }

  public void unsetFloatRegisterInputs() {
    this.floatRegisterInputs = null;
  }

  /** Returns true if field floatRegisterInputs is set (has been assigned a value) and false otherwise */
  public boolean isSetFloatRegisterInputs() {
    return this.floatRegisterInputs != null;
  }

  public void setFloatRegisterInputsIsSet(boolean value) {
    if (!value) {
      this.floatRegisterInputs = null;
    }
  }

  public int getFloatRegisterOutputsSize() {
    return (this.floatRegisterOutputs == null) ? 0 : this.floatRegisterOutputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getFloatRegisterOutputsIterator() {
    return (this.floatRegisterOutputs == null) ? null : this.floatRegisterOutputs.iterator();
  }

  public void addToFloatRegisterOutputs(double elem) {
    if (this.floatRegisterOutputs == null) {
      this.floatRegisterOutputs = new java.util.ArrayList<java.lang.Double>();
    }
    this.floatRegisterOutputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getFloatRegisterOutputs() {
    return this.floatRegisterOutputs;
  }

  public IOStatus setFloatRegisterOutputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> floatRegisterOutputs) {
    this.floatRegisterOutputs = floatRegisterOutputs;
    return this;
  }

  public void unsetFloatRegisterOutputs() {
    this.floatRegisterOutputs = null;
  }

  /** Returns true if field floatRegisterOutputs is set (has been assigned a value) and false otherwise */
  public boolean isSetFloatRegisterOutputs() {
    return this.floatRegisterOutputs != null;
  }

  public void setFloatRegisterOutputsIsSet(boolean value) {
    if (!value) {
      this.floatRegisterOutputs = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ANALOG_CURRENT_OUTPUTS:
      if (value == null) {
        unsetAnalogCurrentOutputs();
      } else {
        setAnalogCurrentOutputs((java.util.List<java.lang.Double>)value);
      }
      break;

    case ANALOG_VOLTAGE_OUTPUTS:
      if (value == null) {
        unsetAnalogVoltageOutputs();
      } else {
        setAnalogVoltageOutputs((java.util.List<java.lang.Double>)value);
      }
      break;

    case ANALOG_CURRENT_INPUTS:
      if (value == null) {
        unsetAnalogCurrentInputs();
      } else {
        setAnalogCurrentInputs((java.util.List<java.lang.Double>)value);
      }
      break;

    case ANALOG_VOLTAGE_INPUTS:
      if (value == null) {
        unsetAnalogVoltageInputs();
      } else {
        setAnalogVoltageInputs((java.util.List<java.lang.Double>)value);
      }
      break;

    case DIGITAL_INPUTS:
      if (value == null) {
        unsetDigitalInputs();
      } else {
        setDigitalInputs((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case DIGITAL_OUTPUTS:
      if (value == null) {
        unsetDigitalOutputs();
      } else {
        setDigitalOutputs((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case TOOL_IOIN:
      if (value == null) {
        unsetToolIOIn();
      } else {
        setToolIOIn((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case TOOL_IOOUT:
      if (value == null) {
        unsetToolIOOut();
      } else {
        setToolIOOut((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case TOOL_BUTTON:
      if (value == null) {
        unsetToolButton();
      } else {
        setToolButton((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case FUN_REGISTER_INPUTS:
      if (value == null) {
        unsetFunRegisterInputs();
      } else {
        setFunRegisterInputs((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case FUN_REGISTER_OUTPUTS:
      if (value == null) {
        unsetFunRegisterOutputs();
      } else {
        setFunRegisterOutputs((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case BOOL_REGISTER_INPUTS:
      if (value == null) {
        unsetBoolRegisterInputs();
      } else {
        setBoolRegisterInputs((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case BOOL_REGISTER_OUTPUTS:
      if (value == null) {
        unsetBoolRegisterOutputs();
      } else {
        setBoolRegisterOutputs((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case WORD_REGISTER_INPUTS:
      if (value == null) {
        unsetWordRegisterInputs();
      } else {
        setWordRegisterInputs((java.util.List<java.lang.Short>)value);
      }
      break;

    case WORD_REGISTER_OUTPUTS:
      if (value == null) {
        unsetWordRegisterOutputs();
      } else {
        setWordRegisterOutputs((java.util.List<java.lang.Short>)value);
      }
      break;

    case FLOAT_REGISTER_INPUTS:
      if (value == null) {
        unsetFloatRegisterInputs();
      } else {
        setFloatRegisterInputs((java.util.List<java.lang.Double>)value);
      }
      break;

    case FLOAT_REGISTER_OUTPUTS:
      if (value == null) {
        unsetFloatRegisterOutputs();
      } else {
        setFloatRegisterOutputs((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ANALOG_CURRENT_OUTPUTS:
      return getAnalogCurrentOutputs();

    case ANALOG_VOLTAGE_OUTPUTS:
      return getAnalogVoltageOutputs();

    case ANALOG_CURRENT_INPUTS:
      return getAnalogCurrentInputs();

    case ANALOG_VOLTAGE_INPUTS:
      return getAnalogVoltageInputs();

    case DIGITAL_INPUTS:
      return getDigitalInputs();

    case DIGITAL_OUTPUTS:
      return getDigitalOutputs();

    case TOOL_IOIN:
      return getToolIOIn();

    case TOOL_IOOUT:
      return getToolIOOut();

    case TOOL_BUTTON:
      return getToolButton();

    case FUN_REGISTER_INPUTS:
      return getFunRegisterInputs();

    case FUN_REGISTER_OUTPUTS:
      return getFunRegisterOutputs();

    case BOOL_REGISTER_INPUTS:
      return getBoolRegisterInputs();

    case BOOL_REGISTER_OUTPUTS:
      return getBoolRegisterOutputs();

    case WORD_REGISTER_INPUTS:
      return getWordRegisterInputs();

    case WORD_REGISTER_OUTPUTS:
      return getWordRegisterOutputs();

    case FLOAT_REGISTER_INPUTS:
      return getFloatRegisterInputs();

    case FLOAT_REGISTER_OUTPUTS:
      return getFloatRegisterOutputs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ANALOG_CURRENT_OUTPUTS:
      return isSetAnalogCurrentOutputs();
    case ANALOG_VOLTAGE_OUTPUTS:
      return isSetAnalogVoltageOutputs();
    case ANALOG_CURRENT_INPUTS:
      return isSetAnalogCurrentInputs();
    case ANALOG_VOLTAGE_INPUTS:
      return isSetAnalogVoltageInputs();
    case DIGITAL_INPUTS:
      return isSetDigitalInputs();
    case DIGITAL_OUTPUTS:
      return isSetDigitalOutputs();
    case TOOL_IOIN:
      return isSetToolIOIn();
    case TOOL_IOOUT:
      return isSetToolIOOut();
    case TOOL_BUTTON:
      return isSetToolButton();
    case FUN_REGISTER_INPUTS:
      return isSetFunRegisterInputs();
    case FUN_REGISTER_OUTPUTS:
      return isSetFunRegisterOutputs();
    case BOOL_REGISTER_INPUTS:
      return isSetBoolRegisterInputs();
    case BOOL_REGISTER_OUTPUTS:
      return isSetBoolRegisterOutputs();
    case WORD_REGISTER_INPUTS:
      return isSetWordRegisterInputs();
    case WORD_REGISTER_OUTPUTS:
      return isSetWordRegisterOutputs();
    case FLOAT_REGISTER_INPUTS:
      return isSetFloatRegisterInputs();
    case FLOAT_REGISTER_OUTPUTS:
      return isSetFloatRegisterOutputs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof IOStatus)
      return this.equals((IOStatus)that);
    return false;
  }

  public boolean equals(IOStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_analogCurrentOutputs = true && this.isSetAnalogCurrentOutputs();
    boolean that_present_analogCurrentOutputs = true && that.isSetAnalogCurrentOutputs();
    if (this_present_analogCurrentOutputs || that_present_analogCurrentOutputs) {
      if (!(this_present_analogCurrentOutputs && that_present_analogCurrentOutputs))
        return false;
      if (!this.analogCurrentOutputs.equals(that.analogCurrentOutputs))
        return false;
    }

    boolean this_present_analogVoltageOutputs = true && this.isSetAnalogVoltageOutputs();
    boolean that_present_analogVoltageOutputs = true && that.isSetAnalogVoltageOutputs();
    if (this_present_analogVoltageOutputs || that_present_analogVoltageOutputs) {
      if (!(this_present_analogVoltageOutputs && that_present_analogVoltageOutputs))
        return false;
      if (!this.analogVoltageOutputs.equals(that.analogVoltageOutputs))
        return false;
    }

    boolean this_present_analogCurrentInputs = true && this.isSetAnalogCurrentInputs();
    boolean that_present_analogCurrentInputs = true && that.isSetAnalogCurrentInputs();
    if (this_present_analogCurrentInputs || that_present_analogCurrentInputs) {
      if (!(this_present_analogCurrentInputs && that_present_analogCurrentInputs))
        return false;
      if (!this.analogCurrentInputs.equals(that.analogCurrentInputs))
        return false;
    }

    boolean this_present_analogVoltageInputs = true && this.isSetAnalogVoltageInputs();
    boolean that_present_analogVoltageInputs = true && that.isSetAnalogVoltageInputs();
    if (this_present_analogVoltageInputs || that_present_analogVoltageInputs) {
      if (!(this_present_analogVoltageInputs && that_present_analogVoltageInputs))
        return false;
      if (!this.analogVoltageInputs.equals(that.analogVoltageInputs))
        return false;
    }

    boolean this_present_digitalInputs = true && this.isSetDigitalInputs();
    boolean that_present_digitalInputs = true && that.isSetDigitalInputs();
    if (this_present_digitalInputs || that_present_digitalInputs) {
      if (!(this_present_digitalInputs && that_present_digitalInputs))
        return false;
      if (!this.digitalInputs.equals(that.digitalInputs))
        return false;
    }

    boolean this_present_digitalOutputs = true && this.isSetDigitalOutputs();
    boolean that_present_digitalOutputs = true && that.isSetDigitalOutputs();
    if (this_present_digitalOutputs || that_present_digitalOutputs) {
      if (!(this_present_digitalOutputs && that_present_digitalOutputs))
        return false;
      if (!this.digitalOutputs.equals(that.digitalOutputs))
        return false;
    }

    boolean this_present_toolIOIn = true && this.isSetToolIOIn();
    boolean that_present_toolIOIn = true && that.isSetToolIOIn();
    if (this_present_toolIOIn || that_present_toolIOIn) {
      if (!(this_present_toolIOIn && that_present_toolIOIn))
        return false;
      if (!this.toolIOIn.equals(that.toolIOIn))
        return false;
    }

    boolean this_present_toolIOOut = true && this.isSetToolIOOut();
    boolean that_present_toolIOOut = true && that.isSetToolIOOut();
    if (this_present_toolIOOut || that_present_toolIOOut) {
      if (!(this_present_toolIOOut && that_present_toolIOOut))
        return false;
      if (!this.toolIOOut.equals(that.toolIOOut))
        return false;
    }

    boolean this_present_toolButton = true && this.isSetToolButton();
    boolean that_present_toolButton = true && that.isSetToolButton();
    if (this_present_toolButton || that_present_toolButton) {
      if (!(this_present_toolButton && that_present_toolButton))
        return false;
      if (!this.toolButton.equals(that.toolButton))
        return false;
    }

    boolean this_present_funRegisterInputs = true && this.isSetFunRegisterInputs();
    boolean that_present_funRegisterInputs = true && that.isSetFunRegisterInputs();
    if (this_present_funRegisterInputs || that_present_funRegisterInputs) {
      if (!(this_present_funRegisterInputs && that_present_funRegisterInputs))
        return false;
      if (!this.funRegisterInputs.equals(that.funRegisterInputs))
        return false;
    }

    boolean this_present_funRegisterOutputs = true && this.isSetFunRegisterOutputs();
    boolean that_present_funRegisterOutputs = true && that.isSetFunRegisterOutputs();
    if (this_present_funRegisterOutputs || that_present_funRegisterOutputs) {
      if (!(this_present_funRegisterOutputs && that_present_funRegisterOutputs))
        return false;
      if (!this.funRegisterOutputs.equals(that.funRegisterOutputs))
        return false;
    }

    boolean this_present_boolRegisterInputs = true && this.isSetBoolRegisterInputs();
    boolean that_present_boolRegisterInputs = true && that.isSetBoolRegisterInputs();
    if (this_present_boolRegisterInputs || that_present_boolRegisterInputs) {
      if (!(this_present_boolRegisterInputs && that_present_boolRegisterInputs))
        return false;
      if (!this.boolRegisterInputs.equals(that.boolRegisterInputs))
        return false;
    }

    boolean this_present_boolRegisterOutputs = true && this.isSetBoolRegisterOutputs();
    boolean that_present_boolRegisterOutputs = true && that.isSetBoolRegisterOutputs();
    if (this_present_boolRegisterOutputs || that_present_boolRegisterOutputs) {
      if (!(this_present_boolRegisterOutputs && that_present_boolRegisterOutputs))
        return false;
      if (!this.boolRegisterOutputs.equals(that.boolRegisterOutputs))
        return false;
    }

    boolean this_present_wordRegisterInputs = true && this.isSetWordRegisterInputs();
    boolean that_present_wordRegisterInputs = true && that.isSetWordRegisterInputs();
    if (this_present_wordRegisterInputs || that_present_wordRegisterInputs) {
      if (!(this_present_wordRegisterInputs && that_present_wordRegisterInputs))
        return false;
      if (!this.wordRegisterInputs.equals(that.wordRegisterInputs))
        return false;
    }

    boolean this_present_wordRegisterOutputs = true && this.isSetWordRegisterOutputs();
    boolean that_present_wordRegisterOutputs = true && that.isSetWordRegisterOutputs();
    if (this_present_wordRegisterOutputs || that_present_wordRegisterOutputs) {
      if (!(this_present_wordRegisterOutputs && that_present_wordRegisterOutputs))
        return false;
      if (!this.wordRegisterOutputs.equals(that.wordRegisterOutputs))
        return false;
    }

    boolean this_present_floatRegisterInputs = true && this.isSetFloatRegisterInputs();
    boolean that_present_floatRegisterInputs = true && that.isSetFloatRegisterInputs();
    if (this_present_floatRegisterInputs || that_present_floatRegisterInputs) {
      if (!(this_present_floatRegisterInputs && that_present_floatRegisterInputs))
        return false;
      if (!this.floatRegisterInputs.equals(that.floatRegisterInputs))
        return false;
    }

    boolean this_present_floatRegisterOutputs = true && this.isSetFloatRegisterOutputs();
    boolean that_present_floatRegisterOutputs = true && that.isSetFloatRegisterOutputs();
    if (this_present_floatRegisterOutputs || that_present_floatRegisterOutputs) {
      if (!(this_present_floatRegisterOutputs && that_present_floatRegisterOutputs))
        return false;
      if (!this.floatRegisterOutputs.equals(that.floatRegisterOutputs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAnalogCurrentOutputs()) ? 131071 : 524287);
    if (isSetAnalogCurrentOutputs())
      hashCode = hashCode * 8191 + analogCurrentOutputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnalogVoltageOutputs()) ? 131071 : 524287);
    if (isSetAnalogVoltageOutputs())
      hashCode = hashCode * 8191 + analogVoltageOutputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnalogCurrentInputs()) ? 131071 : 524287);
    if (isSetAnalogCurrentInputs())
      hashCode = hashCode * 8191 + analogCurrentInputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnalogVoltageInputs()) ? 131071 : 524287);
    if (isSetAnalogVoltageInputs())
      hashCode = hashCode * 8191 + analogVoltageInputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetDigitalInputs()) ? 131071 : 524287);
    if (isSetDigitalInputs())
      hashCode = hashCode * 8191 + digitalInputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetDigitalOutputs()) ? 131071 : 524287);
    if (isSetDigitalOutputs())
      hashCode = hashCode * 8191 + digitalOutputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetToolIOIn()) ? 131071 : 524287);
    if (isSetToolIOIn())
      hashCode = hashCode * 8191 + toolIOIn.hashCode();

    hashCode = hashCode * 8191 + ((isSetToolIOOut()) ? 131071 : 524287);
    if (isSetToolIOOut())
      hashCode = hashCode * 8191 + toolIOOut.hashCode();

    hashCode = hashCode * 8191 + ((isSetToolButton()) ? 131071 : 524287);
    if (isSetToolButton())
      hashCode = hashCode * 8191 + toolButton.hashCode();

    hashCode = hashCode * 8191 + ((isSetFunRegisterInputs()) ? 131071 : 524287);
    if (isSetFunRegisterInputs())
      hashCode = hashCode * 8191 + funRegisterInputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetFunRegisterOutputs()) ? 131071 : 524287);
    if (isSetFunRegisterOutputs())
      hashCode = hashCode * 8191 + funRegisterOutputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetBoolRegisterInputs()) ? 131071 : 524287);
    if (isSetBoolRegisterInputs())
      hashCode = hashCode * 8191 + boolRegisterInputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetBoolRegisterOutputs()) ? 131071 : 524287);
    if (isSetBoolRegisterOutputs())
      hashCode = hashCode * 8191 + boolRegisterOutputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetWordRegisterInputs()) ? 131071 : 524287);
    if (isSetWordRegisterInputs())
      hashCode = hashCode * 8191 + wordRegisterInputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetWordRegisterOutputs()) ? 131071 : 524287);
    if (isSetWordRegisterOutputs())
      hashCode = hashCode * 8191 + wordRegisterOutputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetFloatRegisterInputs()) ? 131071 : 524287);
    if (isSetFloatRegisterInputs())
      hashCode = hashCode * 8191 + floatRegisterInputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetFloatRegisterOutputs()) ? 131071 : 524287);
    if (isSetFloatRegisterOutputs())
      hashCode = hashCode * 8191 + floatRegisterOutputs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(IOStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAnalogCurrentOutputs()).compareTo(other.isSetAnalogCurrentOutputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalogCurrentOutputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analogCurrentOutputs, other.analogCurrentOutputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnalogVoltageOutputs()).compareTo(other.isSetAnalogVoltageOutputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalogVoltageOutputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analogVoltageOutputs, other.analogVoltageOutputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnalogCurrentInputs()).compareTo(other.isSetAnalogCurrentInputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalogCurrentInputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analogCurrentInputs, other.analogCurrentInputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnalogVoltageInputs()).compareTo(other.isSetAnalogVoltageInputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalogVoltageInputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analogVoltageInputs, other.analogVoltageInputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDigitalInputs()).compareTo(other.isSetDigitalInputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigitalInputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digitalInputs, other.digitalInputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDigitalOutputs()).compareTo(other.isSetDigitalOutputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigitalOutputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digitalOutputs, other.digitalOutputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToolIOIn()).compareTo(other.isSetToolIOIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToolIOIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toolIOIn, other.toolIOIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToolIOOut()).compareTo(other.isSetToolIOOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToolIOOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toolIOOut, other.toolIOOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToolButton()).compareTo(other.isSetToolButton());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToolButton()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toolButton, other.toolButton);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFunRegisterInputs()).compareTo(other.isSetFunRegisterInputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunRegisterInputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funRegisterInputs, other.funRegisterInputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFunRegisterOutputs()).compareTo(other.isSetFunRegisterOutputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunRegisterOutputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funRegisterOutputs, other.funRegisterOutputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoolRegisterInputs()).compareTo(other.isSetBoolRegisterInputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolRegisterInputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolRegisterInputs, other.boolRegisterInputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoolRegisterOutputs()).compareTo(other.isSetBoolRegisterOutputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolRegisterOutputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolRegisterOutputs, other.boolRegisterOutputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWordRegisterInputs()).compareTo(other.isSetWordRegisterInputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWordRegisterInputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wordRegisterInputs, other.wordRegisterInputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWordRegisterOutputs()).compareTo(other.isSetWordRegisterOutputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWordRegisterOutputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wordRegisterOutputs, other.wordRegisterOutputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFloatRegisterInputs()).compareTo(other.isSetFloatRegisterInputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloatRegisterInputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floatRegisterInputs, other.floatRegisterInputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFloatRegisterOutputs()).compareTo(other.isSetFloatRegisterOutputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloatRegisterOutputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floatRegisterOutputs, other.floatRegisterOutputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("IOStatus(");
    boolean first = true;

    sb.append("analogCurrentOutputs:");
    if (this.analogCurrentOutputs == null) {
      sb.append("null");
    } else {
      sb.append(this.analogCurrentOutputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("analogVoltageOutputs:");
    if (this.analogVoltageOutputs == null) {
      sb.append("null");
    } else {
      sb.append(this.analogVoltageOutputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("analogCurrentInputs:");
    if (this.analogCurrentInputs == null) {
      sb.append("null");
    } else {
      sb.append(this.analogCurrentInputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("analogVoltageInputs:");
    if (this.analogVoltageInputs == null) {
      sb.append("null");
    } else {
      sb.append(this.analogVoltageInputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("digitalInputs:");
    if (this.digitalInputs == null) {
      sb.append("null");
    } else {
      sb.append(this.digitalInputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("digitalOutputs:");
    if (this.digitalOutputs == null) {
      sb.append("null");
    } else {
      sb.append(this.digitalOutputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toolIOIn:");
    if (this.toolIOIn == null) {
      sb.append("null");
    } else {
      sb.append(this.toolIOIn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toolIOOut:");
    if (this.toolIOOut == null) {
      sb.append("null");
    } else {
      sb.append(this.toolIOOut);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toolButton:");
    if (this.toolButton == null) {
      sb.append("null");
    } else {
      sb.append(this.toolButton);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("funRegisterInputs:");
    if (this.funRegisterInputs == null) {
      sb.append("null");
    } else {
      sb.append(this.funRegisterInputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("funRegisterOutputs:");
    if (this.funRegisterOutputs == null) {
      sb.append("null");
    } else {
      sb.append(this.funRegisterOutputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("boolRegisterInputs:");
    if (this.boolRegisterInputs == null) {
      sb.append("null");
    } else {
      sb.append(this.boolRegisterInputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("boolRegisterOutputs:");
    if (this.boolRegisterOutputs == null) {
      sb.append("null");
    } else {
      sb.append(this.boolRegisterOutputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wordRegisterInputs:");
    if (this.wordRegisterInputs == null) {
      sb.append("null");
    } else {
      sb.append(this.wordRegisterInputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wordRegisterOutputs:");
    if (this.wordRegisterOutputs == null) {
      sb.append("null");
    } else {
      sb.append(this.wordRegisterOutputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("floatRegisterInputs:");
    if (this.floatRegisterInputs == null) {
      sb.append("null");
    } else {
      sb.append(this.floatRegisterInputs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("floatRegisterOutputs:");
    if (this.floatRegisterOutputs == null) {
      sb.append("null");
    } else {
      sb.append(this.floatRegisterOutputs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (analogCurrentOutputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'analogCurrentOutputs' was not present! Struct: " + toString());
    }
    if (analogVoltageOutputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'analogVoltageOutputs' was not present! Struct: " + toString());
    }
    if (analogCurrentInputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'analogCurrentInputs' was not present! Struct: " + toString());
    }
    if (analogVoltageInputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'analogVoltageInputs' was not present! Struct: " + toString());
    }
    if (digitalInputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'digitalInputs' was not present! Struct: " + toString());
    }
    if (digitalOutputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'digitalOutputs' was not present! Struct: " + toString());
    }
    if (toolIOIn == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toolIOIn' was not present! Struct: " + toString());
    }
    if (toolIOOut == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toolIOOut' was not present! Struct: " + toString());
    }
    if (toolButton == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toolButton' was not present! Struct: " + toString());
    }
    if (funRegisterInputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'funRegisterInputs' was not present! Struct: " + toString());
    }
    if (funRegisterOutputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'funRegisterOutputs' was not present! Struct: " + toString());
    }
    if (boolRegisterInputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'boolRegisterInputs' was not present! Struct: " + toString());
    }
    if (boolRegisterOutputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'boolRegisterOutputs' was not present! Struct: " + toString());
    }
    if (wordRegisterInputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'wordRegisterInputs' was not present! Struct: " + toString());
    }
    if (wordRegisterOutputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'wordRegisterOutputs' was not present! Struct: " + toString());
    }
    if (floatRegisterInputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'floatRegisterInputs' was not present! Struct: " + toString());
    }
    if (floatRegisterOutputs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'floatRegisterOutputs' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IOStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IOStatusStandardScheme getScheme() {
      return new IOStatusStandardScheme();
    }
  }

  private static class IOStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<IOStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IOStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANALOG_CURRENT_OUTPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                struct.analogCurrentOutputs = new java.util.ArrayList<java.lang.Double>(_list128.size);
                double _elem129;
                for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                {
                  _elem129 = iprot.readDouble();
                  struct.analogCurrentOutputs.add(_elem129);
                }
                iprot.readListEnd();
              }
              struct.setAnalogCurrentOutputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ANALOG_VOLTAGE_OUTPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                struct.analogVoltageOutputs = new java.util.ArrayList<java.lang.Double>(_list131.size);
                double _elem132;
                for (int _i133 = 0; _i133 < _list131.size; ++_i133)
                {
                  _elem132 = iprot.readDouble();
                  struct.analogVoltageOutputs.add(_elem132);
                }
                iprot.readListEnd();
              }
              struct.setAnalogVoltageOutputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANALOG_CURRENT_INPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                struct.analogCurrentInputs = new java.util.ArrayList<java.lang.Double>(_list134.size);
                double _elem135;
                for (int _i136 = 0; _i136 < _list134.size; ++_i136)
                {
                  _elem135 = iprot.readDouble();
                  struct.analogCurrentInputs.add(_elem135);
                }
                iprot.readListEnd();
              }
              struct.setAnalogCurrentInputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ANALOG_VOLTAGE_INPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list137 = iprot.readListBegin();
                struct.analogVoltageInputs = new java.util.ArrayList<java.lang.Double>(_list137.size);
                double _elem138;
                for (int _i139 = 0; _i139 < _list137.size; ++_i139)
                {
                  _elem138 = iprot.readDouble();
                  struct.analogVoltageInputs.add(_elem138);
                }
                iprot.readListEnd();
              }
              struct.setAnalogVoltageInputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIGITAL_INPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                struct.digitalInputs = new java.util.ArrayList<java.lang.Boolean>(_list140.size);
                boolean _elem141;
                for (int _i142 = 0; _i142 < _list140.size; ++_i142)
                {
                  _elem141 = iprot.readBool();
                  struct.digitalInputs.add(_elem141);
                }
                iprot.readListEnd();
              }
              struct.setDigitalInputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIGITAL_OUTPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list143 = iprot.readListBegin();
                struct.digitalOutputs = new java.util.ArrayList<java.lang.Boolean>(_list143.size);
                boolean _elem144;
                for (int _i145 = 0; _i145 < _list143.size; ++_i145)
                {
                  _elem144 = iprot.readBool();
                  struct.digitalOutputs.add(_elem144);
                }
                iprot.readListEnd();
              }
              struct.setDigitalOutputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOOL_IOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                struct.toolIOIn = new java.util.ArrayList<java.lang.Boolean>(_list146.size);
                boolean _elem147;
                for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                {
                  _elem147 = iprot.readBool();
                  struct.toolIOIn.add(_elem147);
                }
                iprot.readListEnd();
              }
              struct.setToolIOInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOOL_IOOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list149 = iprot.readListBegin();
                struct.toolIOOut = new java.util.ArrayList<java.lang.Boolean>(_list149.size);
                boolean _elem150;
                for (int _i151 = 0; _i151 < _list149.size; ++_i151)
                {
                  _elem150 = iprot.readBool();
                  struct.toolIOOut.add(_elem150);
                }
                iprot.readListEnd();
              }
              struct.setToolIOOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOOL_BUTTON
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                struct.toolButton = new java.util.ArrayList<java.lang.Boolean>(_list152.size);
                boolean _elem153;
                for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                {
                  _elem153 = iprot.readBool();
                  struct.toolButton.add(_elem153);
                }
                iprot.readListEnd();
              }
              struct.setToolButtonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FUN_REGISTER_INPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                struct.funRegisterInputs = new java.util.ArrayList<java.lang.Boolean>(_list155.size);
                boolean _elem156;
                for (int _i157 = 0; _i157 < _list155.size; ++_i157)
                {
                  _elem156 = iprot.readBool();
                  struct.funRegisterInputs.add(_elem156);
                }
                iprot.readListEnd();
              }
              struct.setFunRegisterInputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FUN_REGISTER_OUTPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                struct.funRegisterOutputs = new java.util.ArrayList<java.lang.Boolean>(_list158.size);
                boolean _elem159;
                for (int _i160 = 0; _i160 < _list158.size; ++_i160)
                {
                  _elem159 = iprot.readBool();
                  struct.funRegisterOutputs.add(_elem159);
                }
                iprot.readListEnd();
              }
              struct.setFunRegisterOutputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BOOL_REGISTER_INPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list161 = iprot.readListBegin();
                struct.boolRegisterInputs = new java.util.ArrayList<java.lang.Boolean>(_list161.size);
                boolean _elem162;
                for (int _i163 = 0; _i163 < _list161.size; ++_i163)
                {
                  _elem162 = iprot.readBool();
                  struct.boolRegisterInputs.add(_elem162);
                }
                iprot.readListEnd();
              }
              struct.setBoolRegisterInputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BOOL_REGISTER_OUTPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
                struct.boolRegisterOutputs = new java.util.ArrayList<java.lang.Boolean>(_list164.size);
                boolean _elem165;
                for (int _i166 = 0; _i166 < _list164.size; ++_i166)
                {
                  _elem165 = iprot.readBool();
                  struct.boolRegisterOutputs.add(_elem165);
                }
                iprot.readListEnd();
              }
              struct.setBoolRegisterOutputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WORD_REGISTER_INPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list167 = iprot.readListBegin();
                struct.wordRegisterInputs = new java.util.ArrayList<java.lang.Short>(_list167.size);
                short _elem168;
                for (int _i169 = 0; _i169 < _list167.size; ++_i169)
                {
                  _elem168 = iprot.readI16();
                  struct.wordRegisterInputs.add(_elem168);
                }
                iprot.readListEnd();
              }
              struct.setWordRegisterInputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORD_REGISTER_OUTPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list170 = iprot.readListBegin();
                struct.wordRegisterOutputs = new java.util.ArrayList<java.lang.Short>(_list170.size);
                short _elem171;
                for (int _i172 = 0; _i172 < _list170.size; ++_i172)
                {
                  _elem171 = iprot.readI16();
                  struct.wordRegisterOutputs.add(_elem171);
                }
                iprot.readListEnd();
              }
              struct.setWordRegisterOutputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FLOAT_REGISTER_INPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list173 = iprot.readListBegin();
                struct.floatRegisterInputs = new java.util.ArrayList<java.lang.Double>(_list173.size);
                double _elem174;
                for (int _i175 = 0; _i175 < _list173.size; ++_i175)
                {
                  _elem174 = iprot.readDouble();
                  struct.floatRegisterInputs.add(_elem174);
                }
                iprot.readListEnd();
              }
              struct.setFloatRegisterInputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FLOAT_REGISTER_OUTPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                struct.floatRegisterOutputs = new java.util.ArrayList<java.lang.Double>(_list176.size);
                double _elem177;
                for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                {
                  _elem177 = iprot.readDouble();
                  struct.floatRegisterOutputs.add(_elem177);
                }
                iprot.readListEnd();
              }
              struct.setFloatRegisterOutputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IOStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.analogCurrentOutputs != null) {
        oprot.writeFieldBegin(ANALOG_CURRENT_OUTPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.analogCurrentOutputs.size()));
          for (double _iter179 : struct.analogCurrentOutputs)
          {
            oprot.writeDouble(_iter179);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.analogVoltageOutputs != null) {
        oprot.writeFieldBegin(ANALOG_VOLTAGE_OUTPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.analogVoltageOutputs.size()));
          for (double _iter180 : struct.analogVoltageOutputs)
          {
            oprot.writeDouble(_iter180);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.analogCurrentInputs != null) {
        oprot.writeFieldBegin(ANALOG_CURRENT_INPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.analogCurrentInputs.size()));
          for (double _iter181 : struct.analogCurrentInputs)
          {
            oprot.writeDouble(_iter181);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.analogVoltageInputs != null) {
        oprot.writeFieldBegin(ANALOG_VOLTAGE_INPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.analogVoltageInputs.size()));
          for (double _iter182 : struct.analogVoltageInputs)
          {
            oprot.writeDouble(_iter182);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.digitalInputs != null) {
        oprot.writeFieldBegin(DIGITAL_INPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.digitalInputs.size()));
          for (boolean _iter183 : struct.digitalInputs)
          {
            oprot.writeBool(_iter183);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.digitalOutputs != null) {
        oprot.writeFieldBegin(DIGITAL_OUTPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.digitalOutputs.size()));
          for (boolean _iter184 : struct.digitalOutputs)
          {
            oprot.writeBool(_iter184);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.toolIOIn != null) {
        oprot.writeFieldBegin(TOOL_IOIN_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.toolIOIn.size()));
          for (boolean _iter185 : struct.toolIOIn)
          {
            oprot.writeBool(_iter185);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.toolIOOut != null) {
        oprot.writeFieldBegin(TOOL_IOOUT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.toolIOOut.size()));
          for (boolean _iter186 : struct.toolIOOut)
          {
            oprot.writeBool(_iter186);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.toolButton != null) {
        oprot.writeFieldBegin(TOOL_BUTTON_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.toolButton.size()));
          for (boolean _iter187 : struct.toolButton)
          {
            oprot.writeBool(_iter187);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.funRegisterInputs != null) {
        oprot.writeFieldBegin(FUN_REGISTER_INPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.funRegisterInputs.size()));
          for (boolean _iter188 : struct.funRegisterInputs)
          {
            oprot.writeBool(_iter188);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.funRegisterOutputs != null) {
        oprot.writeFieldBegin(FUN_REGISTER_OUTPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.funRegisterOutputs.size()));
          for (boolean _iter189 : struct.funRegisterOutputs)
          {
            oprot.writeBool(_iter189);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.boolRegisterInputs != null) {
        oprot.writeFieldBegin(BOOL_REGISTER_INPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.boolRegisterInputs.size()));
          for (boolean _iter190 : struct.boolRegisterInputs)
          {
            oprot.writeBool(_iter190);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.boolRegisterOutputs != null) {
        oprot.writeFieldBegin(BOOL_REGISTER_OUTPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.boolRegisterOutputs.size()));
          for (boolean _iter191 : struct.boolRegisterOutputs)
          {
            oprot.writeBool(_iter191);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.wordRegisterInputs != null) {
        oprot.writeFieldBegin(WORD_REGISTER_INPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.wordRegisterInputs.size()));
          for (short _iter192 : struct.wordRegisterInputs)
          {
            oprot.writeI16(_iter192);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.wordRegisterOutputs != null) {
        oprot.writeFieldBegin(WORD_REGISTER_OUTPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.wordRegisterOutputs.size()));
          for (short _iter193 : struct.wordRegisterOutputs)
          {
            oprot.writeI16(_iter193);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.floatRegisterInputs != null) {
        oprot.writeFieldBegin(FLOAT_REGISTER_INPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.floatRegisterInputs.size()));
          for (double _iter194 : struct.floatRegisterInputs)
          {
            oprot.writeDouble(_iter194);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.floatRegisterOutputs != null) {
        oprot.writeFieldBegin(FLOAT_REGISTER_OUTPUTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.floatRegisterOutputs.size()));
          for (double _iter195 : struct.floatRegisterOutputs)
          {
            oprot.writeDouble(_iter195);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IOStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IOStatusTupleScheme getScheme() {
      return new IOStatusTupleScheme();
    }
  }

  private static class IOStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<IOStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IOStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.analogCurrentOutputs.size());
        for (double _iter196 : struct.analogCurrentOutputs)
        {
          oprot.writeDouble(_iter196);
        }
      }
      {
        oprot.writeI32(struct.analogVoltageOutputs.size());
        for (double _iter197 : struct.analogVoltageOutputs)
        {
          oprot.writeDouble(_iter197);
        }
      }
      {
        oprot.writeI32(struct.analogCurrentInputs.size());
        for (double _iter198 : struct.analogCurrentInputs)
        {
          oprot.writeDouble(_iter198);
        }
      }
      {
        oprot.writeI32(struct.analogVoltageInputs.size());
        for (double _iter199 : struct.analogVoltageInputs)
        {
          oprot.writeDouble(_iter199);
        }
      }
      {
        oprot.writeI32(struct.digitalInputs.size());
        for (boolean _iter200 : struct.digitalInputs)
        {
          oprot.writeBool(_iter200);
        }
      }
      {
        oprot.writeI32(struct.digitalOutputs.size());
        for (boolean _iter201 : struct.digitalOutputs)
        {
          oprot.writeBool(_iter201);
        }
      }
      {
        oprot.writeI32(struct.toolIOIn.size());
        for (boolean _iter202 : struct.toolIOIn)
        {
          oprot.writeBool(_iter202);
        }
      }
      {
        oprot.writeI32(struct.toolIOOut.size());
        for (boolean _iter203 : struct.toolIOOut)
        {
          oprot.writeBool(_iter203);
        }
      }
      {
        oprot.writeI32(struct.toolButton.size());
        for (boolean _iter204 : struct.toolButton)
        {
          oprot.writeBool(_iter204);
        }
      }
      {
        oprot.writeI32(struct.funRegisterInputs.size());
        for (boolean _iter205 : struct.funRegisterInputs)
        {
          oprot.writeBool(_iter205);
        }
      }
      {
        oprot.writeI32(struct.funRegisterOutputs.size());
        for (boolean _iter206 : struct.funRegisterOutputs)
        {
          oprot.writeBool(_iter206);
        }
      }
      {
        oprot.writeI32(struct.boolRegisterInputs.size());
        for (boolean _iter207 : struct.boolRegisterInputs)
        {
          oprot.writeBool(_iter207);
        }
      }
      {
        oprot.writeI32(struct.boolRegisterOutputs.size());
        for (boolean _iter208 : struct.boolRegisterOutputs)
        {
          oprot.writeBool(_iter208);
        }
      }
      {
        oprot.writeI32(struct.wordRegisterInputs.size());
        for (short _iter209 : struct.wordRegisterInputs)
        {
          oprot.writeI16(_iter209);
        }
      }
      {
        oprot.writeI32(struct.wordRegisterOutputs.size());
        for (short _iter210 : struct.wordRegisterOutputs)
        {
          oprot.writeI16(_iter210);
        }
      }
      {
        oprot.writeI32(struct.floatRegisterInputs.size());
        for (double _iter211 : struct.floatRegisterInputs)
        {
          oprot.writeDouble(_iter211);
        }
      }
      {
        oprot.writeI32(struct.floatRegisterOutputs.size());
        for (double _iter212 : struct.floatRegisterOutputs)
        {
          oprot.writeDouble(_iter212);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IOStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.analogCurrentOutputs = new java.util.ArrayList<java.lang.Double>(_list213.size);
        double _elem214;
        for (int _i215 = 0; _i215 < _list213.size; ++_i215)
        {
          _elem214 = iprot.readDouble();
          struct.analogCurrentOutputs.add(_elem214);
        }
      }
      struct.setAnalogCurrentOutputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list216 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.analogVoltageOutputs = new java.util.ArrayList<java.lang.Double>(_list216.size);
        double _elem217;
        for (int _i218 = 0; _i218 < _list216.size; ++_i218)
        {
          _elem217 = iprot.readDouble();
          struct.analogVoltageOutputs.add(_elem217);
        }
      }
      struct.setAnalogVoltageOutputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list219 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.analogCurrentInputs = new java.util.ArrayList<java.lang.Double>(_list219.size);
        double _elem220;
        for (int _i221 = 0; _i221 < _list219.size; ++_i221)
        {
          _elem220 = iprot.readDouble();
          struct.analogCurrentInputs.add(_elem220);
        }
      }
      struct.setAnalogCurrentInputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list222 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.analogVoltageInputs = new java.util.ArrayList<java.lang.Double>(_list222.size);
        double _elem223;
        for (int _i224 = 0; _i224 < _list222.size; ++_i224)
        {
          _elem223 = iprot.readDouble();
          struct.analogVoltageInputs.add(_elem223);
        }
      }
      struct.setAnalogVoltageInputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list225 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.digitalInputs = new java.util.ArrayList<java.lang.Boolean>(_list225.size);
        boolean _elem226;
        for (int _i227 = 0; _i227 < _list225.size; ++_i227)
        {
          _elem226 = iprot.readBool();
          struct.digitalInputs.add(_elem226);
        }
      }
      struct.setDigitalInputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list228 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.digitalOutputs = new java.util.ArrayList<java.lang.Boolean>(_list228.size);
        boolean _elem229;
        for (int _i230 = 0; _i230 < _list228.size; ++_i230)
        {
          _elem229 = iprot.readBool();
          struct.digitalOutputs.add(_elem229);
        }
      }
      struct.setDigitalOutputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list231 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.toolIOIn = new java.util.ArrayList<java.lang.Boolean>(_list231.size);
        boolean _elem232;
        for (int _i233 = 0; _i233 < _list231.size; ++_i233)
        {
          _elem232 = iprot.readBool();
          struct.toolIOIn.add(_elem232);
        }
      }
      struct.setToolIOInIsSet(true);
      {
        org.apache.thrift.protocol.TList _list234 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.toolIOOut = new java.util.ArrayList<java.lang.Boolean>(_list234.size);
        boolean _elem235;
        for (int _i236 = 0; _i236 < _list234.size; ++_i236)
        {
          _elem235 = iprot.readBool();
          struct.toolIOOut.add(_elem235);
        }
      }
      struct.setToolIOOutIsSet(true);
      {
        org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.toolButton = new java.util.ArrayList<java.lang.Boolean>(_list237.size);
        boolean _elem238;
        for (int _i239 = 0; _i239 < _list237.size; ++_i239)
        {
          _elem238 = iprot.readBool();
          struct.toolButton.add(_elem238);
        }
      }
      struct.setToolButtonIsSet(true);
      {
        org.apache.thrift.protocol.TList _list240 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.funRegisterInputs = new java.util.ArrayList<java.lang.Boolean>(_list240.size);
        boolean _elem241;
        for (int _i242 = 0; _i242 < _list240.size; ++_i242)
        {
          _elem241 = iprot.readBool();
          struct.funRegisterInputs.add(_elem241);
        }
      }
      struct.setFunRegisterInputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list243 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.funRegisterOutputs = new java.util.ArrayList<java.lang.Boolean>(_list243.size);
        boolean _elem244;
        for (int _i245 = 0; _i245 < _list243.size; ++_i245)
        {
          _elem244 = iprot.readBool();
          struct.funRegisterOutputs.add(_elem244);
        }
      }
      struct.setFunRegisterOutputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list246 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.boolRegisterInputs = new java.util.ArrayList<java.lang.Boolean>(_list246.size);
        boolean _elem247;
        for (int _i248 = 0; _i248 < _list246.size; ++_i248)
        {
          _elem247 = iprot.readBool();
          struct.boolRegisterInputs.add(_elem247);
        }
      }
      struct.setBoolRegisterInputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list249 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.boolRegisterOutputs = new java.util.ArrayList<java.lang.Boolean>(_list249.size);
        boolean _elem250;
        for (int _i251 = 0; _i251 < _list249.size; ++_i251)
        {
          _elem250 = iprot.readBool();
          struct.boolRegisterOutputs.add(_elem250);
        }
      }
      struct.setBoolRegisterOutputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list252 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
        struct.wordRegisterInputs = new java.util.ArrayList<java.lang.Short>(_list252.size);
        short _elem253;
        for (int _i254 = 0; _i254 < _list252.size; ++_i254)
        {
          _elem253 = iprot.readI16();
          struct.wordRegisterInputs.add(_elem253);
        }
      }
      struct.setWordRegisterInputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list255 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
        struct.wordRegisterOutputs = new java.util.ArrayList<java.lang.Short>(_list255.size);
        short _elem256;
        for (int _i257 = 0; _i257 < _list255.size; ++_i257)
        {
          _elem256 = iprot.readI16();
          struct.wordRegisterOutputs.add(_elem256);
        }
      }
      struct.setWordRegisterOutputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list258 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.floatRegisterInputs = new java.util.ArrayList<java.lang.Double>(_list258.size);
        double _elem259;
        for (int _i260 = 0; _i260 < _list258.size; ++_i260)
        {
          _elem259 = iprot.readDouble();
          struct.floatRegisterInputs.add(_elem259);
        }
      }
      struct.setFloatRegisterInputsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.floatRegisterOutputs = new java.util.ArrayList<java.lang.Double>(_list261.size);
        double _elem262;
        for (int _i263 = 0; _i263 < _list261.size; ++_i263)
        {
          _elem262 = iprot.readDouble();
          struct.floatRegisterOutputs.add(_elem262);
        }
      }
      struct.setFloatRegisterOutputsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

