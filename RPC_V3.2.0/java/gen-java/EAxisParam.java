/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-01-19")
public class EAxisParam implements org.apache.thrift.TBase<EAxisParam, EAxisParam._Fields>, java.io.Serializable, Cloneable, Comparable<EAxisParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EAxisParam");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REF_VELO_FIELD_DESC = new org.apache.thrift.protocol.TField("ref_velo", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField REF_ACC_FIELD_DESC = new org.apache.thrift.protocol.TField("ref_acc", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField REF_JERK_FIELD_DESC = new org.apache.thrift.protocol.TField("ref_jerk", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_VELO_FIELD_DESC = new org.apache.thrift.protocol.TField("max_velo", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MAX_ACC_FIELD_DESC = new org.apache.thrift.protocol.TField("max_acc", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ENCODER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("encoder_type", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ENCODER_RESOLUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("encoder_resolution", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField POSITION_BIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("position_bias", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField SCREW_LEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("screw_lead", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField INVERT_FIELD_DESC = new org.apache.thrift.protocol.TField("invert", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField POSITION_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("position_limit", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EAxisParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EAxisParamTupleSchemeFactory();

  public int type; // required
  public int mode; // required
  public double ref_velo; // required
  public double ref_acc; // required
  public double ref_jerk; // required
  public double max_velo; // required
  public double max_acc; // required
  public int encoder_type; // required
  public int encoder_resolution; // required
  public double position_bias; // required
  public double screw_lead; // required
  public boolean invert; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> position_limit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    MODE((short)2, "mode"),
    REF_VELO((short)3, "ref_velo"),
    REF_ACC((short)4, "ref_acc"),
    REF_JERK((short)5, "ref_jerk"),
    MAX_VELO((short)6, "max_velo"),
    MAX_ACC((short)7, "max_acc"),
    ENCODER_TYPE((short)8, "encoder_type"),
    ENCODER_RESOLUTION((short)9, "encoder_resolution"),
    POSITION_BIAS((short)10, "position_bias"),
    SCREW_LEAD((short)11, "screw_lead"),
    INVERT((short)12, "invert"),
    POSITION_LIMIT((short)13, "position_limit");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // MODE
          return MODE;
        case 3: // REF_VELO
          return REF_VELO;
        case 4: // REF_ACC
          return REF_ACC;
        case 5: // REF_JERK
          return REF_JERK;
        case 6: // MAX_VELO
          return MAX_VELO;
        case 7: // MAX_ACC
          return MAX_ACC;
        case 8: // ENCODER_TYPE
          return ENCODER_TYPE;
        case 9: // ENCODER_RESOLUTION
          return ENCODER_RESOLUTION;
        case 10: // POSITION_BIAS
          return POSITION_BIAS;
        case 11: // SCREW_LEAD
          return SCREW_LEAD;
        case 12: // INVERT
          return INVERT;
        case 13: // POSITION_LIMIT
          return POSITION_LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __MODE_ISSET_ID = 1;
  private static final int __REF_VELO_ISSET_ID = 2;
  private static final int __REF_ACC_ISSET_ID = 3;
  private static final int __REF_JERK_ISSET_ID = 4;
  private static final int __MAX_VELO_ISSET_ID = 5;
  private static final int __MAX_ACC_ISSET_ID = 6;
  private static final int __ENCODER_TYPE_ISSET_ID = 7;
  private static final int __ENCODER_RESOLUTION_ISSET_ID = 8;
  private static final int __POSITION_BIAS_ISSET_ID = 9;
  private static final int __SCREW_LEAD_ISSET_ID = 10;
  private static final int __INVERT_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_VELO, new org.apache.thrift.meta_data.FieldMetaData("ref_velo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REF_ACC, new org.apache.thrift.meta_data.FieldMetaData("ref_acc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REF_JERK, new org.apache.thrift.meta_data.FieldMetaData("ref_jerk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_VELO, new org.apache.thrift.meta_data.FieldMetaData("max_velo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_ACC, new org.apache.thrift.meta_data.FieldMetaData("max_acc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ENCODER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("encoder_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENCODER_RESOLUTION, new org.apache.thrift.meta_data.FieldMetaData("encoder_resolution", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_BIAS, new org.apache.thrift.meta_data.FieldMetaData("position_bias", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SCREW_LEAD, new org.apache.thrift.meta_data.FieldMetaData("screw_lead", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INVERT, new org.apache.thrift.meta_data.FieldMetaData("invert", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.POSITION_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("position_limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EAxisParam.class, metaDataMap);
  }

  public EAxisParam() {
  }

  public EAxisParam(
    int type,
    int mode,
    double ref_velo,
    double ref_acc,
    double ref_jerk,
    double max_velo,
    double max_acc,
    int encoder_type,
    int encoder_resolution,
    double position_bias,
    double screw_lead,
    boolean invert,
    java.util.List<java.lang.Double> position_limit)
  {
    this();
    this.type = type;
    setTypeIsSet(true);
    this.mode = mode;
    setModeIsSet(true);
    this.ref_velo = ref_velo;
    setRef_veloIsSet(true);
    this.ref_acc = ref_acc;
    setRef_accIsSet(true);
    this.ref_jerk = ref_jerk;
    setRef_jerkIsSet(true);
    this.max_velo = max_velo;
    setMax_veloIsSet(true);
    this.max_acc = max_acc;
    setMax_accIsSet(true);
    this.encoder_type = encoder_type;
    setEncoder_typeIsSet(true);
    this.encoder_resolution = encoder_resolution;
    setEncoder_resolutionIsSet(true);
    this.position_bias = position_bias;
    setPosition_biasIsSet(true);
    this.screw_lead = screw_lead;
    setScrew_leadIsSet(true);
    this.invert = invert;
    setInvertIsSet(true);
    this.position_limit = position_limit;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EAxisParam(EAxisParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.type = other.type;
    this.mode = other.mode;
    this.ref_velo = other.ref_velo;
    this.ref_acc = other.ref_acc;
    this.ref_jerk = other.ref_jerk;
    this.max_velo = other.max_velo;
    this.max_acc = other.max_acc;
    this.encoder_type = other.encoder_type;
    this.encoder_resolution = other.encoder_resolution;
    this.position_bias = other.position_bias;
    this.screw_lead = other.screw_lead;
    this.invert = other.invert;
    if (other.isSetPosition_limit()) {
      java.util.List<java.lang.Double> __this__position_limit = new java.util.ArrayList<java.lang.Double>(other.position_limit);
      this.position_limit = __this__position_limit;
    }
  }

  public EAxisParam deepCopy() {
    return new EAxisParam(this);
  }

  @Override
  public void clear() {
    setTypeIsSet(false);
    this.type = 0;
    setModeIsSet(false);
    this.mode = 0;
    setRef_veloIsSet(false);
    this.ref_velo = 0.0;
    setRef_accIsSet(false);
    this.ref_acc = 0.0;
    setRef_jerkIsSet(false);
    this.ref_jerk = 0.0;
    setMax_veloIsSet(false);
    this.max_velo = 0.0;
    setMax_accIsSet(false);
    this.max_acc = 0.0;
    setEncoder_typeIsSet(false);
    this.encoder_type = 0;
    setEncoder_resolutionIsSet(false);
    this.encoder_resolution = 0;
    setPosition_biasIsSet(false);
    this.position_bias = 0.0;
    setScrew_leadIsSet(false);
    this.screw_lead = 0.0;
    setInvertIsSet(false);
    this.invert = false;
    this.position_limit = null;
  }

  public int getType() {
    return this.type;
  }

  public EAxisParam setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getMode() {
    return this.mode;
  }

  public EAxisParam setMode(int mode) {
    this.mode = mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public double getRef_velo() {
    return this.ref_velo;
  }

  public EAxisParam setRef_velo(double ref_velo) {
    this.ref_velo = ref_velo;
    setRef_veloIsSet(true);
    return this;
  }

  public void unsetRef_velo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REF_VELO_ISSET_ID);
  }

  /** Returns true if field ref_velo is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_velo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REF_VELO_ISSET_ID);
  }

  public void setRef_veloIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REF_VELO_ISSET_ID, value);
  }

  public double getRef_acc() {
    return this.ref_acc;
  }

  public EAxisParam setRef_acc(double ref_acc) {
    this.ref_acc = ref_acc;
    setRef_accIsSet(true);
    return this;
  }

  public void unsetRef_acc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REF_ACC_ISSET_ID);
  }

  /** Returns true if field ref_acc is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_acc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REF_ACC_ISSET_ID);
  }

  public void setRef_accIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REF_ACC_ISSET_ID, value);
  }

  public double getRef_jerk() {
    return this.ref_jerk;
  }

  public EAxisParam setRef_jerk(double ref_jerk) {
    this.ref_jerk = ref_jerk;
    setRef_jerkIsSet(true);
    return this;
  }

  public void unsetRef_jerk() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REF_JERK_ISSET_ID);
  }

  /** Returns true if field ref_jerk is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_jerk() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REF_JERK_ISSET_ID);
  }

  public void setRef_jerkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REF_JERK_ISSET_ID, value);
  }

  public double getMax_velo() {
    return this.max_velo;
  }

  public EAxisParam setMax_velo(double max_velo) {
    this.max_velo = max_velo;
    setMax_veloIsSet(true);
    return this;
  }

  public void unsetMax_velo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_VELO_ISSET_ID);
  }

  /** Returns true if field max_velo is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_velo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_VELO_ISSET_ID);
  }

  public void setMax_veloIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_VELO_ISSET_ID, value);
  }

  public double getMax_acc() {
    return this.max_acc;
  }

  public EAxisParam setMax_acc(double max_acc) {
    this.max_acc = max_acc;
    setMax_accIsSet(true);
    return this;
  }

  public void unsetMax_acc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_ACC_ISSET_ID);
  }

  /** Returns true if field max_acc is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_acc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_ACC_ISSET_ID);
  }

  public void setMax_accIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_ACC_ISSET_ID, value);
  }

  public int getEncoder_type() {
    return this.encoder_type;
  }

  public EAxisParam setEncoder_type(int encoder_type) {
    this.encoder_type = encoder_type;
    setEncoder_typeIsSet(true);
    return this;
  }

  public void unsetEncoder_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCODER_TYPE_ISSET_ID);
  }

  /** Returns true if field encoder_type is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoder_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCODER_TYPE_ISSET_ID);
  }

  public void setEncoder_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCODER_TYPE_ISSET_ID, value);
  }

  public int getEncoder_resolution() {
    return this.encoder_resolution;
  }

  public EAxisParam setEncoder_resolution(int encoder_resolution) {
    this.encoder_resolution = encoder_resolution;
    setEncoder_resolutionIsSet(true);
    return this;
  }

  public void unsetEncoder_resolution() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCODER_RESOLUTION_ISSET_ID);
  }

  /** Returns true if field encoder_resolution is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoder_resolution() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCODER_RESOLUTION_ISSET_ID);
  }

  public void setEncoder_resolutionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCODER_RESOLUTION_ISSET_ID, value);
  }

  public double getPosition_bias() {
    return this.position_bias;
  }

  public EAxisParam setPosition_bias(double position_bias) {
    this.position_bias = position_bias;
    setPosition_biasIsSet(true);
    return this;
  }

  public void unsetPosition_bias() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_BIAS_ISSET_ID);
  }

  /** Returns true if field position_bias is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition_bias() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_BIAS_ISSET_ID);
  }

  public void setPosition_biasIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_BIAS_ISSET_ID, value);
  }

  public double getScrew_lead() {
    return this.screw_lead;
  }

  public EAxisParam setScrew_lead(double screw_lead) {
    this.screw_lead = screw_lead;
    setScrew_leadIsSet(true);
    return this;
  }

  public void unsetScrew_lead() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCREW_LEAD_ISSET_ID);
  }

  /** Returns true if field screw_lead is set (has been assigned a value) and false otherwise */
  public boolean isSetScrew_lead() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCREW_LEAD_ISSET_ID);
  }

  public void setScrew_leadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCREW_LEAD_ISSET_ID, value);
  }

  public boolean isInvert() {
    return this.invert;
  }

  public EAxisParam setInvert(boolean invert) {
    this.invert = invert;
    setInvertIsSet(true);
    return this;
  }

  public void unsetInvert() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INVERT_ISSET_ID);
  }

  /** Returns true if field invert is set (has been assigned a value) and false otherwise */
  public boolean isSetInvert() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INVERT_ISSET_ID);
  }

  public void setInvertIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INVERT_ISSET_ID, value);
  }

  public int getPosition_limitSize() {
    return (this.position_limit == null) ? 0 : this.position_limit.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getPosition_limitIterator() {
    return (this.position_limit == null) ? null : this.position_limit.iterator();
  }

  public void addToPosition_limit(double elem) {
    if (this.position_limit == null) {
      this.position_limit = new java.util.ArrayList<java.lang.Double>();
    }
    this.position_limit.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getPosition_limit() {
    return this.position_limit;
  }

  public EAxisParam setPosition_limit(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> position_limit) {
    this.position_limit = position_limit;
    return this;
  }

  public void unsetPosition_limit() {
    this.position_limit = null;
  }

  /** Returns true if field position_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition_limit() {
    return this.position_limit != null;
  }

  public void setPosition_limitIsSet(boolean value) {
    if (!value) {
      this.position_limit = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.Integer)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((java.lang.Integer)value);
      }
      break;

    case REF_VELO:
      if (value == null) {
        unsetRef_velo();
      } else {
        setRef_velo((java.lang.Double)value);
      }
      break;

    case REF_ACC:
      if (value == null) {
        unsetRef_acc();
      } else {
        setRef_acc((java.lang.Double)value);
      }
      break;

    case REF_JERK:
      if (value == null) {
        unsetRef_jerk();
      } else {
        setRef_jerk((java.lang.Double)value);
      }
      break;

    case MAX_VELO:
      if (value == null) {
        unsetMax_velo();
      } else {
        setMax_velo((java.lang.Double)value);
      }
      break;

    case MAX_ACC:
      if (value == null) {
        unsetMax_acc();
      } else {
        setMax_acc((java.lang.Double)value);
      }
      break;

    case ENCODER_TYPE:
      if (value == null) {
        unsetEncoder_type();
      } else {
        setEncoder_type((java.lang.Integer)value);
      }
      break;

    case ENCODER_RESOLUTION:
      if (value == null) {
        unsetEncoder_resolution();
      } else {
        setEncoder_resolution((java.lang.Integer)value);
      }
      break;

    case POSITION_BIAS:
      if (value == null) {
        unsetPosition_bias();
      } else {
        setPosition_bias((java.lang.Double)value);
      }
      break;

    case SCREW_LEAD:
      if (value == null) {
        unsetScrew_lead();
      } else {
        setScrew_lead((java.lang.Double)value);
      }
      break;

    case INVERT:
      if (value == null) {
        unsetInvert();
      } else {
        setInvert((java.lang.Boolean)value);
      }
      break;

    case POSITION_LIMIT:
      if (value == null) {
        unsetPosition_limit();
      } else {
        setPosition_limit((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case MODE:
      return getMode();

    case REF_VELO:
      return getRef_velo();

    case REF_ACC:
      return getRef_acc();

    case REF_JERK:
      return getRef_jerk();

    case MAX_VELO:
      return getMax_velo();

    case MAX_ACC:
      return getMax_acc();

    case ENCODER_TYPE:
      return getEncoder_type();

    case ENCODER_RESOLUTION:
      return getEncoder_resolution();

    case POSITION_BIAS:
      return getPosition_bias();

    case SCREW_LEAD:
      return getScrew_lead();

    case INVERT:
      return isInvert();

    case POSITION_LIMIT:
      return getPosition_limit();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case MODE:
      return isSetMode();
    case REF_VELO:
      return isSetRef_velo();
    case REF_ACC:
      return isSetRef_acc();
    case REF_JERK:
      return isSetRef_jerk();
    case MAX_VELO:
      return isSetMax_velo();
    case MAX_ACC:
      return isSetMax_acc();
    case ENCODER_TYPE:
      return isSetEncoder_type();
    case ENCODER_RESOLUTION:
      return isSetEncoder_resolution();
    case POSITION_BIAS:
      return isSetPosition_bias();
    case SCREW_LEAD:
      return isSetScrew_lead();
    case INVERT:
      return isSetInvert();
    case POSITION_LIMIT:
      return isSetPosition_limit();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof EAxisParam)
      return this.equals((EAxisParam)that);
    return false;
  }

  public boolean equals(EAxisParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_mode = true;
    boolean that_present_mode = true;
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (this.mode != that.mode)
        return false;
    }

    boolean this_present_ref_velo = true;
    boolean that_present_ref_velo = true;
    if (this_present_ref_velo || that_present_ref_velo) {
      if (!(this_present_ref_velo && that_present_ref_velo))
        return false;
      if (this.ref_velo != that.ref_velo)
        return false;
    }

    boolean this_present_ref_acc = true;
    boolean that_present_ref_acc = true;
    if (this_present_ref_acc || that_present_ref_acc) {
      if (!(this_present_ref_acc && that_present_ref_acc))
        return false;
      if (this.ref_acc != that.ref_acc)
        return false;
    }

    boolean this_present_ref_jerk = true;
    boolean that_present_ref_jerk = true;
    if (this_present_ref_jerk || that_present_ref_jerk) {
      if (!(this_present_ref_jerk && that_present_ref_jerk))
        return false;
      if (this.ref_jerk != that.ref_jerk)
        return false;
    }

    boolean this_present_max_velo = true;
    boolean that_present_max_velo = true;
    if (this_present_max_velo || that_present_max_velo) {
      if (!(this_present_max_velo && that_present_max_velo))
        return false;
      if (this.max_velo != that.max_velo)
        return false;
    }

    boolean this_present_max_acc = true;
    boolean that_present_max_acc = true;
    if (this_present_max_acc || that_present_max_acc) {
      if (!(this_present_max_acc && that_present_max_acc))
        return false;
      if (this.max_acc != that.max_acc)
        return false;
    }

    boolean this_present_encoder_type = true;
    boolean that_present_encoder_type = true;
    if (this_present_encoder_type || that_present_encoder_type) {
      if (!(this_present_encoder_type && that_present_encoder_type))
        return false;
      if (this.encoder_type != that.encoder_type)
        return false;
    }

    boolean this_present_encoder_resolution = true;
    boolean that_present_encoder_resolution = true;
    if (this_present_encoder_resolution || that_present_encoder_resolution) {
      if (!(this_present_encoder_resolution && that_present_encoder_resolution))
        return false;
      if (this.encoder_resolution != that.encoder_resolution)
        return false;
    }

    boolean this_present_position_bias = true;
    boolean that_present_position_bias = true;
    if (this_present_position_bias || that_present_position_bias) {
      if (!(this_present_position_bias && that_present_position_bias))
        return false;
      if (this.position_bias != that.position_bias)
        return false;
    }

    boolean this_present_screw_lead = true;
    boolean that_present_screw_lead = true;
    if (this_present_screw_lead || that_present_screw_lead) {
      if (!(this_present_screw_lead && that_present_screw_lead))
        return false;
      if (this.screw_lead != that.screw_lead)
        return false;
    }

    boolean this_present_invert = true;
    boolean that_present_invert = true;
    if (this_present_invert || that_present_invert) {
      if (!(this_present_invert && that_present_invert))
        return false;
      if (this.invert != that.invert)
        return false;
    }

    boolean this_present_position_limit = true && this.isSetPosition_limit();
    boolean that_present_position_limit = true && that.isSetPosition_limit();
    if (this_present_position_limit || that_present_position_limit) {
      if (!(this_present_position_limit && that_present_position_limit))
        return false;
      if (!this.position_limit.equals(that.position_limit))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + type;

    hashCode = hashCode * 8191 + mode;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ref_velo);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ref_acc);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ref_jerk);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_velo);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_acc);

    hashCode = hashCode * 8191 + encoder_type;

    hashCode = hashCode * 8191 + encoder_resolution;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(position_bias);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(screw_lead);

    hashCode = hashCode * 8191 + ((invert) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPosition_limit()) ? 131071 : 524287);
    if (isSetPosition_limit())
      hashCode = hashCode * 8191 + position_limit.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EAxisParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRef_velo()).compareTo(other.isSetRef_velo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_velo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_velo, other.ref_velo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRef_acc()).compareTo(other.isSetRef_acc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_acc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_acc, other.ref_acc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRef_jerk()).compareTo(other.isSetRef_jerk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_jerk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_jerk, other.ref_jerk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_velo()).compareTo(other.isSetMax_velo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_velo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_velo, other.max_velo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_acc()).compareTo(other.isSetMax_acc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_acc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_acc, other.max_acc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEncoder_type()).compareTo(other.isSetEncoder_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoder_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoder_type, other.encoder_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEncoder_resolution()).compareTo(other.isSetEncoder_resolution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoder_resolution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoder_resolution, other.encoder_resolution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPosition_bias()).compareTo(other.isSetPosition_bias());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition_bias()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_bias, other.position_bias);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScrew_lead()).compareTo(other.isSetScrew_lead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScrew_lead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.screw_lead, other.screw_lead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInvert()).compareTo(other.isSetInvert());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvert()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invert, other.invert);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPosition_limit()).compareTo(other.isSetPosition_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_limit, other.position_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EAxisParam(");
    boolean first = true;

    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    sb.append(this.mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ref_velo:");
    sb.append(this.ref_velo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ref_acc:");
    sb.append(this.ref_acc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ref_jerk:");
    sb.append(this.ref_jerk);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_velo:");
    sb.append(this.max_velo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_acc:");
    sb.append(this.max_acc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("encoder_type:");
    sb.append(this.encoder_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("encoder_resolution:");
    sb.append(this.encoder_resolution);
    first = false;
    if (!first) sb.append(", ");
    sb.append("position_bias:");
    sb.append(this.position_bias);
    first = false;
    if (!first) sb.append(", ");
    sb.append("screw_lead:");
    sb.append(this.screw_lead);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invert:");
    sb.append(this.invert);
    first = false;
    if (!first) sb.append(", ");
    sb.append("position_limit:");
    if (this.position_limit == null) {
      sb.append("null");
    } else {
      sb.append(this.position_limit);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mode' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ref_velo' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ref_acc' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ref_jerk' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'max_velo' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'max_acc' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'encoder_type' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'encoder_resolution' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'position_bias' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'screw_lead' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'invert' because it's a primitive and you chose the non-beans generator.
    if (position_limit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'position_limit' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EAxisParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EAxisParamStandardScheme getScheme() {
      return new EAxisParamStandardScheme();
    }
  }

  private static class EAxisParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<EAxisParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EAxisParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mode = iprot.readI32();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REF_VELO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ref_velo = iprot.readDouble();
              struct.setRef_veloIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REF_ACC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ref_acc = iprot.readDouble();
              struct.setRef_accIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REF_JERK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ref_jerk = iprot.readDouble();
              struct.setRef_jerkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_VELO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_velo = iprot.readDouble();
              struct.setMax_veloIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAX_ACC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_acc = iprot.readDouble();
              struct.setMax_accIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENCODER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.encoder_type = iprot.readI32();
              struct.setEncoder_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENCODER_RESOLUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.encoder_resolution = iprot.readI32();
              struct.setEncoder_resolutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POSITION_BIAS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.position_bias = iprot.readDouble();
              struct.setPosition_biasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SCREW_LEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.screw_lead = iprot.readDouble();
              struct.setScrew_leadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INVERT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.invert = iprot.readBool();
              struct.setInvertIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POSITION_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                struct.position_limit = new java.util.ArrayList<java.lang.Double>(_list264.size);
                double _elem265;
                for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                {
                  _elem265 = iprot.readDouble();
                  struct.position_limit.add(_elem265);
                }
                iprot.readListEnd();
              }
              struct.setPosition_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mode' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRef_velo()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref_velo' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRef_acc()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref_acc' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRef_jerk()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref_jerk' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMax_velo()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_velo' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMax_acc()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_acc' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEncoder_type()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'encoder_type' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEncoder_resolution()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'encoder_resolution' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPosition_bias()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'position_bias' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetScrew_lead()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'screw_lead' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInvert()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'invert' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EAxisParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeI32(struct.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_VELO_FIELD_DESC);
      oprot.writeDouble(struct.ref_velo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ACC_FIELD_DESC);
      oprot.writeDouble(struct.ref_acc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_JERK_FIELD_DESC);
      oprot.writeDouble(struct.ref_jerk);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_VELO_FIELD_DESC);
      oprot.writeDouble(struct.max_velo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ACC_FIELD_DESC);
      oprot.writeDouble(struct.max_acc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENCODER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.encoder_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENCODER_RESOLUTION_FIELD_DESC);
      oprot.writeI32(struct.encoder_resolution);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_BIAS_FIELD_DESC);
      oprot.writeDouble(struct.position_bias);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCREW_LEAD_FIELD_DESC);
      oprot.writeDouble(struct.screw_lead);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INVERT_FIELD_DESC);
      oprot.writeBool(struct.invert);
      oprot.writeFieldEnd();
      if (struct.position_limit != null) {
        oprot.writeFieldBegin(POSITION_LIMIT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.position_limit.size()));
          for (double _iter267 : struct.position_limit)
          {
            oprot.writeDouble(_iter267);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EAxisParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EAxisParamTupleScheme getScheme() {
      return new EAxisParamTupleScheme();
    }
  }

  private static class EAxisParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<EAxisParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EAxisParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.type);
      oprot.writeI32(struct.mode);
      oprot.writeDouble(struct.ref_velo);
      oprot.writeDouble(struct.ref_acc);
      oprot.writeDouble(struct.ref_jerk);
      oprot.writeDouble(struct.max_velo);
      oprot.writeDouble(struct.max_acc);
      oprot.writeI32(struct.encoder_type);
      oprot.writeI32(struct.encoder_resolution);
      oprot.writeDouble(struct.position_bias);
      oprot.writeDouble(struct.screw_lead);
      oprot.writeBool(struct.invert);
      {
        oprot.writeI32(struct.position_limit.size());
        for (double _iter268 : struct.position_limit)
        {
          oprot.writeDouble(_iter268);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EAxisParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      struct.mode = iprot.readI32();
      struct.setModeIsSet(true);
      struct.ref_velo = iprot.readDouble();
      struct.setRef_veloIsSet(true);
      struct.ref_acc = iprot.readDouble();
      struct.setRef_accIsSet(true);
      struct.ref_jerk = iprot.readDouble();
      struct.setRef_jerkIsSet(true);
      struct.max_velo = iprot.readDouble();
      struct.setMax_veloIsSet(true);
      struct.max_acc = iprot.readDouble();
      struct.setMax_accIsSet(true);
      struct.encoder_type = iprot.readI32();
      struct.setEncoder_typeIsSet(true);
      struct.encoder_resolution = iprot.readI32();
      struct.setEncoder_resolutionIsSet(true);
      struct.position_bias = iprot.readDouble();
      struct.setPosition_biasIsSet(true);
      struct.screw_lead = iprot.readDouble();
      struct.setScrew_leadIsSet(true);
      struct.invert = iprot.readBool();
      struct.setInvertIsSet(true);
      {
        org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.position_limit = new java.util.ArrayList<java.lang.Double>(_list269.size);
        double _elem270;
        for (int _i271 = 0; _i271 < _list269.size; ++_i271)
        {
          _elem270 = iprot.readDouble();
          struct.position_limit.add(_elem270);
        }
      }
      struct.setPosition_limitIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

